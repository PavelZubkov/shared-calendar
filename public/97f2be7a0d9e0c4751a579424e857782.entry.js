var fP=Object.create,Yd=Object.defineProperty,pP=Object.getPrototypeOf,hP=Object.prototype.hasOwnProperty,mP=Object.getOwnPropertyNames,vP=Object.getOwnPropertyDescriptor;var yP=e=>Yd(e,"__esModule",{value:!0});var L=(e,t)=>()=>(t||(t={exports:{}},e(t.exports,t)),t.exports);var gP=(e,t,r)=>{if(yP(e),t&&typeof t=="object"||typeof t=="function")for(let n of mP(t))!hP.call(e,n)&&n!=="default"&&Yd(e,n,{get:()=>t[n],enumerable:!(r=vP(t,n))||r.enumerable});return e},ge=e=>e&&e.__esModule?e:gP(Yd(e!=null?fP(pP(e)):{},"default",{value:e,enumerable:!0}),e);var iu=L((U2,Tv)=>{"use strict";var Ov=Object.getOwnPropertySymbols,wP=Object.prototype.hasOwnProperty,_P=Object.prototype.propertyIsEnumerable;function xP(e){if(e==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function EP(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de",Object.getOwnPropertyNames(e)[0]==="5")return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;var n=Object.getOwnPropertyNames(t).map(function(i){return t[i]});if(n.join("")!=="0123456789")return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(i){o[i]=i}),Object.keys(Object.assign({},o)).join("")==="abcdefghijklmnopqrst"}catch(i){return!1}}Tv.exports=EP()?Object.assign:function(e,t){for(var r,n=xP(e),o,i=1;i<arguments.length;i++){r=Object(arguments[i]);for(var u in r)wP.call(r,u)&&(n[u]=r[u]);if(Ov){o=Ov(r);for(var s=0;s<o.length;s++)_P.call(r,o[s])&&(n[o[s]]=r[o[s]])}}return n}});var Qv=L(Ee=>{"use strict";var Wd=iu(),uo=60103,bv=60106;Ee.Fragment=60107;Ee.StrictMode=60108;Ee.Profiler=60114;var kv=60109,Mv=60110,Nv=60112;Ee.Suspense=60113;var Rv=60115,qv=60116;typeof Symbol=="function"&&Symbol.for&&(Jt=Symbol.for,uo=Jt("react.element"),bv=Jt("react.portal"),Ee.Fragment=Jt("react.fragment"),Ee.StrictMode=Jt("react.strict_mode"),Ee.Profiler=Jt("react.profiler"),kv=Jt("react.provider"),Mv=Jt("react.context"),Nv=Jt("react.forward_ref"),Ee.Suspense=Jt("react.suspense"),Rv=Jt("react.memo"),qv=Jt("react.lazy"));var Jt,Iv=typeof Symbol=="function"&&Symbol.iterator;function SP(e){return e===null||typeof e!="object"?null:(e=Iv&&e[Iv]||e["@@iterator"],typeof e=="function"?e:null)}function pi(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Lv={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Av={};function so(e,t,r){this.props=e,this.context=t,this.refs=Av,this.updater=r||Lv}so.prototype.isReactComponent={};so.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error(pi(85));this.updater.enqueueSetState(this,e,t,"setState")};so.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Fv(){}Fv.prototype=so.prototype;function Hd(e,t,r){this.props=e,this.context=t,this.refs=Av,this.updater=r||Lv}var Qd=Hd.prototype=new Fv;Qd.constructor=Hd;Wd(Qd,so.prototype);Qd.isPureReactComponent=!0;var Bd={current:null},Uv=Object.prototype.hasOwnProperty,jv={key:!0,ref:!0,__self:!0,__source:!0};function Yv(e,t,r){var n,o={},i=null,u=null;if(t!=null)for(n in t.ref!==void 0&&(u=t.ref),t.key!==void 0&&(i=""+t.key),t)Uv.call(t,n)&&!jv.hasOwnProperty(n)&&(o[n]=t[n]);var s=arguments.length-2;if(s===1)o.children=r;else if(1<s){for(var c=Array(s),d=0;d<s;d++)c[d]=arguments[d+2];o.children=c}if(e&&e.defaultProps)for(n in s=e.defaultProps,s)o[n]===void 0&&(o[n]=s[n]);return{$$typeof:uo,type:e,key:i,ref:u,props:o,_owner:Bd.current}}function CP(e,t){return{$$typeof:uo,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Vd(e){return typeof e=="object"&&e!==null&&e.$$typeof===uo}function DP(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(r){return t[r]})}var Wv=/\/+/g;function $d(e,t){return typeof e=="object"&&e!==null&&e.key!=null?DP(""+e.key):t.toString(36)}function au(e,t,r,n,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var u=!1;if(e===null)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case uo:case bv:u=!0}}if(u)return u=e,o=o(u),e=n===""?"."+$d(u,0):n,Array.isArray(o)?(r="",e!=null&&(r=e.replace(Wv,"$&/")+"/"),au(o,t,r,"",function(d){return d})):o!=null&&(Vd(o)&&(o=CP(o,r+(!o.key||u&&u.key===o.key?"":(""+o.key).replace(Wv,"$&/")+"/")+e)),t.push(o)),1;if(u=0,n=n===""?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){i=e[s];var c=n+$d(i,s);u+=au(i,t,r,c,o)}else if(c=SP(e),typeof c=="function")for(e=c.call(e),s=0;!(i=e.next()).done;)i=i.value,c=n+$d(i,s++),u+=au(i,t,r,c,o);else if(i==="object")throw t=""+e,Error(pi(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function uu(e,t,r){if(e==null)return e;var n=[],o=0;return au(e,n,"","",function(i){return t.call(r,i,o++)}),n}function PP(e){if(e._status===-1){var t=e._result;t=t(),e._status=0,e._result=t,t.then(function(r){e._status===0&&(r=r.default,e._status=1,e._result=r)},function(r){e._status===0&&(e._status=2,e._result=r)})}if(e._status===1)return e._result;throw e._result}var Hv={current:null};function Nr(){var e=Hv.current;if(e===null)throw Error(pi(321));return e}var TP={ReactCurrentDispatcher:Hv,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:Bd,IsSomeRendererActing:{current:!1},assign:Wd};Ee.Children={map:uu,forEach:function(e,t,r){uu(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return uu(e,function(){t++}),t},toArray:function(e){return uu(e,function(t){return t})||[]},only:function(e){if(!Vd(e))throw Error(pi(143));return e}};Ee.Component=so;Ee.PureComponent=Hd;Ee.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=TP;Ee.cloneElement=function(e,t,r){if(e==null)throw Error(pi(267,e));var n=Wd({},e.props),o=e.key,i=e.ref,u=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,u=Bd.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)Uv.call(t,c)&&!jv.hasOwnProperty(c)&&(n[c]=t[c]===void 0&&s!==void 0?s[c]:t[c])}var c=arguments.length-2;if(c===1)n.children=r;else if(1<c){s=Array(c);for(var d=0;d<c;d++)s[d]=arguments[d+2];n.children=s}return{$$typeof:uo,type:e.type,key:o,ref:i,props:n,_owner:u}};Ee.createContext=function(e,t){return t===void 0&&(t=null),e={$$typeof:Mv,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null},e.Provider={$$typeof:kv,_context:e},e.Consumer=e};Ee.createElement=Yv;Ee.createFactory=function(e){var t=Yv.bind(null,e);return t.type=e,t};Ee.createRef=function(){return{current:null}};Ee.forwardRef=function(e){return{$$typeof:Nv,render:e}};Ee.isValidElement=Vd;Ee.lazy=function(e){return{$$typeof:qv,_payload:{_status:-1,_result:e},_init:PP}};Ee.memo=function(e,t){return{$$typeof:Rv,type:e,compare:t===void 0?null:t}};Ee.useCallback=function(e,t){return Nr().useCallback(e,t)};Ee.useContext=function(e,t){return Nr().useContext(e,t)};Ee.useDebugValue=function(){};Ee.useEffect=function(e,t){return Nr().useEffect(e,t)};Ee.useImperativeHandle=function(e,t,r){return Nr().useImperativeHandle(e,t,r)};Ee.useLayoutEffect=function(e,t){return Nr().useLayoutEffect(e,t)};Ee.useMemo=function(e,t){return Nr().useMemo(e,t)};Ee.useReducer=function(e,t,r){return Nr().useReducer(e,t,r)};Ee.useRef=function(e){return Nr().useRef(e)};Ee.useState=function(e){return Nr().useState(e)};Ee.version="17.0.1"});var _e=L((Y2,Bv)=>{"use strict";Bv.exports=Qv()});var Xv=L(be=>{"use strict";var lo,hi,su,zd;typeof performance=="object"&&typeof performance.now=="function"?(Vv=performance,be.unstable_now=function(){return Vv.now()}):(Kd=Date,$v=Kd.now(),be.unstable_now=function(){return Kd.now()-$v});var Vv,Kd,$v;typeof window=="undefined"||typeof MessageChannel!="function"?(co=null,Gd=null,Xd=function(){if(co!==null)try{var e=be.unstable_now();co(!0,e),co=null}catch(t){throw setTimeout(Xd,0),t}},lo=function(e){co!==null?setTimeout(lo,0,e):(co=e,setTimeout(Xd,0))},hi=function(e,t){Gd=setTimeout(e,t)},su=function(){clearTimeout(Gd)},be.unstable_shouldYield=function(){return!1},zd=be.unstable_forceFrameRate=function(){}):(zv=window.setTimeout,Kv=window.clearTimeout,typeof console!="undefined"&&(Gv=window.cancelAnimationFrame,typeof window.requestAnimationFrame!="function"&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),typeof Gv!="function"&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")),mi=!1,vi=null,lu=-1,Jd=5,Zd=0,be.unstable_shouldYield=function(){return be.unstable_now()>=Zd},zd=function(){},be.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Jd=0<e?Math.floor(1e3/e):5},ef=new MessageChannel,cu=ef.port2,ef.port1.onmessage=function(){if(vi!==null){var e=be.unstable_now();Zd=e+Jd;try{vi(!0,e)?cu.postMessage(null):(mi=!1,vi=null)}catch(t){throw cu.postMessage(null),t}}else mi=!1},lo=function(e){vi=e,mi||(mi=!0,cu.postMessage(null))},hi=function(e,t){lu=zv(function(){e(be.unstable_now())},t)},su=function(){Kv(lu),lu=-1});var co,Gd,Xd,zv,Kv,Gv,mi,vi,lu,Jd,Zd,ef,cu;function tf(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(o!==void 0&&0<du(o,t))e[n]=t,e[r]=o,r=n;else break e}}function lr(e){return e=e[0],e===void 0?null:e}function fu(e){var t=e[0];if(t!==void 0){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var i=2*(n+1)-1,u=e[i],s=i+1,c=e[s];if(u!==void 0&&0>du(u,r))c!==void 0&&0>du(c,u)?(e[n]=c,e[s]=r,n=s):(e[n]=u,e[i]=r,n=i);else if(c!==void 0&&0>du(c,r))e[n]=c,e[s]=r,n=s;else break e}}return t}return null}function du(e,t){var r=e.sortIndex-t.sortIndex;return r!==0?r:e.id-t.id}var vr=[],Gr=[],OP=1,Zt=null,St=3,pu=!1,Tn=!1,yi=!1;function rf(e){for(var t=lr(Gr);t!==null;){if(t.callback===null)fu(Gr);else if(t.startTime<=e)fu(Gr),t.sortIndex=t.expirationTime,tf(vr,t);else break;t=lr(Gr)}}function nf(e){if(yi=!1,rf(e),!Tn)if(lr(vr)!==null)Tn=!0,lo(of);else{var t=lr(Gr);t!==null&&hi(nf,t.startTime-e)}}function of(e,t){Tn=!1,yi&&(yi=!1,su()),pu=!0;var r=St;try{for(rf(t),Zt=lr(vr);Zt!==null&&(!(Zt.expirationTime>t)||e&&!be.unstable_shouldYield());){var n=Zt.callback;if(typeof n=="function"){Zt.callback=null,St=Zt.priorityLevel;var o=n(Zt.expirationTime<=t);t=be.unstable_now(),typeof o=="function"?Zt.callback=o:Zt===lr(vr)&&fu(vr),rf(t)}else fu(vr);Zt=lr(vr)}if(Zt!==null)var i=!0;else{var u=lr(Gr);u!==null&&hi(nf,u.startTime-t),i=!1}return i}finally{Zt=null,St=r,pu=!1}}var bP=zd;be.unstable_IdlePriority=5;be.unstable_ImmediatePriority=1;be.unstable_LowPriority=4;be.unstable_NormalPriority=3;be.unstable_Profiling=null;be.unstable_UserBlockingPriority=2;be.unstable_cancelCallback=function(e){e.callback=null};be.unstable_continueExecution=function(){Tn||pu||(Tn=!0,lo(of))};be.unstable_getCurrentPriorityLevel=function(){return St};be.unstable_getFirstCallbackNode=function(){return lr(vr)};be.unstable_next=function(e){switch(St){case 1:case 2:case 3:var t=3;break;default:t=St}var r=St;St=t;try{return e()}finally{St=r}};be.unstable_pauseExecution=function(){};be.unstable_requestPaint=bP;be.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=St;St=e;try{return t()}finally{St=r}};be.unstable_scheduleCallback=function(e,t,r){var n=be.unstable_now();switch(typeof r=="object"&&r!==null?(r=r.delay,r=typeof r=="number"&&0<r?n+r:n):r=n,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return o=r+o,e={id:OP++,callback:t,priorityLevel:e,startTime:r,expirationTime:o,sortIndex:-1},r>n?(e.sortIndex=r,tf(Gr,e),lr(vr)===null&&e===lr(Gr)&&(yi?su():yi=!0,hi(nf,r-n))):(e.sortIndex=o,tf(vr,e),Tn||pu||(Tn=!0,lo(of))),e};be.unstable_wrapCallback=function(e){var t=St;return function(){var r=St;St=t;try{return e.apply(this,arguments)}finally{St=r}}}});var Zv=L((H2,Jv)=>{"use strict";Jv.exports=Xv()});var j0=L(er=>{"use strict";var hu=_e(),We=iu(),mt=Zv();function $(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!hu)throw Error($(227));var ey=new Set,gi={};function On(e,t){fo(e,t),fo(e+"Capture",t)}function fo(e,t){for(gi[e]=t,e=0;e<t.length;e++)ey.add(t[e])}var Rr=!(typeof window=="undefined"||typeof window.document=="undefined"||typeof window.document.createElement=="undefined"),kP=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ty=Object.prototype.hasOwnProperty,ry={},ny={};function MP(e){return ty.call(ny,e)?!0:ty.call(ry,e)?!1:kP.test(e)?ny[e]=!0:(ry[e]=!0,!1)}function NP(e,t,r,n){if(r!==null&&r.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return n?!1:r!==null?!r.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function RP(e,t,r,n){if(t===null||typeof t=="undefined"||NP(e,t,r,n))return!0;if(n)return!1;if(r!==null)switch(r.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Nt(e,t,r,n,o,i,u){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=u}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){gt[e]=new Nt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];gt[t]=new Nt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){gt[e]=new Nt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){gt[e]=new Nt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){gt[e]=new Nt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){gt[e]=new Nt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){gt[e]=new Nt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){gt[e]=new Nt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){gt[e]=new Nt(e,5,!1,e.toLowerCase(),null,!1,!1)});var af=/[\-:]([a-z])/g;function uf(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(af,uf);gt[t]=new Nt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(af,uf);gt[t]=new Nt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(af,uf);gt[t]=new Nt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){gt[e]=new Nt(e,1,!1,e.toLowerCase(),null,!1,!1)});gt.xlinkHref=new Nt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){gt[e]=new Nt(e,1,!1,e.toLowerCase(),null,!0,!0)});function sf(e,t,r,n){var o=gt.hasOwnProperty(t)?gt[t]:null,i=o!==null?o.type===0:n?!1:!(!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N");i||(RP(t,r,o,n)&&(r=null),n||o===null?MP(t)&&(r===null?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=r===null?o.type===3?!1:"":r:(t=o.attributeName,n=o.attributeNamespace,r===null?e.removeAttribute(t):(o=o.type,r=o===3||o===4&&r===!0?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}var bn=hu.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,wi=60103,kn=60106,Xr=60107,lf=60108,_i=60114,cf=60109,df=60110,mu=60112,xi=60113,vu=60120,yu=60115,ff=60116,pf=60121,hf=60128,oy=60129,mf=60130,vf=60131;typeof Symbol=="function"&&Symbol.for&&(it=Symbol.for,wi=it("react.element"),kn=it("react.portal"),Xr=it("react.fragment"),lf=it("react.strict_mode"),_i=it("react.profiler"),cf=it("react.provider"),df=it("react.context"),mu=it("react.forward_ref"),xi=it("react.suspense"),vu=it("react.suspense_list"),yu=it("react.memo"),ff=it("react.lazy"),pf=it("react.block"),it("react.scope"),hf=it("react.opaque.id"),oy=it("react.debug_trace_mode"),mf=it("react.offscreen"),vf=it("react.legacy_hidden"));var it,iy=typeof Symbol=="function"&&Symbol.iterator;function Ei(e){return e===null||typeof e!="object"?null:(e=iy&&e[iy]||e["@@iterator"],typeof e=="function"?e:null)}var yf;function Si(e){if(yf===void 0)try{throw Error()}catch(r){var t=r.stack.trim().match(/\n( *(at )?)/);yf=t&&t[1]||""}return`
`+yf+e}var gf=!1;function gu(e,t){if(!e||gf)return"";gf=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(c){var n=c}Reflect.construct(e,[],t)}else{try{t.call()}catch(c){n=c}e.call(t.prototype)}else{try{throw Error()}catch(c){n=c}e()}}catch(c){if(c&&n&&typeof c.stack=="string"){for(var o=c.stack.split(`
`),i=n.stack.split(`
`),u=o.length-1,s=i.length-1;1<=u&&0<=s&&o[u]!==i[s];)s--;for(;1<=u&&0<=s;u--,s--)if(o[u]!==i[s]){if(u!==1||s!==1)do if(u--,s--,0>s||o[u]!==i[s])return`
`+o[u].replace(" at new "," at ");while(1<=u&&0<=s);break}}}finally{gf=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?Si(e):""}function qP(e){switch(e.tag){case 5:return Si(e.type);case 16:return Si("Lazy");case 13:return Si("Suspense");case 19:return Si("SuspenseList");case 0:case 2:case 15:return e=gu(e.type,!1),e;case 11:return e=gu(e.type.render,!1),e;case 22:return e=gu(e.type._render,!1),e;case 1:return e=gu(e.type,!0),e;default:return""}}function po(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Xr:return"Fragment";case kn:return"Portal";case _i:return"Profiler";case lf:return"StrictMode";case xi:return"Suspense";case vu:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case df:return(e.displayName||"Context")+".Consumer";case cf:return(e._context.displayName||"Context")+".Provider";case mu:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case yu:return po(e.type);case pf:return po(e._render);case ff:t=e._payload,e=e._init;try{return po(e(t))}catch(r){}}return null}function Jr(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ay(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function IP(e){var t=ay(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&typeof r!="undefined"&&typeof r.get=="function"&&typeof r.set=="function"){var o=r.get,i=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(u){n=""+u,i.call(this,u)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(u){n=""+u},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function wu(e){e._valueTracker||(e._valueTracker=IP(e))}function uy(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=ay(e)?e.checked?"true":"false":e.value),e=n,e!==r?(t.setValue(e),!0):!1}function _u(e){if(e=e||(typeof document!="undefined"?document:void 0),typeof e=="undefined")return null;try{return e.activeElement||e.body}catch(t){return e.body}}function wf(e,t){var r=t.checked;return We({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:r??e._wrapperState.initialChecked})}function sy(e,t){var r=t.defaultValue==null?"":t.defaultValue,n=t.checked!=null?t.checked:t.defaultChecked;r=Jr(t.value!=null?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function ly(e,t){t=t.checked,t!=null&&sf(e,"checked",t,!1)}function xf(e,t){ly(e,t);var r=Jr(t.value),n=t.type;if(r!=null)n==="number"?(r===0&&e.value===""||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if(n==="submit"||n==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?_f(e,t.type,r):t.hasOwnProperty("defaultValue")&&_f(e,t.type,Jr(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function cy(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!(n!=="submit"&&n!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}r=e.name,r!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,r!==""&&(e.name=r)}function _f(e,t,r){(t!=="number"||_u(e.ownerDocument)!==e)&&(r==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function LP(e){var t="";return hu.Children.forEach(e,function(r){r!=null&&(t+=r)}),t}function Ef(e,t){return e=We({children:void 0},t),(t=LP(t.children))&&(e.children=t),e}function ho(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Jr(r),t=null,o=0;o<e.length;o++){if(e[o].value===r){e[o].selected=!0,n&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function Sf(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error($(91));return We({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function dy(e,t){var r=t.value;if(r==null){if(r=t.children,t=t.defaultValue,r!=null){if(t!=null)throw Error($(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error($(93));r=r[0]}t=r}t==null&&(t=""),r=t}e._wrapperState={initialValue:Jr(r)}}function fy(e,t){var r=Jr(t.value),n=Jr(t.defaultValue);r!=null&&(r=""+r,r!==e.value&&(e.value=r),t.defaultValue==null&&e.defaultValue!==r&&(e.defaultValue=r)),n!=null&&(e.defaultValue=""+n)}function py(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}var Cf={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function hy(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Df(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?hy(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var xu,my=function(e){return typeof MSApp!="undefined"&&MSApp.execUnsafeLocalFunction?function(t,r,n,o){MSApp.execUnsafeLocalFunction(function(){return e(t,r,n,o)})}:e}(function(e,t){if(e.namespaceURI!==Cf.svg||"innerHTML"in e)e.innerHTML=t;else{for(xu=xu||document.createElement("div"),xu.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=xu.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Ci(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&r.nodeType===3){r.nodeValue=t;return}}e.textContent=t}var Di={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},AP=["Webkit","ms","Moz","O"];Object.keys(Di).forEach(function(e){AP.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Di[t]=Di[e]})});function vy(e,t,r){return t==null||typeof t=="boolean"||t===""?"":r||typeof t!="number"||t===0||Di.hasOwnProperty(e)&&Di[e]?(""+t).trim():t+"px"}function yy(e,t){e=e.style;for(var r in t)if(t.hasOwnProperty(r)){var n=r.indexOf("--")===0,o=vy(r,t[r],n);r==="float"&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}var FP=We({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Pf(e,t){if(t){if(FP[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error($(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error($(60));if(!(typeof t.dangerouslySetInnerHTML=="object"&&"__html"in t.dangerouslySetInnerHTML))throw Error($(61))}if(t.style!=null&&typeof t.style!="object")throw Error($(62))}}function Tf(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Of(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var bf=null,mo=null,vo=null;function gy(e){if(e=Pi(e)){if(typeof bf!="function")throw Error($(280));var t=e.stateNode;t&&(t=Eu(t),bf(e.stateNode,e.type,t))}}function wy(e){mo?vo?vo.push(e):vo=[e]:mo=e}function _y(){if(mo){var e=mo,t=vo;if(vo=mo=null,gy(e),t)for(e=0;e<t.length;e++)gy(t[e])}}function kf(e,t){return e(t)}function xy(e,t,r,n,o){return e(t,r,n,o)}function Mf(){}var Ey=kf,Mn=!1,Nf=!1;function Rf(){(mo!==null||vo!==null)&&(Mf(),_y())}function UP(e,t,r){if(Nf)return e(t,r);Nf=!0;try{return Ey(e,t,r)}finally{Nf=!1,Rf()}}function Ti(e,t){var r=e.stateNode;if(r===null)return null;var n=Eu(r);if(n===null)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(e=e.type,n=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!n;break e;default:e=!1}if(e)return null;if(r&&typeof r!="function")throw Error($(231,t,typeof r));return r}var qf=!1;if(Rr)try{yo={},Object.defineProperty(yo,"passive",{get:function(){qf=!0}}),window.addEventListener("test",yo,yo),window.removeEventListener("test",yo,yo)}catch(e){qf=!1}var yo;function jP(e,t,r,n,o,i,u,s,c){var d=Array.prototype.slice.call(arguments,3);try{t.apply(r,d)}catch(p){this.onError(p)}}var Oi=!1,Su=null,Cu=!1,If=null,YP={onError:function(e){Oi=!0,Su=e}};function WP(e,t,r,n,o,i,u,s,c){Oi=!1,Su=null,jP.apply(YP,arguments)}function HP(e,t,r,n,o,i,u,s,c){if(WP.apply(this,arguments),Oi){if(Oi){var d=Su;Oi=!1,Su=null}else throw Error($(198));Cu||(Cu=!0,If=d)}}function Nn(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&1026)!=0&&(r=t.return),e=t.return;while(e)}return t.tag===3?r:null}function Sy(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Cy(e){if(Nn(e)!==e)throw Error($(188))}function QP(e){var t=e.alternate;if(!t){if(t=Nn(e),t===null)throw Error($(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(o===null)break;var i=o.alternate;if(i===null){if(n=o.return,n!==null){r=n;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===r)return Cy(o),e;if(i===n)return Cy(o),t;i=i.sibling}throw Error($(188))}if(r.return!==n.return)r=o,n=i;else{for(var u=!1,s=o.child;s;){if(s===r){u=!0,r=o,n=i;break}if(s===n){u=!0,n=o,r=i;break}s=s.sibling}if(!u){for(s=i.child;s;){if(s===r){u=!0,r=i,n=o;break}if(s===n){u=!0,n=i,r=o;break}s=s.sibling}if(!u)throw Error($(189))}}if(r.alternate!==n)throw Error($(190))}if(r.tag!==3)throw Error($(188));return r.stateNode.current===r?e:t}function Dy(e){if(e=QP(e),!e)return null;for(var t=e;;){if(t.tag===5||t.tag===6)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Py(e,t){for(var r=e.alternate;t!==null;){if(t===e||t===r)return!0;t=t.return}return!1}var Ty,Lf,Oy,by,Af=!1,yr=[],Zr=null,en=null,tn=null,bi=new Map,ki=new Map,Mi=[],ky="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ff(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:r|16,nativeEvent:o,targetContainers:[n]}}function My(e,t){switch(e){case"focusin":case"focusout":Zr=null;break;case"dragenter":case"dragleave":en=null;break;case"mouseover":case"mouseout":tn=null;break;case"pointerover":case"pointerout":bi.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ki.delete(t.pointerId)}}function Ni(e,t,r,n,o,i){return e===null||e.nativeEvent!==i?(e=Ff(t,r,n,o,i),t!==null&&(t=Pi(t),t!==null&&Lf(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function BP(e,t,r,n,o){switch(t){case"focusin":return Zr=Ni(Zr,e,t,r,n,o),!0;case"dragenter":return en=Ni(en,e,t,r,n,o),!0;case"mouseover":return tn=Ni(tn,e,t,r,n,o),!0;case"pointerover":var i=o.pointerId;return bi.set(i,Ni(bi.get(i)||null,e,t,r,n,o)),!0;case"gotpointercapture":return i=o.pointerId,ki.set(i,Ni(ki.get(i)||null,e,t,r,n,o)),!0}return!1}function VP(e){var t=Rn(e.target);if(t!==null){var r=Nn(t);if(r!==null){if(t=r.tag,t===13){if(t=Sy(r),t!==null){e.blockedOn=t,by(e.lanePriority,function(){mt.unstable_runWithPriority(e.priority,function(){Oy(r)})});return}}else if(t===3&&r.stateNode.hydrate){e.blockedOn=r.tag===3?r.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Du(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var r=Uf(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(r!==null)return t=Pi(r),t!==null&&Lf(t),e.blockedOn=r,!1;t.shift()}return!0}function Ny(e,t,r){Du(e)&&r.delete(t)}function $P(){for(Af=!1;0<yr.length;){var e=yr[0];if(e.blockedOn!==null){e=Pi(e.blockedOn),e!==null&&Ty(e);break}for(var t=e.targetContainers;0<t.length;){var r=Uf(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(r!==null){e.blockedOn=r;break}t.shift()}e.blockedOn===null&&yr.shift()}Zr!==null&&Du(Zr)&&(Zr=null),en!==null&&Du(en)&&(en=null),tn!==null&&Du(tn)&&(tn=null),bi.forEach(Ny),ki.forEach(Ny)}function Ri(e,t){e.blockedOn===t&&(e.blockedOn=null,Af||(Af=!0,mt.unstable_scheduleCallback(mt.unstable_NormalPriority,$P)))}function Ry(e){function t(o){return Ri(o,e)}if(0<yr.length){Ri(yr[0],e);for(var r=1;r<yr.length;r++){var n=yr[r];n.blockedOn===e&&(n.blockedOn=null)}}for(Zr!==null&&Ri(Zr,e),en!==null&&Ri(en,e),tn!==null&&Ri(tn,e),bi.forEach(t),ki.forEach(t),r=0;r<Mi.length;r++)n=Mi[r],n.blockedOn===e&&(n.blockedOn=null);for(;0<Mi.length&&(r=Mi[0],r.blockedOn===null);)VP(r),r.blockedOn===null&&Mi.shift()}function Pu(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var go={animationend:Pu("Animation","AnimationEnd"),animationiteration:Pu("Animation","AnimationIteration"),animationstart:Pu("Animation","AnimationStart"),transitionend:Pu("Transition","TransitionEnd")},jf={},qy={};Rr&&(qy=document.createElement("div").style,"AnimationEvent"in window||(delete go.animationend.animation,delete go.animationiteration.animation,delete go.animationstart.animation),"TransitionEvent"in window||delete go.transitionend.transition);function Tu(e){if(jf[e])return jf[e];if(!go[e])return e;var t=go[e],r;for(r in t)if(t.hasOwnProperty(r)&&r in qy)return jf[e]=t[r];return e}var Iy=Tu("animationend"),Ly=Tu("animationiteration"),Ay=Tu("animationstart"),Fy=Tu("transitionend"),Uy=new Map,Yf=new Map,zP=["abort","abort",Iy,"animationEnd",Ly,"animationIteration",Ay,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Fy,"transitionEnd","waiting","waiting"];function Wf(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Yf.set(n,t),Uy.set(n,o),On(o,[n])}}var KP=mt.unstable_now;KP();var Le=8;function wo(e){if((1&e)!=0)return Le=15,1;if((2&e)!=0)return Le=14,2;if((4&e)!=0)return Le=13,4;var t=24&e;return t!==0?(Le=12,t):(e&32)!=0?(Le=11,32):(t=192&e,t!==0?(Le=10,t):(e&256)!=0?(Le=9,256):(t=3584&e,t!==0?(Le=8,t):(e&4096)!=0?(Le=7,4096):(t=4186112&e,t!==0?(Le=6,t):(t=62914560&e,t!==0?(Le=5,t):e&67108864?(Le=4,67108864):(e&134217728)!=0?(Le=3,134217728):(t=805306368&e,t!==0?(Le=2,t):(1073741824&e)!=0?(Le=1,1073741824):(Le=8,e))))))}function GP(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function XP(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error($(358,e))}}function qi(e,t){var r=e.pendingLanes;if(r===0)return Le=0;var n=0,o=0,i=e.expiredLanes,u=e.suspendedLanes,s=e.pingedLanes;if(i!==0)n=i,o=Le=15;else if(i=r&134217727,i!==0){var c=i&~u;c!==0?(n=wo(c),o=Le):(s&=i,s!==0&&(n=wo(s),o=Le))}else i=r&~u,i!==0?(n=wo(i),o=Le):s!==0&&(n=wo(s),o=Le);if(n===0)return 0;if(n=31-rn(n),n=r&((0>n?0:1<<n)<<1)-1,t!==0&&t!==n&&(t&u)==0){if(wo(t),o<=Le)return t;Le=o}if(t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=n;0<t;)r=31-rn(t),o=1<<r,n|=e[r],t&=~o;return n}function jy(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Ou(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return e=_o(24&~t),e===0?Ou(10,t):e;case 10:return e=_o(192&~t),e===0?Ou(8,t):e;case 8:return e=_o(3584&~t),e===0&&(e=_o(4186112&~t),e===0&&(e=512)),e;case 2:return t=_o(805306368&~t),t===0&&(t=268435456),t}throw Error($(358,e))}function _o(e){return e&-e}function Hf(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function bu(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,e=e.eventTimes,t=31-rn(t),e[t]=r}var rn=Math.clz32?Math.clz32:JP,ZP=Math.log,eT=Math.LN2;function JP(e){return e===0?32:31-(ZP(e)/eT|0)|0}var tT=mt.unstable_UserBlockingPriority,rT=mt.unstable_runWithPriority,ku=!0;function nT(e,t,r,n){Mn||Mf();var o=Qf,i=Mn;Mn=!0;try{xy(o,e,t,r,n)}finally{(Mn=i)||Rf()}}function oT(e,t,r,n){rT(tT,Qf.bind(null,e,t,r,n))}function Qf(e,t,r,n){if(ku){var o;if((o=(t&4)==0)&&0<yr.length&&-1<ky.indexOf(e))e=Ff(null,e,t,r,n),yr.push(e);else{var i=Uf(e,t,r,n);if(i===null)o&&My(e,n);else{if(o){if(-1<ky.indexOf(e)){e=Ff(i,e,t,r,n),yr.push(e);return}if(BP(i,e,t,r,n))return;My(e,n)}Yy(e,t,n,null,r)}}}}function Uf(e,t,r,n){var o=Of(n);if(o=Rn(o),o!==null){var i=Nn(o);if(i===null)o=null;else{var u=i.tag;if(u===13){if(o=Sy(i),o!==null)return o;o=null}else if(u===3){if(i.stateNode.hydrate)return i.tag===3?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Yy(e,t,n,o,r),null}var nn=null,Bf=null,Mu=null;function Wy(){if(Mu)return Mu;var e,t=Bf,r=t.length,n,o="value"in nn?nn.value:nn.textContent,i=o.length;for(e=0;e<r&&t[e]===o[e];e++);var u=r-e;for(n=1;n<=u&&t[r-n]===o[i-n];n++);return Mu=o.slice(e,1<n?1-n:void 0)}function Nu(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Ru(){return!0}function Hy(){return!1}function Ht(e){function t(r,n,o,i,u){this._reactName=r,this._targetInst=o,this.type=n,this.nativeEvent=i,this.target=u,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(r=e[s],this[s]=r?r(i):i[s]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Ru:Hy,this.isPropagationStopped=Hy,this}return We(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var r=this.nativeEvent;r&&(r.preventDefault?r.preventDefault():typeof r.returnValue!="unknown"&&(r.returnValue=!1),this.isDefaultPrevented=Ru)},stopPropagation:function(){var r=this.nativeEvent;r&&(r.stopPropagation?r.stopPropagation():typeof r.cancelBubble!="unknown"&&(r.cancelBubble=!0),this.isPropagationStopped=Ru)},persist:function(){},isPersistent:Ru}),t}var xo={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Vf=Ht(xo),Ii=We({},xo,{view:0,detail:0}),iT=Ht(Ii),$f,zf,Li,qu=We({},Ii,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Kf,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Li&&(Li&&e.type==="mousemove"?($f=e.screenX-Li.screenX,zf=e.screenY-Li.screenY):zf=$f=0,Li=e),$f)},movementY:function(e){return"movementY"in e?e.movementY:zf}}),Qy=Ht(qu),aT=We({},qu,{dataTransfer:0}),uT=Ht(aT),sT=We({},Ii,{relatedTarget:0}),Gf=Ht(sT),lT=We({},xo,{animationName:0,elapsedTime:0,pseudoElement:0}),cT=Ht(lT),dT=We({},xo,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fT=Ht(dT),pT=We({},xo,{data:0}),By=Ht(pT),hT={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mT={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vT={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function yT(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=vT[e])?!!t[e]:!1}function Kf(){return yT}var gT=We({},Ii,{key:function(e){if(e.key){var t=hT[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Nu(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?mT[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Kf,charCode:function(e){return e.type==="keypress"?Nu(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Nu(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),wT=Ht(gT),_T=We({},qu,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Vy=Ht(_T),xT=We({},Ii,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Kf}),ET=Ht(xT),ST=We({},xo,{propertyName:0,elapsedTime:0,pseudoElement:0}),CT=Ht(ST),DT=We({},qu,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),PT=Ht(DT),TT=[9,13,27,32],Xf=Rr&&"CompositionEvent"in window,Ai=null;Rr&&"documentMode"in document&&(Ai=document.documentMode);var OT=Rr&&"TextEvent"in window&&!Ai,$y=Rr&&(!Xf||Ai&&8<Ai&&11>=Ai),zy=String.fromCharCode(32),Ky=!1;function Gy(e,t){switch(e){case"keyup":return TT.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Xy(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Eo=!1;function bT(e,t){switch(e){case"compositionend":return Xy(t);case"keypress":return t.which!==32?null:(Ky=!0,zy);case"textInput":return e=t.data,e===zy&&Ky?null:e;default:return null}}function kT(e,t){if(Eo)return e==="compositionend"||!Xf&&Gy(e,t)?(e=Wy(),Mu=Bf=nn=null,Eo=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return $y&&t.locale!=="ko"?null:t.data;default:return null}}var MT={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Jy(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!MT[e.type]:t==="textarea"}function Zy(e,t,r,n){wy(n),t=Iu(t,"onChange"),0<t.length&&(r=new Vf("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Fi=null,Ui=null;function NT(e){eg(e,0)}function Lu(e){var t=So(e);if(uy(t))return e}function RT(e,t){if(e==="change")return t}var tg=!1;Rr&&(Rr?(Fu="oninput"in document,Fu||(Jf=document.createElement("div"),Jf.setAttribute("oninput","return;"),Fu=typeof Jf.oninput=="function"),Au=Fu):Au=!1,tg=Au&&(!document.documentMode||9<document.documentMode));var Au,Fu,Jf;function ng(){Fi&&(Fi.detachEvent("onpropertychange",rg),Ui=Fi=null)}function rg(e){if(e.propertyName==="value"&&Lu(Ui)){var t=[];if(Zy(t,Ui,e,Of(e)),e=NT,Mn)e(t);else{Mn=!0;try{kf(e,t)}finally{Mn=!1,Rf()}}}}function qT(e,t,r){e==="focusin"?(ng(),Fi=t,Ui=r,Fi.attachEvent("onpropertychange",rg)):e==="focusout"&&ng()}function IT(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Lu(Ui)}function LT(e,t){if(e==="click")return Lu(t)}function AT(e,t){if(e==="input"||e==="change")return Lu(t)}function FT(e,t){return e===t&&(e!==0||1/e==1/t)||e!==e&&t!==t}var tr=typeof Object.is=="function"?Object.is:FT,UT=Object.prototype.hasOwnProperty;function ji(e,t){if(tr(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!UT.call(t,r[n])||!tr(e[r[n]],t[r[n]]))return!1;return!0}function og(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ig(e,t){var r=og(e);e=0;for(var n;r;){if(r.nodeType===3){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=og(r)}}function ag(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?ag(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function ug(){for(var e=window,t=_u();t instanceof e.HTMLIFrameElement;){try{var r=typeof t.contentWindow.location.href=="string"}catch(n){r=!1}if(r)e=t.contentWindow;else break;t=_u(e.document)}return t}function Zf(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}var jT=Rr&&"documentMode"in document&&11>=document.documentMode,Co=null,ep=null,Yi=null,tp=!1;function sg(e,t,r){var n=r.window===r?r.document:r.nodeType===9?r:r.ownerDocument;tp||Co==null||Co!==_u(n)||(n=Co,"selectionStart"in n&&Zf(n)?n={start:n.selectionStart,end:n.selectionEnd}:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}),Yi&&ji(Yi,n)||(Yi=n,n=Iu(ep,"onSelect"),0<n.length&&(t=new Vf("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=Co)))}Wf("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);Wf("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Wf(zP,2);for(var lg="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),rp=0;rp<lg.length;rp++)Yf.set(lg[rp],0);fo("onMouseEnter",["mouseout","mouseover"]);fo("onMouseLeave",["mouseout","mouseover"]);fo("onPointerEnter",["pointerout","pointerover"]);fo("onPointerLeave",["pointerout","pointerover"]);On("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));On("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));On("onBeforeInput",["compositionend","keypress","textInput","paste"]);On("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));On("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));On("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Wi="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cg=new Set("cancel close invalid load scroll toggle".split(" ").concat(Wi));function dg(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,HP(n,t,void 0,e),e.currentTarget=null}function eg(e,t){t=(t&4)!=0;for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var i=void 0;if(t)for(var u=n.length-1;0<=u;u--){var s=n[u],c=s.instance,d=s.currentTarget;if(s=s.listener,c!==i&&o.isPropagationStopped())break e;dg(o,s,d),i=c}else for(u=0;u<n.length;u++){if(s=n[u],c=s.instance,d=s.currentTarget,s=s.listener,c!==i&&o.isPropagationStopped())break e;dg(o,s,d),i=c}}}if(Cu)throw e=If,Cu=!1,If=null,e}function Ue(e,t){var r=pg(t),n=e+"__bubble";r.has(n)||(fg(t,e,2,!1),r.add(n))}var hg="_reactListening"+Math.random().toString(36).slice(2);function vg(e){e[hg]||(e[hg]=!0,ey.forEach(function(t){cg.has(t)||mg(t,!1,e,null),mg(t,!0,e,null)}))}function mg(e,t,r,n){var o=4<arguments.length&&arguments[4]!==void 0?arguments[4]:0,i=r;if(e==="selectionchange"&&r.nodeType!==9&&(i=r.ownerDocument),n!==null&&!t&&cg.has(e)){if(e!=="scroll")return;o|=2,i=n}var u=pg(i),s=e+"__"+(t?"capture":"bubble");u.has(s)||(t&&(o|=4),fg(i,e,o,t),u.add(s))}function fg(e,t,r,n){var o=Yf.get(t);switch(o===void 0?2:o){case 0:o=nT;break;case 1:o=oT;break;default:o=Qf}r=o.bind(null,t,r,e),o=void 0,!qf||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),n?o!==void 0?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):o!==void 0?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Yy(e,t,r,n,o){var i=n;if((t&1)==0&&(t&2)==0&&n!==null)e:for(;;){if(n===null)return;var u=n.tag;if(u===3||u===4){var s=n.stateNode.containerInfo;if(s===o||s.nodeType===8&&s.parentNode===o)break;if(u===4)for(u=n.return;u!==null;){var c=u.tag;if((c===3||c===4)&&(c=u.stateNode.containerInfo,c===o||c.nodeType===8&&c.parentNode===o))return;u=u.return}for(;s!==null;){if(u=Rn(s),u===null)return;if(c=u.tag,c===5||c===6){n=i=u;continue e}s=s.parentNode}}n=n.return}UP(function(){var d=i,p=Of(r),_=[];e:{var g=Uy.get(e);if(g!==void 0){var T=Vf,R=e;switch(e){case"keypress":if(Nu(r)===0)break e;case"keydown":case"keyup":T=wT;break;case"focusin":R="focus",T=Gf;break;case"focusout":R="blur",T=Gf;break;case"beforeblur":case"afterblur":T=Gf;break;case"click":if(r.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":T=Qy;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":T=uT;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":T=ET;break;case Iy:case Ly:case Ay:T=cT;break;case Fy:T=CT;break;case"scroll":T=iT;break;case"wheel":T=PT;break;case"copy":case"cut":case"paste":T=fT;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":T=Vy}var U=(t&4)!=0,S=!U&&e==="scroll",y=U?g!==null?g+"Capture":null:g;U=[];for(var P=d,M;P!==null;){M=P;var I=M.stateNode;if(M.tag===5&&I!==null&&(M=I,y!==null&&(I=Ti(P,y),I!=null&&U.push(Hi(P,I,M)))),S)break;P=P.return}0<U.length&&(g=new T(g,R,null,r,p),_.push({event:g,listeners:U}))}}if((t&7)==0){e:{if(g=e==="mouseover"||e==="pointerover",T=e==="mouseout"||e==="pointerout",g&&(t&16)==0&&(R=r.relatedTarget||r.fromElement)&&(Rn(R)||R[Po]))break e;if((T||g)&&(g=p.window===p?p:(g=p.ownerDocument)?g.defaultView||g.parentWindow:window,T?(R=r.relatedTarget||r.toElement,T=d,R=R?Rn(R):null,R!==null&&(S=Nn(R),R!==S||R.tag!==5&&R.tag!==6)&&(R=null)):(T=null,R=d),T!==R)){if(U=Qy,I="onMouseLeave",y="onMouseEnter",P="mouse",(e==="pointerout"||e==="pointerover")&&(U=Vy,I="onPointerLeave",y="onPointerEnter",P="pointer"),S=T==null?g:So(T),M=R==null?g:So(R),g=new U(I,P+"leave",T,r,p),g.target=S,g.relatedTarget=M,I=null,Rn(p)===d&&(U=new U(y,P+"enter",R,r,p),U.target=M,U.relatedTarget=S,I=U),S=I,T&&R)t:{for(U=T,y=R,P=0,M=U;M;M=Do(M))P++;for(M=0,I=y;I;I=Do(I))M++;for(;0<P-M;)U=Do(U),P--;for(;0<M-P;)y=Do(y),M--;for(;P--;){if(U===y||y!==null&&U===y.alternate)break t;U=Do(U),y=Do(y)}U=null}else U=null;T!==null&&yg(_,g,T,U,!1),R!==null&&S!==null&&yg(_,S,R,U,!0)}}e:{if(g=d?So(d):window,T=g.nodeName&&g.nodeName.toLowerCase(),T==="select"||T==="input"&&g.type==="file")var z=RT;else if(Jy(g))if(tg)z=AT;else{z=IT;var H=qT}else(T=g.nodeName)&&T.toLowerCase()==="input"&&(g.type==="checkbox"||g.type==="radio")&&(z=LT);if(z&&(z=z(e,d))){Zy(_,z,r,p);break e}H&&H(e,g,d),e==="focusout"&&(H=g._wrapperState)&&H.controlled&&g.type==="number"&&_f(g,"number",g.value)}switch(H=d?So(d):window,e){case"focusin":(Jy(H)||H.contentEditable==="true")&&(Co=H,ep=d,Yi=null);break;case"focusout":Yi=ep=Co=null;break;case"mousedown":tp=!0;break;case"contextmenu":case"mouseup":case"dragend":tp=!1,sg(_,r,p);break;case"selectionchange":if(jT)break;case"keydown":case"keyup":sg(_,r,p)}var B;if(Xf)e:{switch(e){case"compositionstart":var V="onCompositionStart";break e;case"compositionend":V="onCompositionEnd";break e;case"compositionupdate":V="onCompositionUpdate";break e}V=void 0}else Eo?Gy(e,r)&&(V="onCompositionEnd"):e==="keydown"&&r.keyCode===229&&(V="onCompositionStart");V&&($y&&r.locale!=="ko"&&(Eo||V!=="onCompositionStart"?V==="onCompositionEnd"&&Eo&&(B=Wy()):(nn=p,Bf="value"in nn?nn.value:nn.textContent,Eo=!0)),H=Iu(d,V),0<H.length&&(V=new By(V,e,null,r,p),_.push({event:V,listeners:H}),B?V.data=B:(B=Xy(r),B!==null&&(V.data=B)))),(B=OT?bT(e,r):kT(e,r))&&(d=Iu(d,"onBeforeInput"),0<d.length&&(p=new By("onBeforeInput","beforeinput",null,r,p),_.push({event:p,listeners:d}),p.data=B))}eg(_,t)})}function Hi(e,t,r){return{instance:e,listener:t,currentTarget:r}}function Iu(e,t){for(var r=t+"Capture",n=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=Ti(e,r),i!=null&&n.unshift(Hi(e,i,o)),i=Ti(e,t),i!=null&&n.push(Hi(e,i,o))),e=e.return}return n}function Do(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function yg(e,t,r,n,o){for(var i=t._reactName,u=[];r!==null&&r!==n;){var s=r,c=s.alternate,d=s.stateNode;if(c!==null&&c===n)break;s.tag===5&&d!==null&&(s=d,o?(c=Ti(r,i),c!=null&&u.unshift(Hi(r,c,s))):o||(c=Ti(r,i),c!=null&&u.push(Hi(r,c,s)))),r=r.return}u.length!==0&&e.push({event:t,listeners:u})}function Uu(){}var np=null,op=null;function gg(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function ip(e,t){return e==="textarea"||e==="option"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var wg=typeof setTimeout=="function"?setTimeout:void 0,YT=typeof clearTimeout=="function"?clearTimeout:void 0;function ap(e){e.nodeType===1?e.textContent="":e.nodeType===9&&(e=e.body,e!=null&&(e.textContent=""))}function To(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break}return e}function _g(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="$"||r==="$!"||r==="$?"){if(t===0)return e;t--}else r==="/$"&&t++}e=e.previousSibling}return null}var up=0;function WT(e){return{$$typeof:hf,toString:e,valueOf:e}}var ju=Math.random().toString(36).slice(2),on="__reactFiber$"+ju,Yu="__reactProps$"+ju,Po="__reactContainer$"+ju,xg="__reactEvents$"+ju;function Rn(e){var t=e[on];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Po]||r[on]){if(r=t.alternate,t.child!==null||r!==null&&r.child!==null)for(e=_g(e);e!==null;){if(r=e[on])return r;e=_g(e)}return t}e=r,r=e.parentNode}return null}function Pi(e){return e=e[on]||e[Po],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function So(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error($(33))}function Eu(e){return e[Yu]||null}function pg(e){var t=e[xg];return t===void 0&&(t=e[xg]=new Set),t}var sp=[],Oo=-1;function an(e){return{current:e}}function je(e){0>Oo||(e.current=sp[Oo],sp[Oo]=null,Oo--)}function Be(e,t){Oo++,sp[Oo]=e.current,e.current=t}var un={},Ct=an(un),Lt=an(!1),qn=un;function bo(e,t){var r=e.type.contextTypes;if(!r)return un;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in r)o[i]=t[i];return n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function At(e){return e=e.childContextTypes,e!=null}function Wu(){je(Lt),je(Ct)}function Eg(e,t,r){if(Ct.current!==un)throw Error($(168));Be(Ct,t),Be(Lt,r)}function Sg(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,typeof n.getChildContext!="function")return r;n=n.getChildContext();for(var o in n)if(!(o in e))throw Error($(108,po(t)||"Unknown",o));return We({},r,n)}function Hu(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||un,qn=Ct.current,Be(Ct,e),Be(Lt,Lt.current),!0}function Cg(e,t,r){var n=e.stateNode;if(!n)throw Error($(169));r?(e=Sg(e,t,qn),n.__reactInternalMemoizedMergedChildContext=e,je(Lt),je(Ct),Be(Ct,e)):je(Lt),Be(Lt,r)}var lp=null,In=null,HT=mt.unstable_runWithPriority,cp=mt.unstable_scheduleCallback,dp=mt.unstable_cancelCallback,QT=mt.unstable_shouldYield,Dg=mt.unstable_requestPaint,fp=mt.unstable_now,BT=mt.unstable_getCurrentPriorityLevel,Qu=mt.unstable_ImmediatePriority,Pg=mt.unstable_UserBlockingPriority,Tg=mt.unstable_NormalPriority,Og=mt.unstable_LowPriority,bg=mt.unstable_IdlePriority,pp={},VT=Dg!==void 0?Dg:function(){},qr=null,Bu=null,hp=!1,kg=fp(),Dt=1e4>kg?fp:function(){return fp()-kg};function ko(){switch(BT()){case Qu:return 99;case Pg:return 98;case Tg:return 97;case Og:return 96;case bg:return 95;default:throw Error($(332))}}function Mg(e){switch(e){case 99:return Qu;case 98:return Pg;case 97:return Tg;case 96:return Og;case 95:return bg;default:throw Error($(332))}}function Ln(e,t){return e=Mg(e),HT(e,t)}function Qi(e,t,r){return e=Mg(e),cp(e,t,r)}function gr(){if(Bu!==null){var e=Bu;Bu=null,dp(e)}Ng()}function Ng(){if(!hp&&qr!==null){hp=!0;var e=0;try{var t=qr;Ln(99,function(){for(;e<t.length;e++){var r=t[e];do r=r(!0);while(r!==null)}}),qr=null}catch(r){throw qr!==null&&(qr=qr.slice(e+1)),cp(Qu,gr),r}finally{hp=!1}}}var $T=bn.ReactCurrentBatchConfig;function cr(e,t){if(e&&e.defaultProps){t=We({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}var Vu=an(null),$u=null,Mo=null,zu=null;function mp(){zu=Mo=$u=null}function vp(e){var t=Vu.current;je(Vu),e.type._context._currentValue=t}function Rg(e,t){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)===t){if(r===null||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,r!==null&&(r.childLanes|=t);e=e.return}}function No(e,t){$u=e,zu=Mo=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!=0&&(dr=!0),e.firstContext=null)}function rr(e,t){if(zu!==e&&t!==!1&&t!==0)if((typeof t!="number"||t===1073741823)&&(zu=e,t=1073741823),t={context:e,observedBits:t,next:null},Mo===null){if($u===null)throw Error($(308));Mo=t,$u.dependencies={lanes:0,firstContext:t,responders:null}}else Mo=Mo.next=t;return e._currentValue}var sn=!1;function yp(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function qg(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ln(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function cn(e,t){if(e=e.updateQueue,e!==null){e=e.shared;var r=e.pending;r===null?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function Ig(e,t){var r=e.updateQueue,n=e.alternate;if(n!==null&&(n=n.updateQueue,r===n)){var o=null,i=null;if(r=r.firstBaseUpdate,r!==null){do{var u={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};i===null?o=i=u:i=i.next=u,r=r.next}while(r!==null);i===null?o=i=t:i=i.next=t}else o=i=t;r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:n.shared,effects:n.effects},e.updateQueue=r;return}e=r.lastBaseUpdate,e===null?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function Vi(e,t,r,n){var o=e.updateQueue;sn=!1;var i=o.firstBaseUpdate,u=o.lastBaseUpdate,s=o.shared.pending;if(s!==null){o.shared.pending=null;var c=s,d=c.next;c.next=null,u===null?i=d:u.next=d,u=c;var p=e.alternate;if(p!==null){p=p.updateQueue;var _=p.lastBaseUpdate;_!==u&&(_===null?p.firstBaseUpdate=d:_.next=d,p.lastBaseUpdate=c)}}if(i!==null){_=o.baseState,u=0,p=d=c=null;do{s=i.lane;var g=i.eventTime;if((n&s)===s){p!==null&&(p=p.next={eventTime:g,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var T=e,R=i;switch(s=t,g=r,R.tag){case 1:if(T=R.payload,typeof T=="function"){_=T.call(g,_,s);break e}_=T;break e;case 3:T.flags=T.flags&-4097|64;case 0:if(T=R.payload,s=typeof T=="function"?T.call(g,_,s):T,s==null)break e;_=We({},_,s);break e;case 2:sn=!0}}i.callback!==null&&(e.flags|=32,s=o.effects,s===null?o.effects=[i]:s.push(i))}else g={eventTime:g,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},p===null?(d=p=g,c=_):p=p.next=g,u|=s;if(i=i.next,i===null){if(s=o.shared.pending,s===null)break;i=s.next,s.next=null,o.lastBaseUpdate=s,o.shared.pending=null}}while(1);p===null&&(c=_),o.baseState=c,o.firstBaseUpdate=d,o.lastBaseUpdate=p,Bi|=u,e.lanes=u,e.memoizedState=_}}function Lg(e,t,r){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(o!==null){if(n.callback=null,n=r,typeof o!="function")throw Error($(191,o));o.call(n)}}}var Ag=new hu.Component().refs;function Ku(e,t,r,n){t=e.memoizedState,r=r(n,t),r=r==null?t:We({},t,r),e.memoizedState=r,e.lanes===0&&(e.updateQueue.baseState=r)}var Gu={isMounted:function(e){return(e=e._reactInternals)?Nn(e)===e:!1},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=Qt(),o=dn(e),i=ln(n,o);i.payload=t,r!=null&&(i.callback=r),cn(e,i),fn(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=Qt(),o=dn(e),i=ln(n,o);i.tag=1,i.payload=t,r!=null&&(i.callback=r),cn(e,i),fn(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=Qt(),n=dn(e),o=ln(r,n);o.tag=2,t!=null&&(o.callback=t),cn(e,o),fn(e,n,r)}};function Fg(e,t,r,n,o,i,u){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(n,i,u):t.prototype&&t.prototype.isPureReactComponent?!ji(r,n)||!ji(o,i):!0}function Ug(e,t,r){var n=!1,o=un,i=t.contextType;return typeof i=="object"&&i!==null?i=rr(i):(o=At(t)?qn:Ct.current,n=t.contextTypes,i=(n=n!=null)?bo(e,o):un),t=new t(r,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Gu,e.stateNode=t,t._reactInternals=e,n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function jg(e,t,r,n){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(r,n),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&Gu.enqueueReplaceState(t,t.state,null)}function gp(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=Ag,yp(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=rr(i):(i=At(t)?qn:Ct.current,o.context=bo(e,i)),Vi(e,r,o,n),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(Ku(e,t,i,r),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&Gu.enqueueReplaceState(o,o.state,null),Vi(e,r,o,n),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4)}var Xu=Array.isArray;function $i(e,t,r){if(e=r.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(r._owner){if(r=r._owner,r){if(r.tag!==1)throw Error($(309));var n=r.stateNode}if(!n)throw Error($(147,e));var o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(i){var u=n.refs;u===Ag&&(u=n.refs={}),i===null?delete u[o]:u[o]=i},t._stringRef=o,t)}if(typeof e!="string")throw Error($(284));if(!r._owner)throw Error($(290,e))}return e}function Ju(e,t){if(e.type!=="textarea")throw Error($(31,Object.prototype.toString.call(t)==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Yg(e){function t(S,y){if(e){var P=S.lastEffect;P!==null?(P.nextEffect=y,S.lastEffect=y):S.firstEffect=S.lastEffect=y,y.nextEffect=null,y.flags=8}}function r(S,y){if(!e)return null;for(;y!==null;)t(S,y),y=y.sibling;return null}function n(S,y){for(S=new Map;y!==null;)y.key!==null?S.set(y.key,y):S.set(y.index,y),y=y.sibling;return S}function o(S,y){return S=pn(S,y),S.index=0,S.sibling=null,S}function i(S,y,P){return S.index=P,e?(P=S.alternate,P!==null?(P=P.index,P<y?(S.flags=2,y):P):(S.flags=2,y)):y}function u(S){return e&&S.alternate===null&&(S.flags=2),S}function s(S,y,P,M){return y===null||y.tag!==6?(y=wp(P,S.mode,M),y.return=S,y):(y=o(y,P),y.return=S,y)}function c(S,y,P,M){return y!==null&&y.elementType===P.type?(M=o(y,P.props),M.ref=$i(S,y,P),M.return=S,M):(M=Zu(P.type,P.key,P.props,null,S.mode,M),M.ref=$i(S,y,P),M.return=S,M)}function d(S,y,P,M){return y===null||y.tag!==4||y.stateNode.containerInfo!==P.containerInfo||y.stateNode.implementation!==P.implementation?(y=_p(P,S.mode,M),y.return=S,y):(y=o(y,P.children||[]),y.return=S,y)}function p(S,y,P,M,I){return y===null||y.tag!==7?(y=Ro(P,S.mode,M,I),y.return=S,y):(y=o(y,P),y.return=S,y)}function _(S,y,P){if(typeof y=="string"||typeof y=="number")return y=wp(""+y,S.mode,P),y.return=S,y;if(typeof y=="object"&&y!==null){switch(y.$$typeof){case wi:return P=Zu(y.type,y.key,y.props,null,S.mode,P),P.ref=$i(S,null,y),P.return=S,P;case kn:return y=_p(y,S.mode,P),y.return=S,y}if(Xu(y)||Ei(y))return y=Ro(y,S.mode,P,null),y.return=S,y;Ju(S,y)}return null}function g(S,y,P,M){var I=y!==null?y.key:null;if(typeof P=="string"||typeof P=="number")return I!==null?null:s(S,y,""+P,M);if(typeof P=="object"&&P!==null){switch(P.$$typeof){case wi:return P.key===I?P.type===Xr?p(S,y,P.props.children,M,I):c(S,y,P,M):null;case kn:return P.key===I?d(S,y,P,M):null}if(Xu(P)||Ei(P))return I!==null?null:p(S,y,P,M,null);Ju(S,P)}return null}function T(S,y,P,M,I){if(typeof M=="string"||typeof M=="number")return S=S.get(P)||null,s(y,S,""+M,I);if(typeof M=="object"&&M!==null){switch(M.$$typeof){case wi:return S=S.get(M.key===null?P:M.key)||null,M.type===Xr?p(y,S,M.props.children,I,M.key):c(y,S,M,I);case kn:return S=S.get(M.key===null?P:M.key)||null,d(y,S,M,I)}if(Xu(M)||Ei(M))return S=S.get(P)||null,p(y,S,M,I,null);Ju(y,M)}return null}function R(S,y,P,M){for(var I=null,z=null,H=y,B=y=0,V=null;H!==null&&B<P.length;B++){H.index>B?(V=H,H=null):V=H.sibling;var K=g(S,H,P[B],M);if(K===null){H===null&&(H=V);break}e&&H&&K.alternate===null&&t(S,H),y=i(K,y,B),z===null?I=K:z.sibling=K,z=K,H=V}if(B===P.length)return r(S,H),I;if(H===null){for(;B<P.length;B++)H=_(S,P[B],M),H!==null&&(y=i(H,y,B),z===null?I=H:z.sibling=H,z=H);return I}for(H=n(S,H);B<P.length;B++)V=T(H,S,B,P[B],M),V!==null&&(e&&V.alternate!==null&&H.delete(V.key===null?B:V.key),y=i(V,y,B),z===null?I=V:z.sibling=V,z=V);return e&&H.forEach(function(ne){return t(S,ne)}),I}function U(S,y,P,M){var I=Ei(P);if(typeof I!="function")throw Error($(150));if(P=I.call(P),P==null)throw Error($(151));for(var z=I=null,H=y,B=y=0,V=null,K=P.next();H!==null&&!K.done;B++,K=P.next()){H.index>B?(V=H,H=null):V=H.sibling;var ne=g(S,H,K.value,M);if(ne===null){H===null&&(H=V);break}e&&H&&ne.alternate===null&&t(S,H),y=i(ne,y,B),z===null?I=ne:z.sibling=ne,z=ne,H=V}if(K.done)return r(S,H),I;if(H===null){for(;!K.done;B++,K=P.next())K=_(S,K.value,M),K!==null&&(y=i(K,y,B),z===null?I=K:z.sibling=K,z=K);return I}for(H=n(S,H);!K.done;B++,K=P.next())K=T(H,S,B,K.value,M),K!==null&&(e&&K.alternate!==null&&H.delete(K.key===null?B:K.key),y=i(K,y,B),z===null?I=K:z.sibling=K,z=K);return e&&H.forEach(function(we){return t(S,we)}),I}return function(S,y,P,M){var I=typeof P=="object"&&P!==null&&P.type===Xr&&P.key===null;I&&(P=P.props.children);var z=typeof P=="object"&&P!==null;if(z)switch(P.$$typeof){case wi:e:{for(z=P.key,I=y;I!==null;){if(I.key===z){switch(I.tag){case 7:if(P.type===Xr){r(S,I.sibling),y=o(I,P.props.children),y.return=S,S=y;break e}break;default:if(I.elementType===P.type){r(S,I.sibling),y=o(I,P.props),y.ref=$i(S,I,P),y.return=S,S=y;break e}}r(S,I);break}else t(S,I);I=I.sibling}P.type===Xr?(y=Ro(P.props.children,S.mode,M,P.key),y.return=S,S=y):(M=Zu(P.type,P.key,P.props,null,S.mode,M),M.ref=$i(S,y,P),M.return=S,S=M)}return u(S);case kn:e:{for(I=P.key;y!==null;){if(y.key===I)if(y.tag===4&&y.stateNode.containerInfo===P.containerInfo&&y.stateNode.implementation===P.implementation){r(S,y.sibling),y=o(y,P.children||[]),y.return=S,S=y;break e}else{r(S,y);break}else t(S,y);y=y.sibling}y=_p(P,S.mode,M),y.return=S,S=y}return u(S)}if(typeof P=="string"||typeof P=="number")return P=""+P,y!==null&&y.tag===6?(r(S,y.sibling),y=o(y,P),y.return=S,S=y):(r(S,y),y=wp(P,S.mode,M),y.return=S,S=y),u(S);if(Xu(P))return R(S,y,P,M);if(Ei(P))return U(S,y,P,M);if(z&&Ju(S,P),typeof P=="undefined"&&!I)switch(S.tag){case 1:case 22:case 0:case 11:case 15:throw Error($(152,po(S.type)||"Component"))}return r(S,y)}}var es=Yg(!0),Wg=Yg(!1),zi={},wr=an(zi),Ki=an(zi),Gi=an(zi);function An(e){if(e===zi)throw Error($(174));return e}function xp(e,t){switch(Be(Gi,t),Be(Ki,e),Be(wr,zi),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Df(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Df(t,e)}je(wr),Be(wr,t)}function qo(){je(wr),je(Ki),je(Gi)}function Hg(e){An(Gi.current);var t=An(wr.current),r=Df(t,e.type);t!==r&&(Be(Ki,e),Be(wr,r))}function Ep(e){Ki.current===e&&(je(wr),je(Ki))}var Ve=an(0);function ts(e){for(var t=e;t!==null;){if(t.tag===13){var r=t.memoizedState;if(r!==null&&(r=r.dehydrated,r===null||r.data==="$?"||r.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&64)!=0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ir=null,hn=null,_r=!1;function Qg(e,t){var r=nr(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,e.lastEffect!==null?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Bg(e,t){switch(e.tag){case 5:var r=e.type;return t=t.nodeType!==1||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,!0):!1;case 13:return!1;default:return!1}}function Sp(e){if(_r){var t=hn;if(t){var r=t;if(!Bg(e,t)){if(t=To(r.nextSibling),!t||!Bg(e,t)){e.flags=e.flags&-1025|2,_r=!1,Ir=e;return}Qg(Ir,r)}Ir=e,hn=To(t.firstChild)}else e.flags=e.flags&-1025|2,_r=!1,Ir=e}}function Vg(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Ir=e}function rs(e){if(e!==Ir)return!1;if(!_r)return Vg(e),_r=!0,!1;var t=e.type;if(e.tag!==5||t!=="head"&&t!=="body"&&!ip(t,e.memoizedProps))for(t=hn;t;)Qg(e,t),t=To(t.nextSibling);if(Vg(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error($(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="/$"){if(t===0){hn=To(e.nextSibling);break e}t--}else r!=="$"&&r!=="$!"&&r!=="$?"||t++}e=e.nextSibling}hn=null}}else hn=Ir?To(e.stateNode.nextSibling):null;return!0}function Cp(){hn=Ir=null,_r=!1}var Io=[];function Dp(){for(var e=0;e<Io.length;e++)Io[e]._workInProgressVersionPrimary=null;Io.length=0}var Xi=bn.ReactCurrentDispatcher,or=bn.ReactCurrentBatchConfig,Ji=0,Ke=null,Pt=null,wt=null,ns=!1,Zi=!1;function Ft(){throw Error($(321))}function Pp(e,t){if(t===null)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!tr(e[r],t[r]))return!1;return!0}function Tp(e,t,r,n,o,i){if(Ji=i,Ke=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xi.current=e===null||e.memoizedState===null?zT:KT,e=r(n,o),Zi){i=0;do{if(Zi=!1,!(25>i))throw Error($(301));i+=1,wt=Pt=null,t.updateQueue=null,Xi.current=GT,e=r(n,o)}while(Zi)}if(Xi.current=os,t=Pt!==null&&Pt.next!==null,Ji=0,wt=Pt=Ke=null,ns=!1,t)throw Error($(300));return e}function Fn(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return wt===null?Ke.memoizedState=wt=e:wt=wt.next=e,wt}function Un(){if(Pt===null){var e=Ke.alternate;e=e!==null?e.memoizedState:null}else e=Pt.next;var t=wt===null?Ke.memoizedState:wt.next;if(t!==null)wt=t,Pt=e;else{if(e===null)throw Error($(310));Pt=e,e={memoizedState:Pt.memoizedState,baseState:Pt.baseState,baseQueue:Pt.baseQueue,queue:Pt.queue,next:null},wt===null?Ke.memoizedState=wt=e:wt=wt.next=e}return wt}function xr(e,t){return typeof t=="function"?t(e):t}function ea(e){var t=Un(),r=t.queue;if(r===null)throw Error($(311));r.lastRenderedReducer=e;var n=Pt,o=n.baseQueue,i=r.pending;if(i!==null){if(o!==null){var u=o.next;o.next=i.next,i.next=u}n.baseQueue=o=i,r.pending=null}if(o!==null){o=o.next,n=n.baseState;var s=u=i=null,c=o;do{var d=c.lane;if((Ji&d)===d)s!==null&&(s=s.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var p={lane:d,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};s===null?(u=s=p,i=n):s=s.next=p,Ke.lanes|=d,Bi|=d}c=c.next}while(c!==null&&c!==o);s===null?i=n:s.next=u,tr(n,t.memoizedState)||(dr=!0),t.memoizedState=n,t.baseState=i,t.baseQueue=s,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ta(e){var t=Un(),r=t.queue;if(r===null)throw Error($(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,i=t.memoizedState;if(o!==null){r.pending=null;var u=o=o.next;do i=e(i,u.action),u=u.next;while(u!==o);tr(i,t.memoizedState)||(dr=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),r.lastRenderedState=i}return[i,n]}function $g(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(o!==null?e=o===n:(e=e.mutableReadLanes,(e=(Ji&e)===e)&&(t._workInProgressVersionPrimary=n,Io.push(t))),e)return r(t._source);throw Io.push(t),Error($(350))}function zg(e,t,r,n){var o=Rt;if(o===null)throw Error($(349));var i=t._getVersion,u=i(t._source),s=Xi.current,c=s.useState(function(){return $g(o,t,r)}),d=c[1],p=c[0];c=wt;var _=e.memoizedState,g=_.refs,T=g.getSnapshot,R=_.source;_=_.subscribe;var U=Ke;return e.memoizedState={refs:g,source:t,subscribe:n},s.useEffect(function(){g.getSnapshot=r,g.setSnapshot=d;var S=i(t._source);if(!tr(u,S)){S=r(t._source),tr(p,S)||(d(S),S=dn(U),o.mutableReadLanes|=S&o.pendingLanes),S=o.mutableReadLanes,o.entangledLanes|=S;for(var y=o.entanglements,P=S;0<P;){var M=31-rn(P),I=1<<M;y[M]|=S,P&=~I}}},[r,t,n]),s.useEffect(function(){return n(t._source,function(){var S=g.getSnapshot,y=g.setSnapshot;try{y(S(t._source));var P=dn(U);o.mutableReadLanes|=P&o.pendingLanes}catch(M){y(function(){throw M})}})},[t,n]),tr(T,r)&&tr(R,t)&&tr(_,n)||(e={pending:null,dispatch:null,lastRenderedReducer:xr,lastRenderedState:p},e.dispatch=d=Op.bind(null,Ke,e),c.queue=e,c.baseQueue=null,p=$g(o,t,r),c.memoizedState=c.baseState=p),p}function Kg(e,t,r){var n=Un();return zg(n,e,t,r)}function ra(e){var t=Fn();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e=t.queue={pending:null,dispatch:null,lastRenderedReducer:xr,lastRenderedState:e},e=e.dispatch=Op.bind(null,Ke,e),[t.memoizedState,e]}function is(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},t=Ke.updateQueue,t===null?(t={lastEffect:null},Ke.updateQueue=t,t.lastEffect=e.next=e):(r=t.lastEffect,r===null?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e)),e}function Gg(e){var t=Fn();return e={current:e},t.memoizedState=e}function as(){return Un().memoizedState}function bp(e,t,r,n){var o=Fn();Ke.flags|=e,o.memoizedState=is(1|t,r,void 0,n===void 0?null:n)}function kp(e,t,r,n){var o=Un();n=n===void 0?null:n;var i=void 0;if(Pt!==null){var u=Pt.memoizedState;if(i=u.destroy,n!==null&&Pp(n,u.deps)){is(t,r,i,n);return}}Ke.flags|=e,o.memoizedState=is(1|t,r,i,n)}function Xg(e,t){return bp(516,4,e,t)}function us(e,t){return kp(516,4,e,t)}function Jg(e,t){return kp(4,2,e,t)}function Zg(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function e0(e,t,r){return r=r!=null?r.concat([e]):null,kp(4,2,Zg.bind(null,t,e),r)}function Mp(){}function t0(e,t){var r=Un();t=t===void 0?null:t;var n=r.memoizedState;return n!==null&&t!==null&&Pp(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function r0(e,t){var r=Un();t=t===void 0?null:t;var n=r.memoizedState;return n!==null&&t!==null&&Pp(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function XT(e,t){var r=ko();Ln(98>r?98:r,function(){e(!0)}),Ln(97<r?97:r,function(){var n=or.transition;or.transition=1;try{e(!1),t()}finally{or.transition=n}})}function Op(e,t,r){var n=Qt(),o=dn(e),i={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},u=t.pending;if(u===null?i.next=i:(i.next=u.next,u.next=i),t.pending=i,u=e.alternate,e===Ke||u!==null&&u===Ke)Zi=ns=!0;else{if(e.lanes===0&&(u===null||u.lanes===0)&&(u=t.lastRenderedReducer,u!==null))try{var s=t.lastRenderedState,c=u(s,r);if(i.eagerReducer=u,i.eagerState=c,tr(c,s))return}catch(d){}finally{}fn(e,o,n)}}var os={readContext:rr,useCallback:Ft,useContext:Ft,useEffect:Ft,useImperativeHandle:Ft,useLayoutEffect:Ft,useMemo:Ft,useReducer:Ft,useRef:Ft,useState:Ft,useDebugValue:Ft,useDeferredValue:Ft,useTransition:Ft,useMutableSource:Ft,useOpaqueIdentifier:Ft,unstable_isNewReconciler:!1},zT={readContext:rr,useCallback:function(e,t){return Fn().memoizedState=[e,t===void 0?null:t],e},useContext:rr,useEffect:Xg,useImperativeHandle:function(e,t,r){return r=r!=null?r.concat([e]):null,bp(4,2,Zg.bind(null,t,e),r)},useLayoutEffect:function(e,t){return bp(4,2,e,t)},useMemo:function(e,t){var r=Fn();return t=t===void 0?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Fn();return t=r!==void 0?r(t):t,n.memoizedState=n.baseState=t,e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},e=e.dispatch=Op.bind(null,Ke,e),[n.memoizedState,e]},useRef:Gg,useState:ra,useDebugValue:Mp,useDeferredValue:function(e){var t=ra(e),r=t[0],n=t[1];return Xg(function(){var o=or.transition;or.transition=1;try{n(e)}finally{or.transition=o}},[e]),r},useTransition:function(){var e=ra(!1),t=e[0];return e=XT.bind(null,e[1]),Gg(e),[e,t]},useMutableSource:function(e,t,r){var n=Fn();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},zg(n,e,t,r)},useOpaqueIdentifier:function(){if(_r){var e=!1,t=WT(function(){throw e||(e=!0,r("r:"+(up++).toString(36))),Error($(355))}),r=ra(t)[1];return(Ke.mode&2)==0&&(Ke.flags|=516,is(5,function(){r("r:"+(up++).toString(36))},void 0,null)),t}return t="r:"+(up++).toString(36),ra(t),t},unstable_isNewReconciler:!1},KT={readContext:rr,useCallback:t0,useContext:rr,useEffect:us,useImperativeHandle:e0,useLayoutEffect:Jg,useMemo:r0,useReducer:ea,useRef:as,useState:function(){return ea(xr)},useDebugValue:Mp,useDeferredValue:function(e){var t=ea(xr),r=t[0],n=t[1];return us(function(){var o=or.transition;or.transition=1;try{n(e)}finally{or.transition=o}},[e]),r},useTransition:function(){var e=ea(xr)[0];return[as().current,e]},useMutableSource:Kg,useOpaqueIdentifier:function(){return ea(xr)[0]},unstable_isNewReconciler:!1},GT={readContext:rr,useCallback:t0,useContext:rr,useEffect:us,useImperativeHandle:e0,useLayoutEffect:Jg,useMemo:r0,useReducer:ta,useRef:as,useState:function(){return ta(xr)},useDebugValue:Mp,useDeferredValue:function(e){var t=ta(xr),r=t[0],n=t[1];return us(function(){var o=or.transition;or.transition=1;try{n(e)}finally{or.transition=o}},[e]),r},useTransition:function(){var e=ta(xr)[0];return[as().current,e]},useMutableSource:Kg,useOpaqueIdentifier:function(){return ta(xr)[0]},unstable_isNewReconciler:!1},JT=bn.ReactCurrentOwner,dr=!1;function Ut(e,t,r,n){t.child=e===null?Wg(t,null,r,n):es(t,e.child,r,n)}function n0(e,t,r,n,o){r=r.render;var i=t.ref;return No(t,o),n=Tp(e,t,r,n,i,o),e!==null&&!dr?(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Lr(e,t,o)):(t.flags|=1,Ut(e,t,n,o),t.child)}function i0(e,t,r,n,o,i){if(e===null){var u=r.type;return typeof u=="function"&&!Np(u)&&u.defaultProps===void 0&&r.compare===null&&r.defaultProps===void 0?(t.tag=15,t.type=u,o0(e,t,u,n,o,i)):(e=Zu(r.type,null,n,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}return u=e.child,(o&i)==0&&(o=u.memoizedProps,r=r.compare,r=r!==null?r:ji,r(o,n)&&e.ref===t.ref)?Lr(e,t,i):(t.flags|=1,e=pn(u,n),e.ref=t.ref,e.return=t,t.child=e)}function o0(e,t,r,n,o,i){if(e!==null&&ji(e.memoizedProps,n)&&e.ref===t.ref)if(dr=!1,(i&o)!=0)(e.flags&16384)!=0&&(dr=!0);else return t.lanes=e.lanes,Lr(e,t,i);return Rp(e,t,r,n,i)}function qp(e,t,r){var n=t.pendingProps,o=n.children,i=e!==null?e.memoizedState:null;if(n.mode==="hidden"||n.mode==="unstable-defer-without-hiding")if((t.mode&4)==0)t.memoizedState={baseLanes:0},ss(t,r);else if((r&1073741824)!=0)t.memoizedState={baseLanes:0},ss(t,i!==null?i.baseLanes:r);else return e=i!==null?i.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ss(t,e),null;else i!==null?(n=i.baseLanes|r,t.memoizedState=null):n=r,ss(t,n);return Ut(e,t,o,r),t.child}function a0(e,t){var r=t.ref;(e===null&&r!==null||e!==null&&e.ref!==r)&&(t.flags|=128)}function Rp(e,t,r,n,o){var i=At(r)?qn:Ct.current;return i=bo(t,i),No(t,o),r=Tp(e,t,r,n,i,o),e!==null&&!dr?(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Lr(e,t,o)):(t.flags|=1,Ut(e,t,r,o),t.child)}function u0(e,t,r,n,o){if(At(r)){var i=!0;Hu(t)}else i=!1;if(No(t,o),t.stateNode===null)e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2),Ug(t,r,n),gp(t,r,n,o),n=!0;else if(e===null){var u=t.stateNode,s=t.memoizedProps;u.props=s;var c=u.context,d=r.contextType;typeof d=="object"&&d!==null?d=rr(d):(d=At(r)?qn:Ct.current,d=bo(t,d));var p=r.getDerivedStateFromProps,_=typeof p=="function"||typeof u.getSnapshotBeforeUpdate=="function";_||typeof u.UNSAFE_componentWillReceiveProps!="function"&&typeof u.componentWillReceiveProps!="function"||(s!==n||c!==d)&&jg(t,u,n,d),sn=!1;var g=t.memoizedState;u.state=g,Vi(t,n,u,o),c=t.memoizedState,s!==n||g!==c||Lt.current||sn?(typeof p=="function"&&(Ku(t,r,p,n),c=t.memoizedState),(s=sn||Fg(t,r,s,n,g,c,d))?(_||typeof u.UNSAFE_componentWillMount!="function"&&typeof u.componentWillMount!="function"||(typeof u.componentWillMount=="function"&&u.componentWillMount(),typeof u.UNSAFE_componentWillMount=="function"&&u.UNSAFE_componentWillMount()),typeof u.componentDidMount=="function"&&(t.flags|=4)):(typeof u.componentDidMount=="function"&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=c),u.props=n,u.state=c,u.context=d,n=s):(typeof u.componentDidMount=="function"&&(t.flags|=4),n=!1)}else{u=t.stateNode,qg(e,t),s=t.memoizedProps,d=t.type===t.elementType?s:cr(t.type,s),u.props=d,_=t.pendingProps,g=u.context,c=r.contextType,typeof c=="object"&&c!==null?c=rr(c):(c=At(r)?qn:Ct.current,c=bo(t,c));var T=r.getDerivedStateFromProps;(p=typeof T=="function"||typeof u.getSnapshotBeforeUpdate=="function")||typeof u.UNSAFE_componentWillReceiveProps!="function"&&typeof u.componentWillReceiveProps!="function"||(s!==_||g!==c)&&jg(t,u,n,c),sn=!1,g=t.memoizedState,u.state=g,Vi(t,n,u,o);var R=t.memoizedState;s!==_||g!==R||Lt.current||sn?(typeof T=="function"&&(Ku(t,r,T,n),R=t.memoizedState),(d=sn||Fg(t,r,d,n,g,R,c))?(p||typeof u.UNSAFE_componentWillUpdate!="function"&&typeof u.componentWillUpdate!="function"||(typeof u.componentWillUpdate=="function"&&u.componentWillUpdate(n,R,c),typeof u.UNSAFE_componentWillUpdate=="function"&&u.UNSAFE_componentWillUpdate(n,R,c)),typeof u.componentDidUpdate=="function"&&(t.flags|=4),typeof u.getSnapshotBeforeUpdate=="function"&&(t.flags|=256)):(typeof u.componentDidUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof u.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=R),u.props=n,u.state=R,u.context=c,n=d):(typeof u.componentDidUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof u.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=256),n=!1)}return Ip(e,t,r,n,i,o)}function Ip(e,t,r,n,o,i){a0(e,t);var u=(t.flags&64)!=0;if(!n&&!u)return o&&Cg(t,r,!1),Lr(e,t,i);n=t.stateNode,JT.current=t;var s=u&&typeof r.getDerivedStateFromError!="function"?null:n.render();return t.flags|=1,e!==null&&u?(t.child=es(t,e.child,null,i),t.child=es(t,null,s,i)):Ut(e,t,s,i),t.memoizedState=n.state,o&&Cg(t,r,!0),t.child}function s0(e){var t=e.stateNode;t.pendingContext?Eg(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Eg(e,t.context,!1),xp(e,t.containerInfo)}var ls={dehydrated:null,retryLane:0};function f0(e,t,r){var n=t.pendingProps,o=Ve.current,i=!1,u;return(u=(t.flags&64)!=0)||(u=e!==null&&e.memoizedState===null?!1:(o&2)!=0),u?(i=!0,t.flags&=-65):e!==null&&e.memoizedState===null||n.fallback===void 0||n.unstable_avoidThisFallback===!0||(o|=1),Be(Ve,o&1),e===null?(n.fallback!==void 0&&Sp(t),e=n.children,o=n.fallback,i?(e=l0(t,e,o,r),t.child.memoizedState={baseLanes:r},t.memoizedState=ls,e):typeof n.unstable_expectedLoadTime=="number"?(e=l0(t,e,o,r),t.child.memoizedState={baseLanes:r},t.memoizedState=ls,t.lanes=33554432,e):(r=Lp({mode:"visible",children:e},t.mode,r,null),r.return=t,t.child=r)):e.memoizedState!==null?i?(n=d0(e,t,n.children,n.fallback,r),i=t.child,o=e.child.memoizedState,i.memoizedState=o===null?{baseLanes:r}:{baseLanes:o.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=ls,n):(r=c0(e,t,n.children,r),t.memoizedState=null,r):i?(n=d0(e,t,n.children,n.fallback,r),i=t.child,o=e.child.memoizedState,i.memoizedState=o===null?{baseLanes:r}:{baseLanes:o.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=ls,n):(r=c0(e,t,n.children,r),t.memoizedState=null,r)}function l0(e,t,r,n){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},(o&2)==0&&i!==null?(i.childLanes=0,i.pendingProps=t):i=Lp(t,o,0,null),r=Ro(r,o,n,null),i.return=e,r.return=e,i.sibling=r,e.child=i,r}function c0(e,t,r,n){var o=e.child;return e=o.sibling,r=pn(o,{mode:"visible",children:r}),(t.mode&2)==0&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function d0(e,t,r,n,o){var i=t.mode,u=e.child;e=u.sibling;var s={mode:"hidden",children:r};return(i&2)==0&&t.child!==u?(r=t.child,r.childLanes=0,r.pendingProps=s,u=r.lastEffect,u!==null?(t.firstEffect=r.firstEffect,t.lastEffect=u,u.nextEffect=null):t.firstEffect=t.lastEffect=null):r=pn(u,s),e!==null?n=pn(e,n):(n=Ro(n,i,o,null),n.flags|=2),n.return=t,r.return=t,r.sibling=n,t.child=r,n}function p0(e,t){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Rg(e.return,t)}function Ap(e,t,r,n,o,i){var u=e.memoizedState;u===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:i}:(u.isBackwards=t,u.rendering=null,u.renderingStartTime=0,u.last=n,u.tail=r,u.tailMode=o,u.lastEffect=i)}function h0(e,t,r){var n=t.pendingProps,o=n.revealOrder,i=n.tail;if(Ut(e,t,n.children,r),n=Ve.current,(n&2)!=0)n=n&1|2,t.flags|=64;else{if(e!==null&&(e.flags&64)!=0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&p0(e,r);else if(e.tag===19)p0(e,r);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(Be(Ve,n),(t.mode&2)==0)t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;r!==null;)e=r.alternate,e!==null&&ts(e)===null&&(o=r),r=r.sibling;r=o,r===null?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Ap(t,!1,o,r,i,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&ts(e)===null){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Ap(t,!0,r,null,i,t.lastEffect);break;case"together":Ap(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Lr(e,t,r){if(e!==null&&(t.dependencies=e.dependencies),Bi|=t.lanes,(r&t.childLanes)!=0){if(e!==null&&t.child!==e.child)throw Error($(153));if(t.child!==null){for(e=t.child,r=pn(e,e.pendingProps),t.child=r,r.return=t;e.sibling!==null;)e=e.sibling,r=r.sibling=pn(e,e.pendingProps),r.return=t;r.sibling=null}return t.child}return null}var m0,Fp,v0,y0;m0=function(e,t){for(var r=t.child;r!==null;){if(r.tag===5||r.tag===6)e.appendChild(r.stateNode);else if(r.tag!==4&&r.child!==null){r.child.return=r,r=r.child;continue}if(r===t)break;for(;r.sibling===null;){if(r.return===null||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}};Fp=function(){};v0=function(e,t,r,n){var o=e.memoizedProps;if(o!==n){e=t.stateNode,An(wr.current);var i=null;switch(r){case"input":o=wf(e,o),n=wf(e,n),i=[];break;case"option":o=Ef(e,o),n=Ef(e,n),i=[];break;case"select":o=We({},o,{value:void 0}),n=We({},n,{value:void 0}),i=[];break;case"textarea":o=Sf(e,o),n=Sf(e,n),i=[];break;default:typeof o.onClick!="function"&&typeof n.onClick=="function"&&(e.onclick=Uu)}Pf(r,n);var u;r=null;for(d in o)if(!n.hasOwnProperty(d)&&o.hasOwnProperty(d)&&o[d]!=null)if(d==="style"){var s=o[d];for(u in s)s.hasOwnProperty(u)&&(r||(r={}),r[u]="")}else d!=="dangerouslySetInnerHTML"&&d!=="children"&&d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&d!=="autoFocus"&&(gi.hasOwnProperty(d)?i||(i=[]):(i=i||[]).push(d,null));for(d in n){var c=n[d];if(s=o!=null?o[d]:void 0,n.hasOwnProperty(d)&&c!==s&&(c!=null||s!=null))if(d==="style")if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(r||(r={}),r[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(r||(r={}),r[u]=c[u])}else r||(i||(i=[]),i.push(d,r)),r=c;else d==="dangerouslySetInnerHTML"?(c=c?c.__html:void 0,s=s?s.__html:void 0,c!=null&&s!==c&&(i=i||[]).push(d,c)):d==="children"?typeof c!="string"&&typeof c!="number"||(i=i||[]).push(d,""+c):d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&(gi.hasOwnProperty(d)?(c!=null&&d==="onScroll"&&Ue("scroll",e),i||s===c||(i=[])):typeof c=="object"&&c!==null&&c.$$typeof===hf?c.toString():(i=i||[]).push(d,c))}r&&(i=i||[]).push("style",r);var d=i;(t.updateQueue=d)&&(t.flags|=4)}};y0=function(e,t,r,n){r!==n&&(t.flags|=4)};function na(e,t){if(!_r)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;t!==null;)t.alternate!==null&&(r=t),t=t.sibling;r===null?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;r!==null;)r.alternate!==null&&(n=r),r=r.sibling;n===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ZT(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return At(t.type)&&Wu(),null;case 3:return qo(),je(Lt),je(Ct),Dp(),n=t.stateNode,n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(e===null||e.child===null)&&(rs(t)?t.flags|=4:n.hydrate||(t.flags|=256)),Fp(t),null;case 5:Ep(t);var o=An(Gi.current);if(r=t.type,e!==null&&t.stateNode!=null)v0(e,t,r,n,o),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(t.stateNode===null)throw Error($(166));return null}if(e=An(wr.current),rs(t)){n=t.stateNode,r=t.type;var i=t.memoizedProps;switch(n[on]=t,n[Yu]=i,r){case"dialog":Ue("cancel",n),Ue("close",n);break;case"iframe":case"object":case"embed":Ue("load",n);break;case"video":case"audio":for(e=0;e<Wi.length;e++)Ue(Wi[e],n);break;case"source":Ue("error",n);break;case"img":case"image":case"link":Ue("error",n),Ue("load",n);break;case"details":Ue("toggle",n);break;case"input":sy(n,i),Ue("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!i.multiple},Ue("invalid",n);break;case"textarea":dy(n,i),Ue("invalid",n)}Pf(r,i),e=null;for(var u in i)i.hasOwnProperty(u)&&(o=i[u],u==="children"?typeof o=="string"?n.textContent!==o&&(e=["children",o]):typeof o=="number"&&n.textContent!==""+o&&(e=["children",""+o]):gi.hasOwnProperty(u)&&o!=null&&u==="onScroll"&&Ue("scroll",n));switch(r){case"input":wu(n),cy(n,i,!0);break;case"textarea":wu(n),py(n);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(n.onclick=Uu)}n=e,t.updateQueue=n,n!==null&&(t.flags|=4)}else{switch(u=o.nodeType===9?o:o.ownerDocument,e===Cf.html&&(e=hy(r)),e===Cf.html?r==="script"?(e=u.createElement("div"),e.innerHTML="<script></script>",e=e.removeChild(e.firstChild)):typeof n.is=="string"?e=u.createElement(r,{is:n.is}):(e=u.createElement(r),r==="select"&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,r),e[on]=t,e[Yu]=n,m0(e,t,!1,!1),t.stateNode=e,u=Tf(r,n),r){case"dialog":Ue("cancel",e),Ue("close",e),o=n;break;case"iframe":case"object":case"embed":Ue("load",e),o=n;break;case"video":case"audio":for(o=0;o<Wi.length;o++)Ue(Wi[o],e);o=n;break;case"source":Ue("error",e),o=n;break;case"img":case"image":case"link":Ue("error",e),Ue("load",e),o=n;break;case"details":Ue("toggle",e),o=n;break;case"input":sy(e,n),o=wf(e,n),Ue("invalid",e);break;case"option":o=Ef(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},o=We({},n,{value:void 0}),Ue("invalid",e);break;case"textarea":dy(e,n),o=Sf(e,n),Ue("invalid",e);break;default:o=n}Pf(r,o);var s=o;for(i in s)if(s.hasOwnProperty(i)){var c=s[i];i==="style"?yy(e,c):i==="dangerouslySetInnerHTML"?(c=c?c.__html:void 0,c!=null&&my(e,c)):i==="children"?typeof c=="string"?(r!=="textarea"||c!=="")&&Ci(e,c):typeof c=="number"&&Ci(e,""+c):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(gi.hasOwnProperty(i)?c!=null&&i==="onScroll"&&Ue("scroll",e):c!=null&&sf(e,i,c,u))}switch(r){case"input":wu(e),cy(e,n,!1);break;case"textarea":wu(e),py(e);break;case"option":n.value!=null&&e.setAttribute("value",""+Jr(n.value));break;case"select":e.multiple=!!n.multiple,i=n.value,i!=null?ho(e,!!n.multiple,i,!1):n.defaultValue!=null&&ho(e,!!n.multiple,n.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=Uu)}gg(r,n)&&(t.flags|=4)}t.ref!==null&&(t.flags|=128)}return null;case 6:if(e&&t.stateNode!=null)y0(e,t,e.memoizedProps,n);else{if(typeof n!="string"&&t.stateNode===null)throw Error($(166));r=An(Gi.current),An(wr.current),rs(t)?(n=t.stateNode,r=t.memoizedProps,n[on]=t,n.nodeValue!==r&&(t.flags|=4)):(n=(r.nodeType===9?r:r.ownerDocument).createTextNode(n),n[on]=t,t.stateNode=n)}return null;case 13:return je(Ve),n=t.memoizedState,(t.flags&64)!=0?(t.lanes=r,t):(n=n!==null,r=!1,e===null?t.memoizedProps.fallback!==void 0&&rs(t):r=e.memoizedState!==null,n&&!r&&(t.mode&2)!=0&&(e===null&&t.memoizedProps.unstable_avoidThisFallback!==!0||(Ve.current&1)!=0?_t===0&&(_t=3):((_t===0||_t===3)&&(_t=4),Rt===null||(Bi&134217727)==0&&(Lo&134217727)==0||Ao(Rt,Tt))),(n||r)&&(t.flags|=4),null);case 4:return qo(),Fp(t),e===null&&vg(t.stateNode.containerInfo),null;case 10:return vp(t),null;case 17:return At(t.type)&&Wu(),null;case 19:if(je(Ve),n=t.memoizedState,n===null)return null;if(i=(t.flags&64)!=0,u=n.rendering,u===null)if(i)na(n,!1);else{if(_t!==0||e!==null&&(e.flags&64)!=0)for(e=t.child;e!==null;){if(u=ts(e),u!==null){for(t.flags|=64,na(n,!1),i=u.updateQueue,i!==null&&(t.updateQueue=i,t.flags|=4),n.lastEffect===null&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;r!==null;)i=r,e=n,i.flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,u=i.alternate,u===null?(i.childLanes=0,i.lanes=e,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return Be(Ve,Ve.current&1|2),t.child}e=e.sibling}n.tail!==null&&Dt()>Up&&(t.flags|=64,i=!0,na(n,!1),t.lanes=33554432)}else{if(!i)if(e=ts(u),e!==null){if(t.flags|=64,i=!0,r=e.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),na(n,!0),n.tail===null&&n.tailMode==="hidden"&&!u.alternate&&!_r)return t=t.lastEffect=n.lastEffect,t!==null&&(t.nextEffect=null),null}else 2*Dt()-n.renderingStartTime>Up&&r!==1073741824&&(t.flags|=64,i=!0,na(n,!1),t.lanes=33554432);n.isBackwards?(u.sibling=t.child,t.child=u):(r=n.last,r!==null?r.sibling=u:t.child=u,n.last=u)}return n.tail!==null?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Dt(),r.sibling=null,t=Ve.current,Be(Ve,i?t&1|2:t&1),r):null;case 23:case 24:return jp(),e!==null&&e.memoizedState!==null!=(t.memoizedState!==null)&&n.mode!=="unstable-defer-without-hiding"&&(t.flags|=4),null}throw Error($(156,t.tag))}function eO(e){switch(e.tag){case 1:At(e.type)&&Wu();var t=e.flags;return t&4096?(e.flags=t&-4097|64,e):null;case 3:if(qo(),je(Lt),je(Ct),Dp(),t=e.flags,(t&64)!=0)throw Error($(285));return e.flags=t&-4097|64,e;case 5:return Ep(e),null;case 13:return je(Ve),t=e.flags,t&4096?(e.flags=t&-4097|64,e):null;case 19:return je(Ve),null;case 4:return qo(),null;case 10:return vp(e),null;case 23:case 24:return jp(),null;default:return null}}function Yp(e,t){try{var r="",n=t;do r+=qP(n),n=n.return;while(n);var o=r}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o}}function Wp(e,t){try{console.error(t.value)}catch(r){setTimeout(function(){throw r})}}var tO=typeof WeakMap=="function"?WeakMap:Map;function g0(e,t,r){r=ln(-1,r),r.tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){cs||(cs=!0,Hp=n),Wp(e,t)},r}function w0(e,t,r){r=ln(-1,r),r.tag=3;var n=e.type.getDerivedStateFromError;if(typeof n=="function"){var o=t.value;r.payload=function(){return Wp(e,t),n(o)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(r.callback=function(){typeof n!="function"&&(Er===null?Er=new Set([this]):Er.add(this),Wp(e,t));var u=t.stack;this.componentDidCatch(t.value,{componentStack:u!==null?u:""})}),r}var rO=typeof WeakSet=="function"?WeakSet:Set;function _0(e){var t=e.ref;if(t!==null)if(typeof t=="function")try{t(null)}catch(r){mn(e,r)}else t.current=null}function nO(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(t.flags&256&&e!==null){var r=e.memoizedProps,n=e.memoizedState;e=t.stateNode,t=e.getSnapshotBeforeUpdate(t.elementType===t.type?r:cr(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:t.flags&256&&ap(t.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error($(163))}function iO(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(t=r.updateQueue,t=t!==null?t.lastEffect:null,t!==null){e=t=t.next;do{if((e.tag&3)==3){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(t=r.updateQueue,t=t!==null?t.lastEffect:null,t!==null){e=t=t.next;do{var o=e;n=o.next,o=o.tag,(o&4)!=0&&(o&1)!=0&&(x0(r,e),oO(r,e)),e=n}while(e!==t)}return;case 1:e=r.stateNode,r.flags&4&&(t===null?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:cr(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),t=r.updateQueue,t!==null&&Lg(r,t,e);return;case 3:if(t=r.updateQueue,t!==null){if(e=null,r.child!==null)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}Lg(r,t,e)}return;case 5:e=r.stateNode,t===null&&r.flags&4&&gg(r.type,r.memoizedProps)&&e.focus();return;case 6:return;case 4:return;case 12:return;case 13:r.memoizedState===null&&(r=r.alternate,r!==null&&(r=r.memoizedState,r!==null&&(r=r.dehydrated,r!==null&&Ry(r))));return;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error($(163))}function E0(e,t){for(var r=e;;){if(r.tag===5){var n=r.stateNode;if(t)n=n.style,typeof n.setProperty=="function"?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=o!=null&&o.hasOwnProperty("display")?o.display:null,n.style.display=vy("display",o)}}else if(r.tag===6)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((r.tag!==23&&r.tag!==24||r.memoizedState===null||r===e)&&r.child!==null){r.child.return=r,r=r.child;continue}if(r===e)break;for(;r.sibling===null;){if(r.return===null||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function C0(e,t){if(In&&typeof In.onCommitFiberUnmount=="function")try{In.onCommitFiberUnmount(lp,t)}catch(i){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(e=t.updateQueue,e!==null&&(e=e.lastEffect,e!==null)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,o!==void 0)if((n&4)!=0)x0(t,r);else{n=t;try{o()}catch(i){mn(n,i)}}r=r.next}while(r!==e)}break;case 1:if(_0(t),e=t.stateNode,typeof e.componentWillUnmount=="function")try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(i){mn(t,i)}break;case 5:_0(t);break;case 4:S0(e,t)}}function D0(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function P0(e){return e.tag===5||e.tag===3||e.tag===4}function T0(e){e:{for(var t=e.return;t!==null;){if(P0(t))break e;t=t.return}throw Error($(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:t=t.containerInfo,n=!0;break;case 4:t=t.containerInfo,n=!0;break;default:throw Error($(161))}r.flags&16&&(Ci(t,""),r.flags&=-17);e:t:for(r=e;;){for(;r.sibling===null;){if(r.return===null||P0(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;r.tag!==5&&r.tag!==6&&r.tag!==18;){if(r.flags&2||r.child===null||r.tag===4)continue t;r.child.return=r,r=r.child}if(!(r.flags&2)){r=r.stateNode;break e}}n?Qp(e,r,t):Bp(e,r,t)}function Qp(e,t,r){var n=e.tag,o=n===5||n===6;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.nodeType===8?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(r.nodeType===8?(t=r.parentNode,t.insertBefore(e,r)):(t=r,t.appendChild(e)),r=r._reactRootContainer,r!=null||t.onclick!==null||(t.onclick=Uu));else if(n!==4&&(e=e.child,e!==null))for(Qp(e,t,r),e=e.sibling;e!==null;)Qp(e,t,r),e=e.sibling}function Bp(e,t,r){var n=e.tag,o=n===5||n===6;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(n!==4&&(e=e.child,e!==null))for(Bp(e,t,r),e=e.sibling;e!==null;)Bp(e,t,r),e=e.sibling}function S0(e,t){for(var r=t,n=!1,o,i;;){if(!n){n=r.return;e:for(;;){if(n===null)throw Error($(160));switch(o=n.stateNode,n.tag){case 5:i=!1;break e;case 3:o=o.containerInfo,i=!0;break e;case 4:o=o.containerInfo,i=!0;break e}n=n.return}n=!0}if(r.tag===5||r.tag===6){e:for(var u=e,s=r,c=s;;)if(C0(u,c),c.child!==null&&c.tag!==4)c.child.return=c,c=c.child;else{if(c===s)break e;for(;c.sibling===null;){if(c.return===null||c.return===s)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(u=o,s=r.stateNode,u.nodeType===8?u.parentNode.removeChild(s):u.removeChild(s)):o.removeChild(r.stateNode)}else if(r.tag===4){if(r.child!==null){o=r.stateNode.containerInfo,i=!0,r.child.return=r,r=r.child;continue}}else if(C0(e,r),r.child!==null){r.child.return=r,r=r.child;continue}if(r===t)break;for(;r.sibling===null;){if(r.return===null||r.return===t)return;r=r.return,r.tag===4&&(n=!1)}r.sibling.return=r.return,r=r.sibling}}function $p(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var n=r=r.next;do(n.tag&3)==3&&(e=n.destroy,n.destroy=void 0,e!==void 0&&e()),n=n.next;while(n!==r)}return;case 1:return;case 5:if(r=t.stateNode,r!=null){n=t.memoizedProps;var o=e!==null?e.memoizedProps:n;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,i!==null){for(r[Yu]=n,e==="input"&&n.type==="radio"&&n.name!=null&&ly(r,n),Tf(e,o),t=Tf(e,n),o=0;o<i.length;o+=2){var u=i[o],s=i[o+1];u==="style"?yy(r,s):u==="dangerouslySetInnerHTML"?my(r,s):u==="children"?Ci(r,s):sf(r,u,s,t)}switch(e){case"input":xf(r,n);break;case"textarea":fy(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,i=n.value,i!=null?ho(r,!!n.multiple,i,!1):e!==!!n.multiple&&(n.defaultValue!=null?ho(r,!!n.multiple,n.defaultValue,!0):ho(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(t.stateNode===null)throw Error($(162));t.stateNode.nodeValue=t.memoizedProps;return;case 3:r=t.stateNode,r.hydrate&&(r.hydrate=!1,Ry(r.containerInfo));return;case 12:return;case 13:t.memoizedState!==null&&(Vp=Dt(),E0(t.child,!0)),O0(t);return;case 19:O0(t);return;case 17:return;case 23:case 24:E0(t,t.memoizedState!==null);return}throw Error($(163))}function O0(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var r=e.stateNode;r===null&&(r=e.stateNode=new rO),t.forEach(function(n){var o=aO.bind(null,e,n);r.has(n)||(r.add(n),n.then(o,o))})}}function uO(e,t){return e!==null&&(e=e.memoizedState,e===null||e.dehydrated!==null)?(t=t.memoizedState,t!==null&&t.dehydrated===null):!1}var sO=Math.ceil,ds=bn.ReactCurrentDispatcher,zp=bn.ReactCurrentOwner,fe=0,Rt=null,at=null,Tt=0,jn=0,Kp=an(0),_t=0,fs=null,Fo=0,Bi=0,Lo=0,Gp=0,Xp=null,Vp=0,Up=Infinity;function Uo(){Up=Dt()+500}var te=null,cs=!1,Hp=null,Er=null,vn=!1,oa=null,ia=90,Jp=[],Zp=[],Ar=null,aa=0,eh=null,ps=-1,Fr=0,hs=0,ua=null,ms=!1;function Qt(){return(fe&48)!=0?Dt():ps!==-1?ps:ps=Dt()}function dn(e){if(e=e.mode,(e&2)==0)return 1;if((e&4)==0)return ko()===99?1:2;if(Fr===0&&(Fr=Fo),$T.transition!==0){hs!==0&&(hs=Xp!==null?Xp.pendingLanes:0),e=Fr;var t=4186112&~hs;return t&=-t,t===0&&(e=4186112&~e,t=e&-e,t===0&&(t=8192)),t}return e=ko(),(fe&4)!=0&&e===98?e=Ou(12,Fr):(e=GP(e),e=Ou(e,Fr)),e}function fn(e,t,r){if(50<aa)throw aa=0,eh=null,Error($(185));if(e=vs(e,t),e===null)return null;bu(e,t,r),e===Rt&&(Lo|=t,_t===4&&Ao(e,Tt));var n=ko();t===1?(fe&8)!=0&&(fe&48)==0?th(e):(ir(e,r),fe===0&&(Uo(),gr())):((fe&4)==0||n!==98&&n!==99||(Ar===null?Ar=new Set([e]):Ar.add(e)),ir(e,r)),Xp=e}function vs(e,t){e.lanes|=t;var r=e.alternate;for(r!==null&&(r.lanes|=t),r=e,e=e.return;e!==null;)e.childLanes|=t,r=e.alternate,r!==null&&(r.childLanes|=t),r=e,e=e.return;return r.tag===3?r.stateNode:null}function ir(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var s=31-rn(u),c=1<<s,d=i[s];if(d===-1){if((c&n)==0||(c&o)!=0){d=t,wo(c);var p=Le;i[s]=10<=p?d+250:6<=p?d+5e3:-1}}else d<=t&&(e.expiredLanes|=c);u&=~c}if(n=qi(e,e===Rt?Tt:0),t=Le,n===0)r!==null&&(r!==pp&&dp(r),e.callbackNode=null,e.callbackPriority=0);else{if(r!==null){if(e.callbackPriority===t)return;r!==pp&&dp(r)}t===15?(r=th.bind(null,e),qr===null?(qr=[r],Bu=cp(Qu,Ng)):qr.push(r),r=pp):t===14?r=Qi(99,th.bind(null,e)):(r=XP(t),r=Qi(r,b0.bind(null,e))),e.callbackPriority=t,e.callbackNode=r}}function b0(e){if(ps=-1,hs=Fr=0,(fe&48)!=0)throw Error($(327));var t=e.callbackNode;if(yn()&&e.callbackNode!==t)return null;var r=qi(e,e===Rt?Tt:0);if(r===0)return null;var n=r,o=fe;fe|=16;var i=M0();(Rt!==e||Tt!==n)&&(Uo(),jo(e,n));do try{lO();break}catch(s){k0(e,s)}while(1);if(mp(),ds.current=i,fe=o,at!==null?n=0:(Rt=null,Tt=0,n=_t),(Fo&Lo)!=0)jo(e,0);else if(n!==0){if(n===2&&(fe|=64,e.hydrate&&(e.hydrate=!1,ap(e.containerInfo)),r=jy(e),r!==0&&(n=sa(e,r))),n===1)throw t=fs,jo(e,0),Ao(e,r),ir(e,Dt()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error($(345));case 2:Yn(e);break;case 3:if(Ao(e,r),(r&62914560)===r&&(n=Vp+500-Dt(),10<n)){if(qi(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){Qt(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=wg(Yn.bind(null,e),n);break}Yn(e);break;case 4:if(Ao(e,r),(r&4186112)===r)break;for(n=e.eventTimes,o=-1;0<r;){var u=31-rn(r);i=1<<u,u=n[u],u>o&&(o=u),r&=~i}if(r=o,r=Dt()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*sO(r/1960))-r,10<r){e.timeoutHandle=wg(Yn.bind(null,e),r);break}Yn(e);break;case 5:Yn(e);break;default:throw Error($(329))}}return ir(e,Dt()),e.callbackNode===t?b0.bind(null,e):null}function Ao(e,t){for(t&=~Gp,t&=~Lo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-rn(t),n=1<<r;e[r]=-1,t&=~n}}function th(e){if((fe&48)!=0)throw Error($(327));if(yn(),e===Rt&&(e.expiredLanes&Tt)!=0){var t=Tt,r=sa(e,t);(Fo&Lo)!=0&&(t=qi(e,t),r=sa(e,t))}else t=qi(e,0),r=sa(e,t);if(e.tag!==0&&r===2&&(fe|=64,e.hydrate&&(e.hydrate=!1,ap(e.containerInfo)),t=jy(e),t!==0&&(r=sa(e,t))),r===1)throw r=fs,jo(e,0),Ao(e,t),ir(e,Dt()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Yn(e),ir(e,Dt()),null}function cO(){if(Ar!==null){var e=Ar;Ar=null,e.forEach(function(t){t.expiredLanes|=24&t.pendingLanes,ir(t,Dt())})}gr()}function N0(e,t){var r=fe;fe|=1;try{return e(t)}finally{fe=r,fe===0&&(Uo(),gr())}}function R0(e,t){var r=fe;fe&=-2,fe|=8;try{return e(t)}finally{fe=r,fe===0&&(Uo(),gr())}}function ss(e,t){Be(Kp,jn),jn|=t,Fo|=t}function jp(){jn=Kp.current,je(Kp)}function jo(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(r!==-1&&(e.timeoutHandle=-1,YT(r)),at!==null)for(r=at.return;r!==null;){var n=r;switch(n.tag){case 1:n=n.type.childContextTypes,n!=null&&Wu();break;case 3:qo(),je(Lt),je(Ct),Dp();break;case 5:Ep(n);break;case 4:qo();break;case 13:je(Ve);break;case 19:je(Ve);break;case 10:vp(n);break;case 23:case 24:jp()}r=r.return}Rt=e,at=pn(e.current,null),Tt=jn=Fo=t,_t=0,fs=null,Gp=Lo=Bi=0}function k0(e,t){do{var r=at;try{if(mp(),Xi.current=os,ns){for(var n=Ke.memoizedState;n!==null;){var o=n.queue;o!==null&&(o.pending=null),n=n.next}ns=!1}if(Ji=0,wt=Pt=Ke=null,Zi=!1,zp.current=null,r===null||r.return===null){_t=1,fs=t,at=null;break}e:{var i=e,u=r.return,s=r,c=t;if(t=Tt,s.flags|=2048,s.firstEffect=s.lastEffect=null,c!==null&&typeof c=="object"&&typeof c.then=="function"){var d=c;if((s.mode&2)==0){var p=s.alternate;p?(s.updateQueue=p.updateQueue,s.memoizedState=p.memoizedState,s.lanes=p.lanes):(s.updateQueue=null,s.memoizedState=null)}var _=(Ve.current&1)!=0,g=u;do{var T;if(T=g.tag===13){var R=g.memoizedState;if(R!==null)T=R.dehydrated!==null;else{var U=g.memoizedProps;T=U.fallback===void 0?!1:U.unstable_avoidThisFallback!==!0?!0:!_}}if(T){var S=g.updateQueue;if(S===null){var y=new Set;y.add(d),g.updateQueue=y}else S.add(d);if((g.mode&2)==0){if(g.flags|=64,s.flags|=16384,s.flags&=-2981,s.tag===1)if(s.alternate===null)s.tag=17;else{var P=ln(-1,1);P.tag=2,cn(s,P)}s.lanes|=1;break e}c=void 0,s=t;var M=i.pingCache;if(M===null?(M=i.pingCache=new tO,c=new Set,M.set(d,c)):(c=M.get(d),c===void 0&&(c=new Set,M.set(d,c))),!c.has(s)){c.add(s);var I=dO.bind(null,i,d,s);d.then(I,I)}g.flags|=4096,g.lanes=t;break e}g=g.return}while(g!==null);c=Error((po(s.type)||"A React component")+` suspended while rendering, but no fallback UI was specified.

Add a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.`)}_t!==5&&(_t=2),c=Yp(c,s),g=u;do{switch(g.tag){case 3:i=c,g.flags|=4096,t&=-t,g.lanes|=t;var z=g0(g,i,t);Ig(g,z);break e;case 1:i=c;var H=g.type,B=g.stateNode;if((g.flags&64)==0&&(typeof H.getDerivedStateFromError=="function"||B!==null&&typeof B.componentDidCatch=="function"&&(Er===null||!Er.has(B)))){g.flags|=4096,t&=-t,g.lanes|=t;var V=w0(g,i,t);Ig(g,V);break e}}g=g.return}while(g!==null)}q0(r)}catch(K){t=K,at===r&&r!==null&&(at=r=r.return);continue}break}while(1)}function M0(){var e=ds.current;return ds.current=os,e===null?os:e}function sa(e,t){var r=fe;fe|=16;var n=M0();Rt===e&&Tt===t||jo(e,t);do try{fO();break}catch(o){k0(e,o)}while(1);if(mp(),fe=r,ds.current=n,at!==null)throw Error($(261));return Rt=null,Tt=0,_t}function fO(){for(;at!==null;)I0(at)}function lO(){for(;at!==null&&!QT();)I0(at)}function I0(e){var t=L0(e.alternate,e,jn);e.memoizedProps=e.pendingProps,t===null?q0(e):at=t,zp.current=null}function q0(e){var t=e;do{var r=t.alternate;if(e=t.return,(t.flags&2048)==0){if(r=ZT(r,t,jn),r!==null){at=r;return}if(r=t,r.tag!==24&&r.tag!==23||r.memoizedState===null||(jn&1073741824)!=0||(r.mode&4)==0){for(var n=0,o=r.child;o!==null;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}e!==null&&(e.flags&2048)==0&&(e.firstEffect===null&&(e.firstEffect=t.firstEffect),t.lastEffect!==null&&(e.lastEffect!==null&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(e.lastEffect!==null?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(r=eO(t),r!==null){r.flags&=2047,at=r;return}e!==null&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(t=t.sibling,t!==null){at=t;return}at=t=e}while(t!==null);_t===0&&(_t=5)}function Yn(e){var t=ko();return Ln(99,pO.bind(null,e,t)),null}function pO(e,t){do yn();while(oa!==null);if((fe&48)!=0)throw Error($(327));var r=e.finishedWork;if(r===null)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error($(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,s=e.expirationTimes;0<i;){var c=31-rn(i),d=1<<c;o[c]=0,u[c]=-1,s[c]=-1,i&=~d}if(Ar!==null&&(n&24)==0&&Ar.has(e)&&Ar.delete(e),e===Rt&&(at=Rt=null,Tt=0),1<r.flags?r.lastEffect!==null?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,n!==null){if(o=fe,fe|=32,zp.current=null,np=ku,u=ug(),Zf(u)){if("selectionStart"in u)s={start:u.selectionStart,end:u.selectionEnd};else e:if(s=(s=u.ownerDocument)&&s.defaultView||window,(d=s.getSelection&&s.getSelection())&&d.rangeCount!==0){s=d.anchorNode,i=d.anchorOffset,c=d.focusNode,d=d.focusOffset;try{s.nodeType,c.nodeType}catch(K){s=null;break e}var p=0,_=-1,g=-1,T=0,R=0,U=u,S=null;t:for(;;){for(var y;U!==s||i!==0&&U.nodeType!==3||(_=p+i),U!==c||d!==0&&U.nodeType!==3||(g=p+d),U.nodeType===3&&(p+=U.nodeValue.length),(y=U.firstChild)!==null;)S=U,U=y;for(;;){if(U===u)break t;if(S===s&&++T===i&&(_=p),S===c&&++R===d&&(g=p),(y=U.nextSibling)!==null)break;U=S,S=U.parentNode}U=y}s=_===-1||g===-1?null:{start:_,end:g}}else s=null;s=s||{start:0,end:0}}else s=null;op={focusedElem:u,selectionRange:s},ku=!1,ua=null,ms=!1,te=n;do try{hO()}catch(K){if(te===null)throw Error($(330));mn(te,K),te=te.nextEffect}while(te!==null);ua=null,te=n;do try{for(u=e;te!==null;){var P=te.flags;if(P&16&&Ci(te.stateNode,""),P&128){var M=te.alternate;if(M!==null){var I=M.ref;I!==null&&(typeof I=="function"?I(null):I.current=null)}}switch(P&1038){case 2:T0(te),te.flags&=-3;break;case 6:T0(te),te.flags&=-3,$p(te.alternate,te);break;case 1024:te.flags&=-1025;break;case 1028:te.flags&=-1025,$p(te.alternate,te);break;case 4:$p(te.alternate,te);break;case 8:s=te,S0(u,s);var z=s.alternate;D0(s),z!==null&&D0(z)}te=te.nextEffect}}catch(K){if(te===null)throw Error($(330));mn(te,K),te=te.nextEffect}while(te!==null);if(I=op,M=ug(),P=I.focusedElem,u=I.selectionRange,M!==P&&P&&P.ownerDocument&&ag(P.ownerDocument.documentElement,P)){for(u!==null&&Zf(P)&&(M=u.start,I=u.end,I===void 0&&(I=M),"selectionStart"in P?(P.selectionStart=M,P.selectionEnd=Math.min(I,P.value.length)):(I=(M=P.ownerDocument||document)&&M.defaultView||window,I.getSelection&&(I=I.getSelection(),s=P.textContent.length,z=Math.min(u.start,s),u=u.end===void 0?z:Math.min(u.end,s),!I.extend&&z>u&&(s=u,u=z,z=s),s=ig(P,z),i=ig(P,u),s&&i&&(I.rangeCount!==1||I.anchorNode!==s.node||I.anchorOffset!==s.offset||I.focusNode!==i.node||I.focusOffset!==i.offset)&&(M=M.createRange(),M.setStart(s.node,s.offset),I.removeAllRanges(),z>u?(I.addRange(M),I.extend(i.node,i.offset)):(M.setEnd(i.node,i.offset),I.addRange(M)))))),M=[],I=P;I=I.parentNode;)I.nodeType===1&&M.push({element:I,left:I.scrollLeft,top:I.scrollTop});for(typeof P.focus=="function"&&P.focus(),P=0;P<M.length;P++)I=M[P],I.element.scrollLeft=I.left,I.element.scrollTop=I.top}ku=!!np,op=np=null,e.current=r,te=n;do try{for(P=e;te!==null;){var H=te.flags;if(H&36&&iO(P,te.alternate,te),H&128){M=void 0;var B=te.ref;if(B!==null){var V=te.stateNode;switch(te.tag){case 5:M=V;break;default:M=V}typeof B=="function"?B(M):B.current=M}}te=te.nextEffect}}catch(K){if(te===null)throw Error($(330));mn(te,K),te=te.nextEffect}while(te!==null);te=null,VT(),fe=o}else e.current=r;if(vn)vn=!1,oa=e,ia=t;else for(te=n;te!==null;)t=te.nextEffect,te.nextEffect=null,te.flags&8&&(H=te,H.sibling=null,H.stateNode=null),te=t;if(n=e.pendingLanes,n===0&&(Er=null),n===1?e===eh?aa++:(aa=0,eh=e):aa=0,r=r.stateNode,In&&typeof In.onCommitFiberRoot=="function")try{In.onCommitFiberRoot(lp,r,void 0,(r.current.flags&64)==64)}catch(K){}if(ir(e,Dt()),cs)throw cs=!1,e=Hp,Hp=null,e;return(fe&8)!=0||gr(),null}function hO(){for(;te!==null;){var e=te.alternate;ms||ua===null||((te.flags&8)!=0?Py(te,ua)&&(ms=!0):te.tag===13&&uO(e,te)&&Py(te,ua)&&(ms=!0));var t=te.flags;(t&256)!=0&&nO(e,te),(t&512)==0||vn||(vn=!0,Qi(97,function(){return yn(),null})),te=te.nextEffect}}function yn(){if(ia!==90){var e=97<ia?97:ia;return ia=90,Ln(e,mO)}return!1}function oO(e,t){Jp.push(t,e),vn||(vn=!0,Qi(97,function(){return yn(),null}))}function x0(e,t){Zp.push(t,e),vn||(vn=!0,Qi(97,function(){return yn(),null}))}function mO(){if(oa===null)return!1;var e=oa;if(oa=null,(fe&48)!=0)throw Error($(331));var t=fe;fe|=32;var r=Zp;Zp=[];for(var n=0;n<r.length;n+=2){var o=r[n],i=r[n+1],u=o.destroy;if(o.destroy=void 0,typeof u=="function")try{u()}catch(c){if(i===null)throw Error($(330));mn(i,c)}}for(r=Jp,Jp=[],n=0;n<r.length;n+=2){o=r[n],i=r[n+1];try{var s=o.create;o.destroy=s()}catch(c){if(i===null)throw Error($(330));mn(i,c)}}for(s=e.current.firstEffect;s!==null;)e=s.nextEffect,s.nextEffect=null,s.flags&8&&(s.sibling=null,s.stateNode=null),s=e;return fe=t,gr(),!0}function A0(e,t,r){t=Yp(r,t),t=g0(e,t,1),cn(e,t),t=Qt(),e=vs(e,1),e!==null&&(bu(e,1,t),ir(e,t))}function mn(e,t){if(e.tag===3)A0(e,e,t);else for(var r=e.return;r!==null;){if(r.tag===3){A0(r,e,t);break}else if(r.tag===1){var n=r.stateNode;if(typeof r.type.getDerivedStateFromError=="function"||typeof n.componentDidCatch=="function"&&(Er===null||!Er.has(n))){e=Yp(t,e);var o=w0(r,e,1);if(cn(r,o),o=Qt(),r=vs(r,1),r!==null)bu(r,1,o),ir(r,o);else if(typeof n.componentDidCatch=="function"&&(Er===null||!Er.has(n)))try{n.componentDidCatch(t,e)}catch(i){}break}}r=r.return}}function dO(e,t,r){var n=e.pingCache;n!==null&&n.delete(t),t=Qt(),e.pingedLanes|=e.suspendedLanes&r,Rt===e&&(Tt&r)===r&&(_t===4||_t===3&&(Tt&62914560)===Tt&&500>Dt()-Vp?jo(e,0):Gp|=r),ir(e,t)}function aO(e,t){var r=e.stateNode;r!==null&&r.delete(t),t=0,t===0&&(t=e.mode,(t&2)==0?t=1:(t&4)==0?t=ko()===99?1:2:(Fr===0&&(Fr=Fo),t=_o(62914560&~Fr),t===0&&(t=4194304))),r=Qt(),e=vs(e,t),e!==null&&(bu(e,t,r),ir(e,r))}var L0;L0=function(e,t,r){var n=t.lanes;if(e!==null)if(e.memoizedProps!==t.pendingProps||Lt.current)dr=!0;else if((r&n)!=0)dr=(e.flags&16384)!=0;else{switch(dr=!1,t.tag){case 3:s0(t),Cp();break;case 5:Hg(t);break;case 1:At(t.type)&&Hu(t);break;case 4:xp(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;Be(Vu,o._currentValue),o._currentValue=n;break;case 13:if(t.memoizedState!==null)return(r&t.child.childLanes)!=0?f0(e,t,r):(Be(Ve,Ve.current&1),t=Lr(e,t,r),t!==null?t.sibling:null);Be(Ve,Ve.current&1);break;case 19:if(n=(r&t.childLanes)!=0,(e.flags&64)!=0){if(n)return h0(e,t,r);t.flags|=64}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),Be(Ve,Ve.current),n)break;return null;case 23:case 24:return t.lanes=0,qp(e,t,r)}return Lr(e,t,r)}else dr=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=bo(t,Ct.current),No(t,r),o=Tp(null,t,n,e,o,r),t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,At(n)){var i=!0;Hu(t)}else i=!1;t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,yp(t);var u=n.getDerivedStateFromProps;typeof u=="function"&&Ku(t,n,u,e),o.updater=Gu,t.stateNode=o,o._reactInternals=t,gp(t,n,e,r),t=Ip(null,t,n,!0,i,r)}else t.tag=0,Ut(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=o._init,o=i(o._payload),t.type=o,i=t.tag=vO(o),e=cr(o,e),i){case 0:t=Rp(null,t,o,e,r);break e;case 1:t=u0(null,t,o,e,r);break e;case 11:t=n0(null,t,o,e,r);break e;case 14:t=i0(null,t,o,cr(o.type,e),n,r);break e}throw Error($(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:cr(n,o),Rp(e,t,n,o,r);case 1:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:cr(n,o),u0(e,t,n,o,r);case 3:if(s0(t),n=t.updateQueue,e===null||n===null)throw Error($(282));if(n=t.pendingProps,o=t.memoizedState,o=o!==null?o.element:null,qg(e,t),Vi(t,n,null,r),n=t.memoizedState.element,n===o)Cp(),t=Lr(e,t,r);else{if(o=t.stateNode,(i=o.hydrate)&&(hn=To(t.stateNode.containerInfo.firstChild),Ir=t,i=_r=!0),i){if(e=o.mutableSourceEagerHydrationData,e!=null)for(o=0;o<e.length;o+=2)i=e[o],i._workInProgressVersionPrimary=e[o+1],Io.push(i);for(r=Wg(t,null,n,r),t.child=r;r;)r.flags=r.flags&-3|1024,r=r.sibling}else Ut(e,t,n,r),Cp();t=t.child}return t;case 5:return Hg(t),e===null&&Sp(t),n=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,u=o.children,ip(n,o)?u=null:i!==null&&ip(n,i)&&(t.flags|=16),a0(e,t),Ut(e,t,u,r),t.child;case 6:return e===null&&Sp(t),null;case 13:return f0(e,t,r);case 4:return xp(t,t.stateNode.containerInfo),n=t.pendingProps,e===null?t.child=es(t,null,n,r):Ut(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:cr(n,o),n0(e,t,n,o,r);case 7:return Ut(e,t,t.pendingProps,r),t.child;case 8:return Ut(e,t,t.pendingProps.children,r),t.child;case 12:return Ut(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var s=t.type._context;if(Be(Vu,s._currentValue),s._currentValue=i,u!==null)if(s=u.value,i=tr(s,i)?0:(typeof n._calculateChangedBits=="function"?n._calculateChangedBits(s,i):1073741823)|0,i===0){if(u.children===o.children&&!Lt.current){t=Lr(e,t,r);break e}}else for(s=t.child,s!==null&&(s.return=t);s!==null;){var c=s.dependencies;if(c!==null){u=s.child;for(var d=c.firstContext;d!==null;){if(d.context===n&&(d.observedBits&i)!=0){s.tag===1&&(d=ln(-1,r&-r),d.tag=2,cn(s,d)),s.lanes|=r,d=s.alternate,d!==null&&(d.lanes|=r),Rg(s.return,r),c.lanes|=r;break}d=d.next}}else u=s.tag===10&&s.type===t.type?null:s.child;if(u!==null)u.return=s;else for(u=s;u!==null;){if(u===t){u=null;break}if(s=u.sibling,s!==null){s.return=u.return,u=s;break}u=u.return}s=u}Ut(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,i=t.pendingProps,n=i.children,No(t,r),o=rr(o,i.unstable_observedBits),n=n(o),t.flags|=1,Ut(e,t,n,r),t.child;case 14:return o=t.type,i=cr(o,t.pendingProps),i=cr(o.type,i),i0(e,t,o,i,n,r);case 15:return o0(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:cr(n,o),e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,At(n)?(e=!0,Hu(t)):e=!1,No(t,r),Ug(t,n,o),gp(t,n,o,r),Ip(null,t,n,!0,e,r);case 19:return h0(e,t,r);case 23:return qp(e,t,r);case 24:return qp(e,t,r)}throw Error($(156,t.tag))};function yO(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function nr(e,t,r,n){return new yO(e,t,r,n)}function Np(e){return e=e.prototype,!(!e||!e.isReactComponent)}function vO(e){if(typeof e=="function")return Np(e)?1:0;if(e!=null){if(e=e.$$typeof,e===mu)return 11;if(e===yu)return 14}return 2}function pn(e,t){var r=e.alternate;return r===null?(r=nr(e.tag,t,e.key,e.mode),r.elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Zu(e,t,r,n,o,i){var u=2;if(n=e,typeof e=="function")Np(e)&&(u=1);else if(typeof e=="string")u=5;else e:switch(e){case Xr:return Ro(r.children,o,i,t);case oy:u=8,o|=16;break;case lf:u=8,o|=1;break;case _i:return e=nr(12,r,t,o|8),e.elementType=_i,e.type=_i,e.lanes=i,e;case xi:return e=nr(13,r,t,o),e.type=xi,e.elementType=xi,e.lanes=i,e;case vu:return e=nr(19,r,t,o),e.elementType=vu,e.lanes=i,e;case mf:return Lp(r,o,i,t);case vf:return e=nr(24,r,t,o),e.elementType=vf,e.lanes=i,e;default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case cf:u=10;break e;case df:u=9;break e;case mu:u=11;break e;case yu:u=14;break e;case ff:u=16,n=null;break e;case pf:u=22;break e}throw Error($(130,e==null?e:typeof e,""))}return t=nr(u,r,t,o),t.elementType=e,t.type=n,t.lanes=i,t}function Ro(e,t,r,n){return e=nr(7,e,n,t),e.lanes=r,e}function Lp(e,t,r,n){return e=nr(23,e,n,t),e.elementType=mf,e.lanes=r,e}function wp(e,t,r){return e=nr(6,e,null,t),e.lanes=r,e}function _p(e,t,r){return t=nr(4,e.children!==null?e.children:[],e.key,t),t.lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function gO(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Hf(0),this.expirationTimes=Hf(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Hf(0),this.mutableSourceEagerHydrationData=null}function wO(e,t,r){var n=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:kn,key:n==null?null:""+n,children:e,containerInfo:t,implementation:r}}function ys(e,t,r,n){var o=t.current,i=Qt(),u=dn(o);e:if(r){r=r._reactInternals;t:{if(Nn(r)!==r||r.tag!==1)throw Error($(170));var s=r;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(At(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(s!==null);throw Error($(171))}if(r.tag===1){var c=r.type;if(At(c)){r=Sg(r,c,s);break e}}r=s}else r=un;return t.context===null?t.context=r:t.pendingContext=r,t=ln(i,u),t.payload={element:e},n=n===void 0?null:n,n!==null&&(t.callback=n),cn(o,t),fn(o,u,i),u}function rh(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function F0(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var r=e.retryLane;e.retryLane=r!==0&&r<t?r:t}}function nh(e,t){F0(e,t),(e=e.alternate)&&F0(e,t)}function _O(){return null}function oh(e,t,r){var n=r!=null&&r.hydrationOptions!=null&&r.hydrationOptions.mutableSources||null;if(r=new gO(e,t,r!=null&&r.hydrate===!0),t=nr(3,null,null,t===2?7:t===1?3:0),r.current=t,t.stateNode=r,yp(t),e[Po]=r.current,vg(e.nodeType===8?e.parentNode:e),n)for(e=0;e<n.length;e++){t=n[e];var o=t._getVersion;o=o(t._source),r.mutableSourceEagerHydrationData==null?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}oh.prototype.render=function(e){ys(e,this._internalRoot,null,null)};oh.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;ys(null,e,null,function(){t[Po]=null})};function la(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function xO(e,t){if(t||(t=e?e.nodeType===9?e.documentElement:e.firstChild:null,t=!(!t||t.nodeType!==1||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new oh(e,0,t?{hydrate:!0}:void 0)}function gs(e,t,r,n,o){var i=r._reactRootContainer;if(i){var u=i._internalRoot;if(typeof o=="function"){var s=o;o=function(){var d=rh(u);s.call(d)}}ys(t,u,e,o)}else{if(i=r._reactRootContainer=xO(r,n),u=i._internalRoot,typeof o=="function"){var c=o;o=function(){var d=rh(u);c.call(d)}}R0(function(){ys(t,u,e,o)})}return rh(u)}Ty=function(e){if(e.tag===13){var t=Qt();fn(e,4,t),nh(e,4)}};Lf=function(e){if(e.tag===13){var t=Qt();fn(e,67108864,t),nh(e,67108864)}};Oy=function(e){if(e.tag===13){var t=Qt(),r=dn(e);fn(e,r,t),nh(e,r)}};by=function(e,t){return t()};bf=function(e,t,r){switch(t){case"input":if(xf(e,r),t=r.name,r.type==="radio"&&t!=null){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=Eu(n);if(!o)throw Error($(90));uy(n),xf(n,o)}}}break;case"textarea":fy(e,r);break;case"select":t=r.value,t!=null&&ho(e,!!r.multiple,t,!1)}};kf=N0;xy=function(e,t,r,n,o){var i=fe;fe|=4;try{return Ln(98,e.bind(null,t,r,n,o))}finally{fe=i,fe===0&&(Uo(),gr())}};Mf=function(){(fe&49)==0&&(cO(),yn())};Ey=function(e,t){var r=fe;fe|=2;try{return e(t)}finally{fe=r,fe===0&&(Uo(),gr())}};function U0(e,t){var r=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!la(t))throw Error($(200));return wO(e,t,null,r)}var EO={Events:[Pi,So,Eu,wy,_y,yn,{current:!1}]},ca={findFiberByHostInstance:Rn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},SO={bundleType:ca.bundleType,version:ca.version,rendererPackageName:ca.rendererPackageName,rendererConfig:ca.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:bn.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Dy(e),e===null?null:e.stateNode},findFiberByHostInstance:ca.findFiberByHostInstance||_O,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!="undefined"&&(da=__REACT_DEVTOOLS_GLOBAL_HOOK__,!da.isDisabled&&da.supportsFiber))try{lp=da.inject(SO),In=da}catch(e){}var da;er.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=EO;er.createPortal=U0;er.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error($(188)):Error($(268,Object.keys(e)));return e=Dy(t),e=e===null?null:e.stateNode,e};er.flushSync=function(e,t){var r=fe;if((r&48)!=0)return e(t);fe|=1;try{if(e)return Ln(99,e.bind(null,t))}finally{fe=r,gr()}};er.hydrate=function(e,t,r){if(!la(t))throw Error($(200));return gs(null,e,t,!0,r)};er.render=function(e,t,r){if(!la(t))throw Error($(200));return gs(null,e,t,!1,r)};er.unmountComponentAtNode=function(e){if(!la(e))throw Error($(40));return e._reactRootContainer?(R0(function(){gs(null,null,e,!1,function(){e._reactRootContainer=null,e[Po]=null})}),!0):!1};er.unstable_batchedUpdates=N0;er.unstable_createPortal=function(e,t){return U0(e,t,2<arguments.length&&arguments[2]!==void 0?arguments[2]:null)};er.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!la(r))throw Error($(200));if(e==null||e._reactInternals===void 0)throw Error($(38));return gs(e,t,r,!1,n)};er.version="17.0.1"});var ws=L((B2,Y0)=>{"use strict";function W0(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__=="undefined"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(W0)}catch(e){console.error(e)}}W0(),Y0.exports=j0()});var ah=L((V2,Ur)=>{function ih(e,t){return Ur.exports=ih=Object.setPrototypeOf||function(n,o){return n.__proto__=o,n},Ur.exports.default=Ur.exports,Ur.exports.__esModule=!0,ih(e,t)}Ur.exports=ih;Ur.exports.default=Ur.exports,Ur.exports.__esModule=!0});var B0=L((G2,Q0)=>{"use strict";var CO="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";Q0.exports=CO});var K0=L((X2,V0)=>{"use strict";var DO=B0();function $0(){}function z0(){}z0.resetWarningCache=$0;V0.exports=function(){function e(n,o,i,u,s,c){if(c!==DO){var d=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw d.name="Invariant Violation",d}}e.isRequired=e;function t(){return e}var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:z0,resetWarningCache:$0};return r.PropTypes=r,r}});var Wn=L((eF,G0)=>{G0.exports=K0()();var J2,Z2});var gw=L((hF,yw)=>{yw.exports=Array.isArray||function(e){return Object.prototype.toString.call(e)=="[object Array]"}});var Ew=L((mF,Yo)=>{var Es=gw();Yo.exports=ww;Yo.exports.parse=ph;Yo.exports.compile=HO;Yo.exports.tokensToFunction=_w;Yo.exports.tokensToRegExp=xw;var QO=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ph(e,t){for(var r=[],n=0,o=0,i="",u=t&&t.delimiter||"/",s;(s=QO.exec(e))!=null;){var c=s[0],d=s[1],p=s.index;if(i+=e.slice(o,p),o=p+c.length,d){i+=d[1];continue}var _=e[o],g=s[2],T=s[3],R=s[4],U=s[5],S=s[6],y=s[7];i&&(r.push(i),i="");var P=g!=null&&_!=null&&_!==g,M=S==="+"||S==="*",I=S==="?"||S==="*",z=s[2]||u,H=R||U;r.push({name:T||n++,prefix:g||"",delimiter:z,optional:I,repeat:M,partial:P,asterisk:!!y,pattern:H?BO(H):y?".*":"[^"+Ss(z)+"]+?"})}return o<e.length&&(i+=e.substr(o)),i&&r.push(i),r}function HO(e,t){return _w(ph(e,t),t)}function VO(e){return encodeURI(e).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function $O(e){return encodeURI(e).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function _w(e,t){for(var r=new Array(e.length),n=0;n<e.length;n++)typeof e[n]=="object"&&(r[n]=new RegExp("^(?:"+e[n].pattern+")$",hh(t)));return function(o,i){for(var u="",s=o||{},c=i||{},d=c.pretty?VO:encodeURIComponent,p=0;p<e.length;p++){var _=e[p];if(typeof _=="string"){u+=_;continue}var g=s[_.name],T;if(g==null)if(_.optional){_.partial&&(u+=_.prefix);continue}else throw new TypeError('Expected "'+_.name+'" to be defined');if(Es(g)){if(!_.repeat)throw new TypeError('Expected "'+_.name+'" to not repeat, but received `'+JSON.stringify(g)+"`");if(g.length===0){if(_.optional)continue;throw new TypeError('Expected "'+_.name+'" to not be empty')}for(var R=0;R<g.length;R++){if(T=d(g[R]),!r[p].test(T))throw new TypeError('Expected all "'+_.name+'" to match "'+_.pattern+'", but received `'+JSON.stringify(T)+"`");u+=(R===0?_.prefix:_.delimiter)+T}continue}if(T=_.asterisk?$O(g):d(g),!r[p].test(T))throw new TypeError('Expected "'+_.name+'" to match "'+_.pattern+'", but received "'+T+'"');u+=_.prefix+T}return u}}function Ss(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function BO(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function mh(e,t){return e.keys=t,e}function hh(e){return e&&e.sensitive?"":"i"}function zO(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return mh(e,t)}function KO(e,t,r){for(var n=[],o=0;o<e.length;o++)n.push(ww(e[o],t,r).source);var i=new RegExp("(?:"+n.join("|")+")",hh(r));return mh(i,t)}function GO(e,t,r){return xw(ph(e,r),t,r)}function xw(e,t,r){Es(t)||(r=t||r,t=[]),r=r||{};for(var n=r.strict,o=r.end!==!1,i="",u=0;u<e.length;u++){var s=e[u];if(typeof s=="string")i+=Ss(s);else{var c=Ss(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+c+d+")*"),s.optional?s.partial?d=c+"("+d+")?":d="(?:"+c+"("+d+"))?":d=c+"("+d+")",i+=d}}var p=Ss(r.delimiter||"/"),_=i.slice(-p.length)===p;return n||(i=(_?i.slice(0,-p.length):i)+"(?:"+p+"(?=$))?"),o?i+="$":i+=n&&_?"":"(?="+p+"|$)",mh(new RegExp("^"+i,hh(r)),t)}function ww(e,t,r){return Es(t)||(r=t||r,t=[]),r=r||{},e instanceof RegExp?zO(e,t):Es(e)?KO(e,t,r):GO(e,t,r)}});var Cw=L(ke=>{"use strict";var vt=typeof Symbol=="function"&&Symbol.for,vh=vt?Symbol.for("react.element"):60103,yh=vt?Symbol.for("react.portal"):60106,Cs=vt?Symbol.for("react.fragment"):60107,Ds=vt?Symbol.for("react.strict_mode"):60108,Ps=vt?Symbol.for("react.profiler"):60114,Ts=vt?Symbol.for("react.provider"):60109,Os=vt?Symbol.for("react.context"):60110,gh=vt?Symbol.for("react.async_mode"):60111,bs=vt?Symbol.for("react.concurrent_mode"):60111,ks=vt?Symbol.for("react.forward_ref"):60112,Ms=vt?Symbol.for("react.suspense"):60113,XO=vt?Symbol.for("react.suspense_list"):60120,Ns=vt?Symbol.for("react.memo"):60115,Rs=vt?Symbol.for("react.lazy"):60116,JO=vt?Symbol.for("react.block"):60121,ZO=vt?Symbol.for("react.fundamental"):60117,eb=vt?Symbol.for("react.responder"):60118,tb=vt?Symbol.for("react.scope"):60119;function Vt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case vh:switch(e=e.type,e){case gh:case bs:case Cs:case Ps:case Ds:case Ms:return e;default:switch(e=e&&e.$$typeof,e){case Os:case ks:case Rs:case Ns:case Ts:return e;default:return t}}case yh:return t}}}function Sw(e){return Vt(e)===bs}ke.AsyncMode=gh;ke.ConcurrentMode=bs;ke.ContextConsumer=Os;ke.ContextProvider=Ts;ke.Element=vh;ke.ForwardRef=ks;ke.Fragment=Cs;ke.Lazy=Rs;ke.Memo=Ns;ke.Portal=yh;ke.Profiler=Ps;ke.StrictMode=Ds;ke.Suspense=Ms;ke.isAsyncMode=function(e){return Sw(e)||Vt(e)===gh};ke.isConcurrentMode=Sw;ke.isContextConsumer=function(e){return Vt(e)===Os};ke.isContextProvider=function(e){return Vt(e)===Ts};ke.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===vh};ke.isForwardRef=function(e){return Vt(e)===ks};ke.isFragment=function(e){return Vt(e)===Cs};ke.isLazy=function(e){return Vt(e)===Rs};ke.isMemo=function(e){return Vt(e)===Ns};ke.isPortal=function(e){return Vt(e)===yh};ke.isProfiler=function(e){return Vt(e)===Ps};ke.isStrictMode=function(e){return Vt(e)===Ds};ke.isSuspense=function(e){return Vt(e)===Ms};ke.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===Cs||e===bs||e===Ps||e===Ds||e===Ms||e===XO||typeof e=="object"&&e!==null&&(e.$$typeof===Rs||e.$$typeof===Ns||e.$$typeof===Ts||e.$$typeof===Os||e.$$typeof===ks||e.$$typeof===ZO||e.$$typeof===eb||e.$$typeof===tb||e.$$typeof===JO)};ke.typeOf=Vt});var wh=L((yF,Dw)=>{"use strict";Dw.exports=Cw()});var Nw=L((xF,Pw)=>{"use strict";var _h=wh(),rb={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},nb={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},ob={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Tw={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},xh={};xh[_h.ForwardRef]=ob;xh[_h.Memo]=Tw;function Ow(e){return _h.isMemo(e)?Tw:xh[e.$$typeof]||rb}var ib=Object.defineProperty,ab=Object.getOwnPropertyNames,bw=Object.getOwnPropertySymbols,ub=Object.getOwnPropertyDescriptor,sb=Object.getPrototypeOf,kw=Object.prototype;function Mw(e,t,r){if(typeof t!="string"){if(kw){var n=sb(t);n&&n!==kw&&Mw(e,n,r)}var o=ab(t);bw&&(o=o.concat(bw(t)));for(var i=Ow(e),u=Ow(t),s=0;s<o.length;++s){var c=o[s];if(!nb[c]&&!(r&&r[c])&&!(u&&u[c])&&!(i&&i[c])){var d=ub(t,c);try{ib(e,c,d)}catch(p){}}}}return e}Pw.exports=Mw});var Qw=L((VF,Hw)=>{Hw.exports={ReactQueryDevtools:function(){return null},ReactQueryDevtoolsPanel:function(){return null}}});var w_=L((Dj,v_)=>{"use strict";function Fb(e){return e&&typeof e=="object"&&"default"in e?e.default:e}var y_=_e(),Ub=Fb(y_);function g_(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function jb(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var Yb=!!(typeof window!="undefined"&&window.document&&window.document.createElement);function Wb(e,t,r){if(typeof e!="function")throw new Error("Expected reducePropsToState to be a function.");if(typeof t!="function")throw new Error("Expected handleStateChangeOnClient to be a function.");if(typeof r!="undefined"&&typeof r!="function")throw new Error("Expected mapStateOnServer to either be undefined or a function.");function n(o){return o.displayName||o.name||"Component"}return function(i){if(typeof i!="function")throw new Error("Expected WrappedComponent to be a React component.");var u=[],s;function c(){s=e(u.map(function(p){return p.props})),d.canUseDOM?t(s):r&&(s=r(s))}var d=function(p){jb(_,p);function _(){return p.apply(this,arguments)||this}_.peek=function(){return s},_.rewind=function(){if(_.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var R=s;return s=void 0,u=[],R};var g=_.prototype;return g.UNSAFE_componentWillMount=function(){u.push(this),c()},g.componentDidUpdate=function(){c()},g.componentWillUnmount=function(){var R=u.indexOf(this);u.splice(R,1),c()},g.render=function(){return Ub.createElement(i,this.props)},_}(y_.PureComponent);return g_(d,"displayName","SideEffect("+n(i)+")"),g_(d,"canUseDOM",Yb),d}}v_.exports=Wb});var x_=L((Pj,__)=>{var Hb=typeof Element!="undefined",Qb=typeof Map=="function",Bb=typeof Set=="function",Vb=typeof ArrayBuffer=="function"&&!!ArrayBuffer.isView;function Qs(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var r,n,o;if(Array.isArray(e)){if(r=e.length,r!=t.length)return!1;for(n=r;n--!=0;)if(!Qs(e[n],t[n]))return!1;return!0}var i;if(Qb&&e instanceof Map&&t instanceof Map){if(e.size!==t.size)return!1;for(i=e.entries();!(n=i.next()).done;)if(!t.has(n.value[0]))return!1;for(i=e.entries();!(n=i.next()).done;)if(!Qs(n.value[1],t.get(n.value[0])))return!1;return!0}if(Bb&&e instanceof Set&&t instanceof Set){if(e.size!==t.size)return!1;for(i=e.entries();!(n=i.next()).done;)if(!t.has(n.value[0]))return!1;return!0}if(Vb&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(t)){if(r=e.length,r!=t.length)return!1;for(n=r;n--!=0;)if(e[n]!==t[n])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(o=Object.keys(e),r=o.length,r!==Object.keys(t).length)return!1;for(n=r;n--!=0;)if(!Object.prototype.hasOwnProperty.call(t,o[n]))return!1;if(Hb&&e instanceof Element)return!1;for(n=r;n--!=0;)if(!((o[n]==="_owner"||o[n]==="__v"||o[n]==="__o")&&e.$$typeof)&&!Qs(e[o[n]],t[o[n]]))return!1;return!0}return e!==e&&t!==t}__.exports=function(t,r){try{return Qs(t,r)}catch(n){if((n.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw n}}});var sx=L((wY,Gs)=>{(function(){"use strict";var e={}.hasOwnProperty;function t(){for(var r=[],n=0;n<arguments.length;n++){var o=arguments[n];if(!!o){var i=typeof o;if(i==="string"||i==="number")r.push(o);else if(Array.isArray(o)&&o.length){var u=t.apply(null,o);u&&r.push(u)}else if(i==="object")for(var s in o)e.call(o,s)&&o[s]&&r.push(s)}}return r.join(" ")}typeof Gs!="undefined"&&Gs.exports?(t.default=t,Gs.exports=t):typeof define=="function"&&typeof define.amd=="object"&&define.amd?define("classnames",[],function(){return t}):window.classNames=t})()});var X=L((Xs,lx)=>{"use strict";Object.defineProperty(Xs,"__esModule",{value:!0});Xs.default=Dk;function Dk(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}lx.exports=Xs.default});var dx=L((Js,cx)=>{"use strict";Object.defineProperty(Js,"__esModule",{value:!0});Js.default=Pk;var Ok=Tk(X());function Tk(e){return e&&e.__esModule?e:{default:e}}function Pk(e){return(0,Ok.default)(1,arguments),e instanceof Date||typeof e=="object"&&Object.prototype.toString.call(e)==="[object Date]"}cx.exports=Js.default});var ue=L((Zs,fx)=>{"use strict";Object.defineProperty(Zs,"__esModule",{value:!0});Zs.default=bk;var Mk=kk(X());function kk(e){return e&&e.__esModule?e:{default:e}}function bk(e){(0,Mk.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||typeof e=="object"&&t==="[object Date]"?new Date(e.getTime()):typeof e=="number"||t==="[object Number]"?new Date(e):((typeof e=="string"||t==="[object String]")&&typeof console!="undefined"&&(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn(new Error().stack)),new Date(NaN))}fx.exports=Zs.default});var Yh=L((el,px)=>{"use strict";Object.defineProperty(el,"__esModule",{value:!0});el.default=Nk;var Rk=hx(ue()),qk=hx(X());function hx(e){return e&&e.__esModule?e:{default:e}}function Nk(e){(0,qk.default)(1,arguments);var t=(0,Rk.default)(e);return!isNaN(t)}px.exports=el.default});var vx=L((tl,mx)=>{"use strict";Object.defineProperty(tl,"__esModule",{value:!0});tl.default=Ik;var rl={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Ik(e,t,r){r=r||{};var n;return typeof rl[e]=="string"?n=rl[e]:t===1?n=rl[e].one:n=rl[e].other.replace("{{count}}",t),r.addSuffix?r.comparison>0?"in "+n:n+" ago":n}mx.exports=tl.default});var gx=L((nl,yx)=>{"use strict";Object.defineProperty(nl,"__esModule",{value:!0});nl.default=Lk;function Lk(e){return function(t){var r=t||{},n=r.width?String(r.width):e.defaultWidth,o=e.formats[n]||e.formats[e.defaultWidth];return o}}yx.exports=nl.default});var _x=L((Da,wx)=>{"use strict";Object.defineProperty(Da,"__esModule",{value:!0});Da.default=void 0;var Wh=Ak(gx());function Ak(e){return e&&e.__esModule?e:{default:e}}var Fk={full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},Uk={full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},jk={full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},Yk={date:(0,Wh.default)({formats:Fk,defaultWidth:"full"}),time:(0,Wh.default)({formats:Uk,defaultWidth:"full"}),dateTime:(0,Wh.default)({formats:jk,defaultWidth:"full"})},Wk=Yk;Da.default=Wk;wx.exports=Da.default});var Ex=L((ol,xx)=>{"use strict";Object.defineProperty(ol,"__esModule",{value:!0});ol.default=Hk;var Qk={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Hk(e,t,r,n){return Qk[e]}xx.exports=ol.default});var Cx=L((il,Sx)=>{"use strict";Object.defineProperty(il,"__esModule",{value:!0});il.default=Bk;function Bk(e){return function(t,r){var n=r||{},o=n.context?String(n.context):"standalone",i;if(o==="formatting"&&e.formattingValues){var u=e.defaultFormattingWidth||e.defaultWidth,s=n.width?String(n.width):u;i=e.formattingValues[s]||e.formattingValues[u]}else{var c=e.defaultWidth,d=n.width?String(n.width):e.defaultWidth;i=e.values[d]||e.values[c]}var p=e.argumentCallback?e.argumentCallback(t):t;return i[p]}}Sx.exports=il.default});var Px=L((Pa,Dx)=>{"use strict";Object.defineProperty(Pa,"__esModule",{value:!0});Pa.default=void 0;var Ta=Vk(Cx());function Vk(e){return e&&e.__esModule?e:{default:e}}var $k={narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},zk={narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},Kk={narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},Gk={narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},Xk={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},Jk={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}};function Zk(e,t){var r=Number(e),n=r%100;if(n>20||n<10)switch(n%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"}var eM={ordinalNumber:Zk,era:(0,Ta.default)({values:$k,defaultWidth:"wide"}),quarter:(0,Ta.default)({values:zk,defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:(0,Ta.default)({values:Kk,defaultWidth:"wide"}),day:(0,Ta.default)({values:Gk,defaultWidth:"wide"}),dayPeriod:(0,Ta.default)({values:Xk,defaultWidth:"wide",formattingValues:Jk,defaultFormattingWidth:"wide"})},tM=eM;Pa.default=tM;Dx.exports=Pa.default});var Ox=L((al,Tx)=>{"use strict";Object.defineProperty(al,"__esModule",{value:!0});al.default=rM;function rM(e){return function(t,r){var n=String(t),o=r||{},i=n.match(e.matchPattern);if(!i)return null;var u=i[0],s=n.match(e.parsePattern);if(!s)return null;var c=e.valueCallback?e.valueCallback(s[0]):s[0];return c=o.valueCallback?o.valueCallback(c):c,{value:c,rest:n.slice(u.length)}}}Tx.exports=al.default});var kx=L((ul,bx)=>{"use strict";Object.defineProperty(ul,"__esModule",{value:!0});ul.default=nM;function nM(e){return function(t,r){var n=String(t),o=r||{},i=o.width,u=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],s=n.match(u);if(!s)return null;var c=s[0],d=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth],p;return Object.prototype.toString.call(d)==="[object Array]"?p=iM(d,function(_){return _.test(c)}):p=oM(d,function(_){return _.test(c)}),p=e.valueCallback?e.valueCallback(p):p,p=o.valueCallback?o.valueCallback(p):p,{value:p,rest:n.slice(c.length)}}}function oM(e,t){for(var r in e)if(e.hasOwnProperty(r)&&t(e[r]))return r}function iM(e,t){for(var r=0;r<e.length;r++)if(t(e[r]))return r}bx.exports=ul.default});var Rx=L((Oa,Mx)=>{"use strict";Object.defineProperty(Oa,"__esModule",{value:!0});Oa.default=void 0;var aM=Nx(Ox()),ba=Nx(kx());function Nx(e){return e&&e.__esModule?e:{default:e}}var uM=/^(\d+)(th|st|nd|rd)?/i,sM=/\d+/i,lM={narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},cM={any:[/^b/i,/^(a|c)/i]},dM={narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},fM={any:[/1/i,/2/i,/3/i,/4/i]},pM={narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},hM={narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},mM={narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},vM={narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},yM={narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},gM={any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},wM={ordinalNumber:(0,aM.default)({matchPattern:uM,parsePattern:sM,valueCallback:function(e){return parseInt(e,10)}}),era:(0,ba.default)({matchPatterns:lM,defaultMatchWidth:"wide",parsePatterns:cM,defaultParseWidth:"any"}),quarter:(0,ba.default)({matchPatterns:dM,defaultMatchWidth:"wide",parsePatterns:fM,defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:(0,ba.default)({matchPatterns:pM,defaultMatchWidth:"wide",parsePatterns:hM,defaultParseWidth:"any"}),day:(0,ba.default)({matchPatterns:mM,defaultMatchWidth:"wide",parsePatterns:vM,defaultParseWidth:"any"}),dayPeriod:(0,ba.default)({matchPatterns:yM,defaultMatchWidth:"any",parsePatterns:gM,defaultParseWidth:"any"})},_M=wM;Oa.default=_M;Mx.exports=Oa.default});var Hh=L((ka,qx)=>{"use strict";Object.defineProperty(ka,"__esModule",{value:!0});ka.default=void 0;var xM=Ma(vx()),EM=Ma(_x()),SM=Ma(Ex()),CM=Ma(Px()),DM=Ma(Rx());function Ma(e){return e&&e.__esModule?e:{default:e}}var PM={code:"en-US",formatDistance:xM.default,formatLong:EM.default,formatRelative:SM.default,localize:CM.default,match:DM.default,options:{weekStartsOn:0,firstWeekContainsDate:1}},TM=PM;ka.default=TM;qx.exports=ka.default});var Se=L((sl,Ix)=>{"use strict";Object.defineProperty(sl,"__esModule",{value:!0});sl.default=OM;function OM(e){if(e===null||e===!0||e===!1)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}Ix.exports=sl.default});var cl=L((ll,Lx)=>{"use strict";Object.defineProperty(ll,"__esModule",{value:!0});ll.default=bM;var kM=Qh(Se()),MM=Qh(ue()),NM=Qh(X());function Qh(e){return e&&e.__esModule?e:{default:e}}function bM(e,t){(0,NM.default)(2,arguments);var r=(0,MM.default)(e).getTime(),n=(0,kM.default)(t);return new Date(r+n)}Lx.exports=ll.default});var Vh=L((dl,Ax)=>{"use strict";Object.defineProperty(dl,"__esModule",{value:!0});dl.default=RM;var qM=Bh(Se()),IM=Bh(cl()),LM=Bh(X());function Bh(e){return e&&e.__esModule?e:{default:e}}function RM(e,t){(0,LM.default)(2,arguments);var r=(0,qM.default)(t);return(0,IM.default)(e,-r)}Ax.exports=dl.default});var $h=L((fl,Fx)=>{"use strict";Object.defineProperty(fl,"__esModule",{value:!0});fl.default=AM;function AM(e,t){for(var r=e<0?"-":"",n=Math.abs(e).toString();n.length<t;)n="0"+n;return r+n}Fx.exports=fl.default});var jx=L((Na,Ux)=>{"use strict";Object.defineProperty(Na,"__esModule",{value:!0});Na.default=void 0;var xn=FM($h());function FM(e){return e&&e.__esModule?e:{default:e}}var UM={y:function(e,t){var r=e.getUTCFullYear(),n=r>0?r:1-r;return(0,xn.default)(t==="yy"?n%100:n,t.length)},M:function(e,t){var r=e.getUTCMonth();return t==="M"?String(r+1):(0,xn.default)(r+1,2)},d:function(e,t){return(0,xn.default)(e.getUTCDate(),t.length)},a:function(e,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.toUpperCase();case"aaa":return r;case"aaaaa":return r[0];case"aaaa":default:return r==="am"?"a.m.":"p.m."}},h:function(e,t){return(0,xn.default)(e.getUTCHours()%12||12,t.length)},H:function(e,t){return(0,xn.default)(e.getUTCHours(),t.length)},m:function(e,t){return(0,xn.default)(e.getUTCMinutes(),t.length)},s:function(e,t){return(0,xn.default)(e.getUTCSeconds(),t.length)},S:function(e,t){var r=t.length,n=e.getUTCMilliseconds(),o=Math.floor(n*Math.pow(10,r-3));return(0,xn.default)(o,t.length)}},jM=UM;Na.default=jM;Ux.exports=Na.default});var Hx=L((pl,Yx)=>{"use strict";Object.defineProperty(pl,"__esModule",{value:!0});pl.default=YM;var WM=Wx(ue()),HM=Wx(X());function Wx(e){return e&&e.__esModule?e:{default:e}}var QM=864e5;function YM(e){(0,HM.default)(1,arguments);var t=(0,WM.default)(e),r=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var n=t.getTime(),o=r-n;return Math.floor(o/QM)+1}Yx.exports=pl.default});var Ra=L((hl,Qx)=>{"use strict";Object.defineProperty(hl,"__esModule",{value:!0});hl.default=BM;var VM=Bx(ue()),$M=Bx(X());function Bx(e){return e&&e.__esModule?e:{default:e}}function BM(e){(0,$M.default)(1,arguments);var t=1,r=(0,VM.default)(e),n=r.getUTCDay(),o=(n<t?7:0)+n-t;return r.setUTCDate(r.getUTCDate()-o),r.setUTCHours(0,0,0,0),r}Qx.exports=hl.default});var Kh=L((ml,Vx)=>{"use strict";Object.defineProperty(ml,"__esModule",{value:!0});ml.default=zM;var KM=zh(ue()),$x=zh(Ra()),GM=zh(X());function zh(e){return e&&e.__esModule?e:{default:e}}function zM(e){(0,GM.default)(1,arguments);var t=(0,KM.default)(e),r=t.getUTCFullYear(),n=new Date(0);n.setUTCFullYear(r+1,0,4),n.setUTCHours(0,0,0,0);var o=(0,$x.default)(n),i=new Date(0);i.setUTCFullYear(r,0,4),i.setUTCHours(0,0,0,0);var u=(0,$x.default)(i);return t.getTime()>=o.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}Vx.exports=ml.default});var Kx=L((vl,zx)=>{"use strict";Object.defineProperty(vl,"__esModule",{value:!0});vl.default=XM;var JM=Gh(Kh()),ZM=Gh(Ra()),eN=Gh(X());function Gh(e){return e&&e.__esModule?e:{default:e}}function XM(e){(0,eN.default)(1,arguments);var t=(0,JM.default)(e),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var n=(0,ZM.default)(r);return n}zx.exports=vl.default});var Xh=L((yl,Gx)=>{"use strict";Object.defineProperty(yl,"__esModule",{value:!0});yl.default=tN;var rN=gl(ue()),nN=gl(Ra()),oN=gl(Kx()),iN=gl(X());function gl(e){return e&&e.__esModule?e:{default:e}}var aN=6048e5;function tN(e){(0,iN.default)(1,arguments);var t=(0,rN.default)(e),r=(0,nN.default)(t).getTime()-(0,oN.default)(t).getTime();return Math.round(r/aN)+1}Gx.exports=yl.default});var qa=L((wl,Xx)=>{"use strict";Object.defineProperty(wl,"__esModule",{value:!0});wl.default=uN;var Jx=Jh(Se()),sN=Jh(ue()),lN=Jh(X());function Jh(e){return e&&e.__esModule?e:{default:e}}function uN(e,t){(0,lN.default)(1,arguments);var r=t||{},n=r.locale,o=n&&n.options&&n.options.weekStartsOn,i=o==null?0:(0,Jx.default)(o),u=r.weekStartsOn==null?i:(0,Jx.default)(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=(0,sN.default)(e),c=s.getUTCDay(),d=(c<u?7:0)+c-u;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}Xx.exports=wl.default});var El=L((_l,Zx)=>{"use strict";Object.defineProperty(_l,"__esModule",{value:!0});_l.default=cN;var eE=xl(Se()),dN=xl(ue()),tE=xl(qa()),fN=xl(X());function xl(e){return e&&e.__esModule?e:{default:e}}function cN(e,t){(0,fN.default)(1,arguments);var r=(0,dN.default)(e,t),n=r.getUTCFullYear(),o=t||{},i=o.locale,u=i&&i.options&&i.options.firstWeekContainsDate,s=u==null?1:(0,eE.default)(u),c=o.firstWeekContainsDate==null?s:(0,eE.default)(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(n+1,0,c),d.setUTCHours(0,0,0,0);var p=(0,tE.default)(d,t),_=new Date(0);_.setUTCFullYear(n,0,c),_.setUTCHours(0,0,0,0);var g=(0,tE.default)(_,t);return r.getTime()>=p.getTime()?n+1:r.getTime()>=g.getTime()?n:n-1}Zx.exports=_l.default});var oE=L((Sl,rE)=>{"use strict";Object.defineProperty(Sl,"__esModule",{value:!0});Sl.default=pN;var nE=Cl(Se()),hN=Cl(El()),mN=Cl(qa()),vN=Cl(X());function Cl(e){return e&&e.__esModule?e:{default:e}}function pN(e,t){(0,vN.default)(1,arguments);var r=t||{},n=r.locale,o=n&&n.options&&n.options.firstWeekContainsDate,i=o==null?1:(0,nE.default)(o),u=r.firstWeekContainsDate==null?i:(0,nE.default)(r.firstWeekContainsDate),s=(0,hN.default)(e,t),c=new Date(0);c.setUTCFullYear(s,0,u),c.setUTCHours(0,0,0,0);var d=(0,mN.default)(c,t);return d}rE.exports=Sl.default});var Zh=L((Dl,iE)=>{"use strict";Object.defineProperty(Dl,"__esModule",{value:!0});Dl.default=yN;var gN=Pl(ue()),wN=Pl(qa()),_N=Pl(oE()),xN=Pl(X());function Pl(e){return e&&e.__esModule?e:{default:e}}var EN=6048e5;function yN(e,t){(0,xN.default)(1,arguments);var r=(0,gN.default)(e),n=(0,wN.default)(r,t).getTime()-(0,_N.default)(r,t).getTime();return Math.round(n/EN)+1}iE.exports=Dl.default});var lE=L((Ia,aE)=>{"use strict";Object.defineProperty(Ia,"__esModule",{value:!0});Ia.default=void 0;var En=$n(jx()),SN=$n(Hx()),CN=$n(Xh()),DN=$n(Kh()),PN=$n(Zh()),TN=$n(El()),Xe=$n($h());function $n(e){return e&&e.__esModule?e:{default:e}}var ti={am:"am",pm:"pm",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},ON={G:function(e,t,r){var n=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return r.era(n,{width:"abbreviated"});case"GGGGG":return r.era(n,{width:"narrow"});case"GGGG":default:return r.era(n,{width:"wide"})}},y:function(e,t,r){if(t==="yo"){var n=e.getUTCFullYear(),o=n>0?n:1-n;return r.ordinalNumber(o,{unit:"year"})}return En.default.y(e,t)},Y:function(e,t,r,n){var o=(0,TN.default)(e,n),i=o>0?o:1-o;if(t==="YY"){var u=i%100;return(0,Xe.default)(u,2)}return t==="Yo"?r.ordinalNumber(i,{unit:"year"}):(0,Xe.default)(i,t.length)},R:function(e,t){var r=(0,DN.default)(e);return(0,Xe.default)(r,t.length)},u:function(e,t){var r=e.getUTCFullYear();return(0,Xe.default)(r,t.length)},Q:function(e,t,r){var n=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(n);case"QQ":return(0,Xe.default)(n,2);case"Qo":return r.ordinalNumber(n,{unit:"quarter"});case"QQQ":return r.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(n,{width:"narrow",context:"formatting"});case"QQQQ":default:return r.quarter(n,{width:"wide",context:"formatting"})}},q:function(e,t,r){var n=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(n);case"qq":return(0,Xe.default)(n,2);case"qo":return r.ordinalNumber(n,{unit:"quarter"});case"qqq":return r.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(n,{width:"narrow",context:"standalone"});case"qqqq":default:return r.quarter(n,{width:"wide",context:"standalone"})}},M:function(e,t,r){var n=e.getUTCMonth();switch(t){case"M":case"MM":return En.default.M(e,t);case"Mo":return r.ordinalNumber(n+1,{unit:"month"});case"MMM":return r.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(n,{width:"narrow",context:"formatting"});case"MMMM":default:return r.month(n,{width:"wide",context:"formatting"})}},L:function(e,t,r){var n=e.getUTCMonth();switch(t){case"L":return String(n+1);case"LL":return(0,Xe.default)(n+1,2);case"Lo":return r.ordinalNumber(n+1,{unit:"month"});case"LLL":return r.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(n,{width:"narrow",context:"standalone"});case"LLLL":default:return r.month(n,{width:"wide",context:"standalone"})}},w:function(e,t,r,n){var o=(0,PN.default)(e,n);return t==="wo"?r.ordinalNumber(o,{unit:"week"}):(0,Xe.default)(o,t.length)},I:function(e,t,r){var n=(0,CN.default)(e);return t==="Io"?r.ordinalNumber(n,{unit:"week"}):(0,Xe.default)(n,t.length)},d:function(e,t,r){return t==="do"?r.ordinalNumber(e.getUTCDate(),{unit:"date"}):En.default.d(e,t)},D:function(e,t,r){var n=(0,SN.default)(e);return t==="Do"?r.ordinalNumber(n,{unit:"dayOfYear"}):(0,Xe.default)(n,t.length)},E:function(e,t,r){var n=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return r.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(n,{width:"short",context:"formatting"});case"EEEE":default:return r.day(n,{width:"wide",context:"formatting"})}},e:function(e,t,r,n){var o=e.getUTCDay(),i=(o-n.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return(0,Xe.default)(i,2);case"eo":return r.ordinalNumber(i,{unit:"day"});case"eee":return r.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(o,{width:"short",context:"formatting"});case"eeee":default:return r.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,r,n){var o=e.getUTCDay(),i=(o-n.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return(0,Xe.default)(i,t.length);case"co":return r.ordinalNumber(i,{unit:"day"});case"ccc":return r.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(o,{width:"narrow",context:"standalone"});case"cccccc":return r.day(o,{width:"short",context:"standalone"});case"cccc":default:return r.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,r){var n=e.getUTCDay(),o=n===0?7:n;switch(t){case"i":return String(o);case"ii":return(0,Xe.default)(o,t.length);case"io":return r.ordinalNumber(o,{unit:"day"});case"iii":return r.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(n,{width:"short",context:"formatting"});case"iiii":default:return r.day(n,{width:"wide",context:"formatting"})}},a:function(e,t,r){var n=e.getUTCHours(),o=n/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"aaaa":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,r){var n=e.getUTCHours(),o;switch(n===12?o=ti.noon:n===0?o=ti.midnight:o=n/12>=1?"pm":"am",t){case"b":case"bb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"bbbb":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,r){var n=e.getUTCHours(),o;switch(n>=17?o=ti.evening:n>=12?o=ti.afternoon:n>=4?o=ti.morning:o=ti.night,t){case"B":case"BB":case"BBB":return r.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(o,{width:"narrow",context:"formatting"});case"BBBB":default:return r.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,r){if(t==="ho"){var n=e.getUTCHours()%12;return n===0&&(n=12),r.ordinalNumber(n,{unit:"hour"})}return En.default.h(e,t)},H:function(e,t,r){return t==="Ho"?r.ordinalNumber(e.getUTCHours(),{unit:"hour"}):En.default.H(e,t)},K:function(e,t,r){var n=e.getUTCHours()%12;return t==="Ko"?r.ordinalNumber(n,{unit:"hour"}):(0,Xe.default)(n,t.length)},k:function(e,t,r){var n=e.getUTCHours();return n===0&&(n=24),t==="ko"?r.ordinalNumber(n,{unit:"hour"}):(0,Xe.default)(n,t.length)},m:function(e,t,r){return t==="mo"?r.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):En.default.m(e,t)},s:function(e,t,r){return t==="so"?r.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):En.default.s(e,t)},S:function(e,t){return En.default.S(e,t)},X:function(e,t,r,n){var o=n._originalDate||e,i=o.getTimezoneOffset();if(i===0)return"Z";switch(t){case"X":return sE(i);case"XXXX":case"XX":return zn(i);case"XXXXX":case"XXX":default:return zn(i,":")}},x:function(e,t,r,n){var o=n._originalDate||e,i=o.getTimezoneOffset();switch(t){case"x":return sE(i);case"xxxx":case"xx":return zn(i);case"xxxxx":case"xxx":default:return zn(i,":")}},O:function(e,t,r,n){var o=n._originalDate||e,i=o.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+uE(i,":");case"OOOO":default:return"GMT"+zn(i,":")}},z:function(e,t,r,n){var o=n._originalDate||e,i=o.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+uE(i,":");case"zzzz":default:return"GMT"+zn(i,":")}},t:function(e,t,r,n){var o=n._originalDate||e,i=Math.floor(o.getTime()/1e3);return(0,Xe.default)(i,t.length)},T:function(e,t,r,n){var o=n._originalDate||e,i=o.getTime();return(0,Xe.default)(i,t.length)}};function uE(e,t){var r=e>0?"-":"+",n=Math.abs(e),o=Math.floor(n/60),i=n%60;if(i===0)return r+String(o);var u=t||"";return r+String(o)+u+(0,Xe.default)(i,2)}function sE(e,t){if(e%60==0){var r=e>0?"-":"+";return r+(0,Xe.default)(Math.abs(e)/60,2)}return zn(e,t)}function zn(e,t){var r=t||"",n=e>0?"-":"+",o=Math.abs(e),i=(0,Xe.default)(Math.floor(o/60),2),u=(0,Xe.default)(o%60,2);return n+i+r+u}var bN=ON;Ia.default=bN;aE.exports=Ia.default});var em=L((La,cE)=>{"use strict";Object.defineProperty(La,"__esModule",{value:!0});La.default=void 0;function dE(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function fE(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}function kN(e,t){var r=e.match(/(P+)(p+)?/),n=r[1],o=r[2];if(!o)return dE(e,t);var i;switch(n){case"P":i=t.dateTime({width:"short"});break;case"PP":i=t.dateTime({width:"medium"});break;case"PPP":i=t.dateTime({width:"long"});break;case"PPPP":default:i=t.dateTime({width:"full"});break}return i.replace("{{date}}",dE(n,t)).replace("{{time}}",fE(o,t))}var MN={p:fE,P:kN},NN=MN;La.default=NN;cE.exports=La.default});var Aa=L((Tl,pE)=>{"use strict";Object.defineProperty(Tl,"__esModule",{value:!0});Tl.default=RN;var Ol=6e4;function hE(e){return e.getTime()%Ol}function RN(e){var t=new Date(e.getTime()),r=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var n=r>0,o=n?(Ol+hE(t))%Ol:hE(t);return r*Ol+o}pE.exports=Tl.default});var tm=L(Fa=>{"use strict";Object.defineProperty(Fa,"__esModule",{value:!0});Fa.isProtectedDayOfYearToken=qN;Fa.isProtectedWeekYearToken=IN;Fa.throwProtectedError=LN;var AN=["D","DD"],FN=["YY","YYYY"];function qN(e){return AN.indexOf(e)!==-1}function IN(e){return FN.indexOf(e)!==-1}function LN(e,t,r){if(e==="YYYY")throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if(e==="YY")throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if(e==="D")throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"));if(e==="DD")throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"))}});var vE=L((bl,mE)=>{"use strict";Object.defineProperty(bl,"__esModule",{value:!0});bl.default=UN;var jN=Hr(Yh()),YN=Hr(Hh()),WN=Hr(Vh()),HN=Hr(ue()),QN=Hr(lE()),BN=Hr(em()),VN=Hr(Aa()),kl=tm(),Ml=Hr(Se()),$N=Hr(X());function Hr(e){return e&&e.__esModule?e:{default:e}}var zN=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,KN=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,GN=/^'([^]*?)'?$/,XN=/''/g,JN=/[a-zA-Z]/;function UN(e,t,r){(0,$N.default)(2,arguments);var n=String(t),o=r||{},i=o.locale||YN.default,u=i.options&&i.options.firstWeekContainsDate,s=u==null?1:(0,Ml.default)(u),c=o.firstWeekContainsDate==null?s:(0,Ml.default)(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=i.options&&i.options.weekStartsOn,p=d==null?0:(0,Ml.default)(d),_=o.weekStartsOn==null?p:(0,Ml.default)(o.weekStartsOn);if(!(_>=0&&_<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var g=(0,HN.default)(e);if(!(0,jN.default)(g))throw new RangeError("Invalid time value");var T=(0,VN.default)(g),R=(0,WN.default)(g,T),U={firstWeekContainsDate:c,weekStartsOn:_,locale:i,_originalDate:g},S=n.match(KN).map(function(y){var P=y[0];if(P==="p"||P==="P"){var M=BN.default[P];return M(y,i.formatLong,U)}return y}).join("").match(zN).map(function(y){if(y==="''")return"'";var P=y[0];if(P==="'")return ZN(y);var M=QN.default[P];if(M)return!o.useAdditionalWeekYearTokens&&(0,kl.isProtectedWeekYearToken)(y)&&(0,kl.throwProtectedError)(y,t,e),!o.useAdditionalDayOfYearTokens&&(0,kl.isProtectedDayOfYearToken)(y)&&(0,kl.throwProtectedError)(y,t,e),M(R,y,i.localize,U);if(P.match(JN))throw new RangeError("Format string contains an unescaped latin alphabet character `"+P+"`");return y}).join("");return S}function ZN(e){return e.match(GN)[1].replace(XN,"'")}mE.exports=bl.default});var nm=L((Nl,yE)=>{"use strict";Object.defineProperty(Nl,"__esModule",{value:!0});Nl.default=eR;var tR=rm(Se()),rR=rm(cl()),nR=rm(X());function rm(e){return e&&e.__esModule?e:{default:e}}var oR=6e4;function eR(e,t){(0,nR.default)(2,arguments);var r=(0,tR.default)(t);return(0,rR.default)(e,r*oR)}yE.exports=Nl.default});var im=L((Rl,gE)=>{"use strict";Object.defineProperty(Rl,"__esModule",{value:!0});Rl.default=iR;var aR=om(Se()),uR=om(cl()),sR=om(X());function om(e){return e&&e.__esModule?e:{default:e}}var lR=36e5;function iR(e,t){(0,sR.default)(2,arguments);var r=(0,aR.default)(t);return(0,uR.default)(e,r*lR)}gE.exports=Rl.default});var Il=L((ql,wE)=>{"use strict";Object.defineProperty(ql,"__esModule",{value:!0});ql.default=cR;var dR=am(Se()),fR=am(ue()),pR=am(X());function am(e){return e&&e.__esModule?e:{default:e}}function cR(e,t){(0,pR.default)(2,arguments);var r=(0,fR.default)(e),n=(0,dR.default)(t);return isNaN(n)?new Date(NaN):(n&&r.setDate(r.getDate()+n),r)}wE.exports=ql.default});var sm=L((Ll,_E)=>{"use strict";Object.defineProperty(Ll,"__esModule",{value:!0});Ll.default=hR;var mR=um(Se()),vR=um(Il()),yR=um(X());function um(e){return e&&e.__esModule?e:{default:e}}function hR(e,t){(0,yR.default)(2,arguments);var r=(0,mR.default)(t),n=r*7;return(0,vR.default)(e,n)}_E.exports=Ll.default});var Fl=L((Al,xE)=>{"use strict";Object.defineProperty(Al,"__esModule",{value:!0});Al.default=gR;var wR=lm(Se()),_R=lm(ue()),xR=lm(X());function lm(e){return e&&e.__esModule?e:{default:e}}function gR(e,t){(0,xR.default)(2,arguments);var r=(0,_R.default)(e),n=(0,wR.default)(t);if(isNaN(n))return new Date(NaN);if(!n)return r;var o=r.getDate(),i=new Date(r.getTime());i.setMonth(r.getMonth()+n+1,0);var u=i.getDate();return o>=u?i:(r.setFullYear(i.getFullYear(),i.getMonth(),o),r)}xE.exports=Al.default});var dm=L((Ul,EE)=>{"use strict";Object.defineProperty(Ul,"__esModule",{value:!0});Ul.default=ER;var SR=cm(Se()),CR=cm(Fl()),DR=cm(X());function cm(e){return e&&e.__esModule?e:{default:e}}function ER(e,t){(0,DR.default)(2,arguments);var r=(0,SR.default)(t);return(0,CR.default)(e,r*12)}EE.exports=Ul.default});var CE=L((jl,SE)=>{"use strict";Object.defineProperty(jl,"__esModule",{value:!0});jl.default=PR;var TR=fm(Se()),OR=fm(nm()),bR=fm(X());function fm(e){return e&&e.__esModule?e:{default:e}}function PR(e,t){(0,bR.default)(2,arguments);var r=(0,TR.default)(t);return(0,OR.default)(e,-r)}SE.exports=jl.default});var PE=L((Yl,DE)=>{"use strict";Object.defineProperty(Yl,"__esModule",{value:!0});Yl.default=kR;var MR=pm(Se()),NR=pm(im()),RR=pm(X());function pm(e){return e&&e.__esModule?e:{default:e}}function kR(e,t){(0,RR.default)(2,arguments);var r=(0,MR.default)(t);return(0,NR.default)(e,-r)}DE.exports=Yl.default});var OE=L((Wl,TE)=>{"use strict";Object.defineProperty(Wl,"__esModule",{value:!0});Wl.default=qR;var IR=hm(Se()),LR=hm(Il()),AR=hm(X());function hm(e){return e&&e.__esModule?e:{default:e}}function qR(e,t){(0,AR.default)(2,arguments);var r=(0,IR.default)(t);return(0,LR.default)(e,-r)}TE.exports=Wl.default});var kE=L((Hl,bE)=>{"use strict";Object.defineProperty(Hl,"__esModule",{value:!0});Hl.default=FR;var UR=mm(Se()),jR=mm(sm()),YR=mm(X());function mm(e){return e&&e.__esModule?e:{default:e}}function FR(e,t){(0,YR.default)(2,arguments);var r=(0,UR.default)(t);return(0,jR.default)(e,-r)}bE.exports=Hl.default});var NE=L((Ql,ME)=>{"use strict";Object.defineProperty(Ql,"__esModule",{value:!0});Ql.default=WR;var HR=vm(Se()),QR=vm(Fl()),BR=vm(X());function vm(e){return e&&e.__esModule?e:{default:e}}function WR(e,t){(0,BR.default)(2,arguments);var r=(0,HR.default)(t);return(0,QR.default)(e,-r)}ME.exports=Ql.default});var qE=L((Bl,RE)=>{"use strict";Object.defineProperty(Bl,"__esModule",{value:!0});Bl.default=VR;var $R=ym(Se()),zR=ym(dm()),KR=ym(X());function ym(e){return e&&e.__esModule?e:{default:e}}function VR(e,t){(0,KR.default)(2,arguments);var r=(0,$R.default)(t);return(0,zR.default)(e,-r)}RE.exports=Bl.default});var AE=L((Vl,IE)=>{"use strict";Object.defineProperty(Vl,"__esModule",{value:!0});Vl.default=GR;var XR=LE(ue()),JR=LE(X());function LE(e){return e&&e.__esModule?e:{default:e}}function GR(e){(0,JR.default)(1,arguments);var t=(0,XR.default)(e),r=t.getSeconds();return r}IE.exports=Vl.default});var jE=L(($l,FE)=>{"use strict";Object.defineProperty($l,"__esModule",{value:!0});$l.default=ZR;var eq=UE(ue()),tq=UE(X());function UE(e){return e&&e.__esModule?e:{default:e}}function ZR(e){(0,tq.default)(1,arguments);var t=(0,eq.default)(e),r=t.getMinutes();return r}FE.exports=$l.default});var HE=L((zl,YE)=>{"use strict";Object.defineProperty(zl,"__esModule",{value:!0});zl.default=rq;var nq=WE(ue()),oq=WE(X());function WE(e){return e&&e.__esModule?e:{default:e}}function rq(e){(0,oq.default)(1,arguments);var t=(0,nq.default)(e),r=t.getHours();return r}YE.exports=zl.default});var VE=L((Kl,QE)=>{"use strict";Object.defineProperty(Kl,"__esModule",{value:!0});Kl.default=iq;var aq=BE(ue()),uq=BE(X());function BE(e){return e&&e.__esModule?e:{default:e}}function iq(e){(0,uq.default)(1,arguments);var t=(0,aq.default)(e),r=t.getDay();return r}QE.exports=Kl.default});var KE=L((Gl,$E)=>{"use strict";Object.defineProperty(Gl,"__esModule",{value:!0});Gl.default=sq;var lq=zE(ue()),cq=zE(X());function zE(e){return e&&e.__esModule?e:{default:e}}function sq(e){(0,cq.default)(1,arguments);var t=(0,lq.default)(e),r=t.getDate();return r}$E.exports=Gl.default});var Jl=L((Xl,GE)=>{"use strict";Object.defineProperty(Xl,"__esModule",{value:!0});Xl.default=dq;var fq=gm(ue()),XE=gm(Se()),pq=gm(X());function gm(e){return e&&e.__esModule?e:{default:e}}function dq(e,t){(0,pq.default)(1,arguments);var r=t||{},n=r.locale,o=n&&n.options&&n.options.weekStartsOn,i=o==null?0:(0,XE.default)(o),u=r.weekStartsOn==null?i:(0,XE.default)(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=(0,fq.default)(e),c=s.getDay(),d=(c<u?7:0)+c-u;return s.setDate(s.getDate()-d),s.setHours(0,0,0,0),s}GE.exports=Xl.default});var ec=L((Zl,JE)=>{"use strict";Object.defineProperty(Zl,"__esModule",{value:!0});Zl.default=hq;var mq=ZE(Jl()),vq=ZE(X());function ZE(e){return e&&e.__esModule?e:{default:e}}function hq(e){return(0,vq.default)(1,arguments),(0,mq.default)(e,{weekStartsOn:1})}JE.exports=Zl.default});var r1=L((tc,e1)=>{"use strict";Object.defineProperty(tc,"__esModule",{value:!0});tc.default=yq;var gq=wm(ue()),t1=wm(ec()),wq=wm(X());function wm(e){return e&&e.__esModule?e:{default:e}}function yq(e){(0,wq.default)(1,arguments);var t=(0,gq.default)(e),r=t.getFullYear(),n=new Date(0);n.setFullYear(r+1,0,4),n.setHours(0,0,0,0);var o=(0,t1.default)(n),i=new Date(0);i.setFullYear(r,0,4),i.setHours(0,0,0,0);var u=(0,t1.default)(i);return t.getTime()>=o.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}e1.exports=tc.default});var o1=L((rc,n1)=>{"use strict";Object.defineProperty(rc,"__esModule",{value:!0});rc.default=_q;var xq=_m(r1()),Eq=_m(ec()),Sq=_m(X());function _m(e){return e&&e.__esModule?e:{default:e}}function _q(e){(0,Sq.default)(1,arguments);var t=(0,xq.default)(e),r=new Date(0);r.setFullYear(t,0,4),r.setHours(0,0,0,0);var n=(0,Eq.default)(r);return n}n1.exports=rc.default});var a1=L((nc,i1)=>{"use strict";Object.defineProperty(nc,"__esModule",{value:!0});nc.default=Cq;var Dq=oc(ue()),Pq=oc(ec()),Tq=oc(o1()),Oq=oc(X());function oc(e){return e&&e.__esModule?e:{default:e}}var bq=6048e5;function Cq(e){(0,Oq.default)(1,arguments);var t=(0,Dq.default)(e),r=(0,Pq.default)(t).getTime()-(0,Tq.default)(t).getTime();return Math.round(r/bq)+1}i1.exports=nc.default});var l1=L((ic,u1)=>{"use strict";Object.defineProperty(ic,"__esModule",{value:!0});ic.default=kq;var Mq=s1(ue()),Nq=s1(X());function s1(e){return e&&e.__esModule?e:{default:e}}function kq(e){(0,Nq.default)(1,arguments);var t=(0,Mq.default)(e),r=t.getMonth();return r}u1.exports=ic.default});var f1=L((ac,c1)=>{"use strict";Object.defineProperty(ac,"__esModule",{value:!0});ac.default=Rq;var qq=d1(ue()),Iq=d1(X());function d1(e){return e&&e.__esModule?e:{default:e}}function Rq(e){(0,Iq.default)(1,arguments);var t=(0,qq.default)(e),r=Math.floor(t.getMonth()/3)+1;return r}c1.exports=ac.default});var m1=L((uc,p1)=>{"use strict";Object.defineProperty(uc,"__esModule",{value:!0});uc.default=Lq;var Aq=h1(ue()),Fq=h1(X());function h1(e){return e&&e.__esModule?e:{default:e}}function Lq(e){(0,Fq.default)(1,arguments);var t=(0,Aq.default)(e),r=t.getFullYear();return r}p1.exports=uc.default});var g1=L((sc,v1)=>{"use strict";Object.defineProperty(sc,"__esModule",{value:!0});sc.default=Uq;var jq=y1(ue()),Yq=y1(X());function y1(e){return e&&e.__esModule?e:{default:e}}function Uq(e){(0,Yq.default)(1,arguments);var t=(0,jq.default)(e),r=t.getTime();return r}v1.exports=sc.default});var _1=L((lc,w1)=>{"use strict";Object.defineProperty(lc,"__esModule",{value:!0});lc.default=Wq;var Hq=xm(Se()),Qq=xm(ue()),Bq=xm(X());function xm(e){return e&&e.__esModule?e:{default:e}}function Wq(e,t){(0,Bq.default)(2,arguments);var r=(0,Qq.default)(e),n=(0,Hq.default)(t);return r.setSeconds(n),r}w1.exports=lc.default});var E1=L((cc,x1)=>{"use strict";Object.defineProperty(cc,"__esModule",{value:!0});cc.default=Vq;var $q=Em(Se()),zq=Em(ue()),Kq=Em(X());function Em(e){return e&&e.__esModule?e:{default:e}}function Vq(e,t){(0,Kq.default)(2,arguments);var r=(0,zq.default)(e),n=(0,$q.default)(t);return r.setMinutes(n),r}x1.exports=cc.default});var C1=L((dc,S1)=>{"use strict";Object.defineProperty(dc,"__esModule",{value:!0});dc.default=Gq;var Xq=Sm(Se()),Jq=Sm(ue()),Zq=Sm(X());function Sm(e){return e&&e.__esModule?e:{default:e}}function Gq(e,t){(0,Zq.default)(2,arguments);var r=(0,Jq.default)(e),n=(0,Xq.default)(t);return r.setHours(n),r}S1.exports=dc.default});var T1=L((fc,D1)=>{"use strict";Object.defineProperty(fc,"__esModule",{value:!0});fc.default=eI;var tI=P1(ue()),rI=P1(X());function P1(e){return e&&e.__esModule?e:{default:e}}function eI(e){(0,rI.default)(1,arguments);var t=(0,tI.default)(e),r=t.getFullYear(),n=t.getMonth(),o=new Date(0);return o.setFullYear(r,n+1,0),o.setHours(0,0,0,0),o.getDate()}D1.exports=fc.default});var Cm=L((pc,O1)=>{"use strict";Object.defineProperty(pc,"__esModule",{value:!0});pc.default=nI;var oI=hc(Se()),iI=hc(ue()),aI=hc(T1()),uI=hc(X());function hc(e){return e&&e.__esModule?e:{default:e}}function nI(e,t){(0,uI.default)(2,arguments);var r=(0,iI.default)(e),n=(0,oI.default)(t),o=r.getFullYear(),i=r.getDate(),u=new Date(0);u.setFullYear(o,n,15),u.setHours(0,0,0,0);var s=(0,aI.default)(u);return r.setMonth(n,Math.min(i,s)),r}O1.exports=pc.default});var k1=L((mc,b1)=>{"use strict";Object.defineProperty(mc,"__esModule",{value:!0});mc.default=sI;var lI=vc(Se()),cI=vc(ue()),dI=vc(Cm()),fI=vc(X());function vc(e){return e&&e.__esModule?e:{default:e}}function sI(e,t){(0,fI.default)(2,arguments);var r=(0,cI.default)(e),n=(0,lI.default)(t),o=Math.floor(r.getMonth()/3)+1,i=n-o;return(0,dI.default)(r,r.getMonth()+i*3)}b1.exports=mc.default});var N1=L((yc,M1)=>{"use strict";Object.defineProperty(yc,"__esModule",{value:!0});yc.default=pI;var hI=Dm(Se()),mI=Dm(ue()),vI=Dm(X());function Dm(e){return e&&e.__esModule?e:{default:e}}function pI(e,t){(0,vI.default)(2,arguments);var r=(0,mI.default)(e),n=(0,hI.default)(t);return isNaN(r)?new Date(NaN):(r.setFullYear(n),r)}M1.exports=yc.default});var I1=L((gc,R1)=>{"use strict";Object.defineProperty(gc,"__esModule",{value:!0});gc.default=yI;var gI=q1(ue()),wI=q1(X());function q1(e){return e&&e.__esModule?e:{default:e}}function yI(e){(0,wI.default)(1,arguments);var t;if(e&&typeof e.forEach=="function")t=e;else if(typeof e=="object"&&e!==null)t=Array.prototype.slice.call(e);else return new Date(NaN);var r;return t.forEach(function(n){var o=(0,gI.default)(n);(r===void 0||r>o||isNaN(o))&&(r=o)}),r||new Date(NaN)}R1.exports=gc.default});var F1=L((wc,L1)=>{"use strict";Object.defineProperty(wc,"__esModule",{value:!0});wc.default=_I;var xI=A1(ue()),EI=A1(X());function A1(e){return e&&e.__esModule?e:{default:e}}function _I(e){(0,EI.default)(1,arguments);var t;if(e&&typeof e.forEach=="function")t=e;else if(typeof e=="object"&&e!==null)t=Array.prototype.slice.call(e);else return new Date(NaN);var r;return t.forEach(function(n){var o=(0,xI.default)(n);(r===void 0||r<o||isNaN(o))&&(r=o)}),r||new Date(NaN)}L1.exports=wc.default});var xc=L((_c,U1)=>{"use strict";Object.defineProperty(_c,"__esModule",{value:!0});_c.default=SI;var CI=j1(ue()),DI=j1(X());function j1(e){return e&&e.__esModule?e:{default:e}}function SI(e){(0,DI.default)(1,arguments);var t=(0,CI.default)(e);return t.setHours(0,0,0,0),t}U1.exports=_c.default});var Q1=L((Ec,Y1)=>{"use strict";Object.defineProperty(Ec,"__esModule",{value:!0});Ec.default=PI;var W1=Pm(Aa()),H1=Pm(xc()),TI=Pm(X());function Pm(e){return e&&e.__esModule?e:{default:e}}var OI=864e5;function PI(e,t){(0,TI.default)(2,arguments);var r=(0,H1.default)(e),n=(0,H1.default)(t),o=r.getTime()-(0,W1.default)(r),i=n.getTime()-(0,W1.default)(n);return Math.round((o-i)/OI)}Y1.exports=Ec.default});var z1=L((Sc,B1)=>{"use strict";Object.defineProperty(Sc,"__esModule",{value:!0});Sc.default=bI;var $1=V1(ue()),kI=V1(X());function V1(e){return e&&e.__esModule?e:{default:e}}function bI(e,t){(0,kI.default)(2,arguments);var r=(0,$1.default)(e),n=(0,$1.default)(t),o=r.getFullYear()-n.getFullYear(),i=r.getMonth()-n.getMonth();return o*12+i}B1.exports=Sc.default});var J1=L((Cc,K1)=>{"use strict";Object.defineProperty(Cc,"__esModule",{value:!0});Cc.default=MI;var G1=Tm(Jl()),X1=Tm(Aa()),NI=Tm(X());function Tm(e){return e&&e.__esModule?e:{default:e}}var RI=6048e5;function MI(e,t,r){(0,NI.default)(2,arguments);var n=(0,G1.default)(e,r),o=(0,G1.default)(t,r),i=n.getTime()-(0,X1.default)(n),u=o.getTime()-(0,X1.default)(o);return Math.round((i-u)/RI)}K1.exports=Cc.default});var rS=L((Dc,Z1)=>{"use strict";Object.defineProperty(Dc,"__esModule",{value:!0});Dc.default=qI;var tS=eS(ue()),II=eS(X());function eS(e){return e&&e.__esModule?e:{default:e}}function qI(e,t){(0,II.default)(2,arguments);var r=(0,tS.default)(e),n=(0,tS.default)(t);return r.getFullYear()-n.getFullYear()}Z1.exports=Dc.default});var iS=L((Pc,nS)=>{"use strict";Object.defineProperty(Pc,"__esModule",{value:!0});Pc.default=LI;var AI=oS(ue()),FI=oS(X());function oS(e){return e&&e.__esModule?e:{default:e}}function LI(e){(0,FI.default)(1,arguments);var t=(0,AI.default)(e);return t.setDate(1),t.setHours(0,0,0,0),t}nS.exports=Pc.default});var Om=L((Tc,aS)=>{"use strict";Object.defineProperty(Tc,"__esModule",{value:!0});Tc.default=UI;var jI=uS(ue()),YI=uS(X());function uS(e){return e&&e.__esModule?e:{default:e}}function UI(e){(0,YI.default)(1,arguments);var t=(0,jI.default)(e),r=t.getMonth(),n=r-r%3;return t.setMonth(n,1),t.setHours(0,0,0,0),t}aS.exports=Tc.default});var cS=L((Oc,sS)=>{"use strict";Object.defineProperty(Oc,"__esModule",{value:!0});Oc.default=WI;var HI=lS(ue()),QI=lS(X());function lS(e){return e&&e.__esModule?e:{default:e}}function WI(e){(0,QI.default)(1,arguments);var t=(0,HI.default)(e),r=new Date(0);return r.setFullYear(t.getFullYear(),0,1),r.setHours(0,0,0,0),r}sS.exports=Oc.default});var pS=L((bc,dS)=>{"use strict";Object.defineProperty(bc,"__esModule",{value:!0});bc.default=BI;var VI=fS(ue()),$I=fS(X());function fS(e){return e&&e.__esModule?e:{default:e}}function BI(e){(0,$I.default)(1,arguments);var t=(0,VI.default)(e);return t.setHours(23,59,59,999),t}dS.exports=bc.default});var vS=L((kc,hS)=>{"use strict";Object.defineProperty(kc,"__esModule",{value:!0});kc.default=zI;var KI=bm(ue()),mS=bm(Se()),GI=bm(X());function bm(e){return e&&e.__esModule?e:{default:e}}function zI(e,t){(0,GI.default)(1,arguments);var r=t||{},n=r.locale,o=n&&n.options&&n.options.weekStartsOn,i=o==null?0:(0,mS.default)(o),u=r.weekStartsOn==null?i:(0,mS.default)(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=(0,KI.default)(e),c=s.getDay(),d=(c<u?-7:0)+6-(c-u);return s.setDate(s.getDate()+d),s.setHours(23,59,59,999),s}hS.exports=kc.default});var wS=L((Mc,yS)=>{"use strict";Object.defineProperty(Mc,"__esModule",{value:!0});Mc.default=XI;var JI=gS(ue()),ZI=gS(X());function gS(e){return e&&e.__esModule?e:{default:e}}function XI(e){(0,ZI.default)(1,arguments);var t=(0,JI.default)(e),r=t.getMonth();return t.setFullYear(t.getFullYear(),r+1,0),t.setHours(23,59,59,999),t}yS.exports=Mc.default});var SS=L((Nc,_S)=>{"use strict";Object.defineProperty(Nc,"__esModule",{value:!0});Nc.default=eL;var ES=xS(ue()),tL=xS(X());function xS(e){return e&&e.__esModule?e:{default:e}}function eL(e,t){(0,tL.default)(2,arguments);var r=(0,ES.default)(e),n=(0,ES.default)(t);return r.getTime()===n.getTime()}_S.exports=Nc.default});var TS=L((Rc,CS)=>{"use strict";Object.defineProperty(Rc,"__esModule",{value:!0});Rc.default=rL;var PS=DS(xc()),nL=DS(X());function DS(e){return e&&e.__esModule?e:{default:e}}function rL(e,t){(0,nL.default)(2,arguments);var r=(0,PS.default)(e),n=(0,PS.default)(t);return r.getTime()===n.getTime()}CS.exports=Rc.default});var MS=L((qc,OS)=>{"use strict";Object.defineProperty(qc,"__esModule",{value:!0});qc.default=oL;var kS=bS(ue()),iL=bS(X());function bS(e){return e&&e.__esModule?e:{default:e}}function oL(e,t){(0,iL.default)(2,arguments);var r=(0,kS.default)(e),n=(0,kS.default)(t);return r.getFullYear()===n.getFullYear()&&r.getMonth()===n.getMonth()}OS.exports=qc.default});var IS=L((Ic,NS)=>{"use strict";Object.defineProperty(Ic,"__esModule",{value:!0});Ic.default=aL;var qS=RS(ue()),uL=RS(X());function RS(e){return e&&e.__esModule?e:{default:e}}function aL(e,t){(0,uL.default)(2,arguments);var r=(0,qS.default)(e),n=(0,qS.default)(t);return r.getFullYear()===n.getFullYear()}NS.exports=Ic.default});var US=L((Lc,LS)=>{"use strict";Object.defineProperty(Lc,"__esModule",{value:!0});Lc.default=sL;var FS=AS(Om()),lL=AS(X());function AS(e){return e&&e.__esModule?e:{default:e}}function sL(e,t){(0,lL.default)(2,arguments);var r=(0,FS.default)(e),n=(0,FS.default)(t);return r.getTime()===n.getTime()}LS.exports=Lc.default});var HS=L((Ac,jS)=>{"use strict";Object.defineProperty(Ac,"__esModule",{value:!0});Ac.default=cL;var WS=YS(ue()),dL=YS(X());function YS(e){return e&&e.__esModule?e:{default:e}}function cL(e,t){(0,dL.default)(2,arguments);var r=(0,WS.default)(e),n=(0,WS.default)(t);return r.getTime()>n.getTime()}jS.exports=Ac.default});var $S=L((Fc,QS)=>{"use strict";Object.defineProperty(Fc,"__esModule",{value:!0});Fc.default=fL;var VS=BS(ue()),pL=BS(X());function BS(e){return e&&e.__esModule?e:{default:e}}function fL(e,t){(0,pL.default)(2,arguments);var r=(0,VS.default)(e),n=(0,VS.default)(t);return r.getTime()<n.getTime()}QS.exports=Fc.default});var GS=L((Uc,zS)=>{"use strict";Object.defineProperty(Uc,"__esModule",{value:!0});Uc.default=hL;var km=KS(ue()),mL=KS(X());function KS(e){return e&&e.__esModule?e:{default:e}}function hL(e,t){(0,mL.default)(2,arguments);var r=t||{},n=(0,km.default)(e).getTime(),o=(0,km.default)(r.start).getTime(),i=(0,km.default)(r.end).getTime();if(!(o<=i))throw new RangeError("Invalid interval");return n>=o&&n<=i}zS.exports=Uc.default});var JS=L((jc,XS)=>{"use strict";Object.defineProperty(jc,"__esModule",{value:!0});jc.default=vL;function vL(e,t){if(e==null)throw new TypeError("assign requires that input parameter not be null or undefined");t=t||{};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}XS.exports=jc.default});var eC=L((Yc,ZS)=>{"use strict";Object.defineProperty(Yc,"__esModule",{value:!0});Yc.default=yL;var Nm=Mm(Se()),gL=Mm(ue()),wL=Mm(X());function Mm(e){return e&&e.__esModule?e:{default:e}}function yL(e,t,r){(0,wL.default)(2,arguments);var n=r||{},o=n.locale,i=o&&o.options&&o.options.weekStartsOn,u=i==null?0:(0,Nm.default)(i),s=n.weekStartsOn==null?u:(0,Nm.default)(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=(0,gL.default)(e),d=(0,Nm.default)(t),p=c.getUTCDay(),_=d%7,g=(_+7)%7,T=(g<s?7:0)+d-p;return c.setUTCDate(c.getUTCDate()+T),c}ZS.exports=Yc.default});var rC=L((Wc,tC)=>{"use strict";Object.defineProperty(Wc,"__esModule",{value:!0});Wc.default=_L;var xL=Rm(Se()),EL=Rm(ue()),SL=Rm(X());function Rm(e){return e&&e.__esModule?e:{default:e}}function _L(e,t){(0,SL.default)(2,arguments);var r=(0,xL.default)(t);r%7==0&&(r=r-7);var n=1,o=(0,EL.default)(e),i=o.getUTCDay(),u=r%7,s=(u+7)%7,c=(s<n?7:0)+r-i;return o.setUTCDate(o.getUTCDate()+c),o}tC.exports=Wc.default});var oC=L((Hc,nC)=>{"use strict";Object.defineProperty(Hc,"__esModule",{value:!0});Hc.default=CL;var DL=Qc(Se()),PL=Qc(ue()),TL=Qc(Xh()),OL=Qc(X());function Qc(e){return e&&e.__esModule?e:{default:e}}function CL(e,t){(0,OL.default)(2,arguments);var r=(0,PL.default)(e),n=(0,DL.default)(t),o=(0,TL.default)(r)-n;return r.setUTCDate(r.getUTCDate()-o*7),r}nC.exports=Hc.default});var aC=L((Bc,iC)=>{"use strict";Object.defineProperty(Bc,"__esModule",{value:!0});Bc.default=bL;var kL=Vc(Se()),ML=Vc(ue()),NL=Vc(Zh()),RL=Vc(X());function Vc(e){return e&&e.__esModule?e:{default:e}}function bL(e,t,r){(0,RL.default)(2,arguments);var n=(0,ML.default)(e),o=(0,kL.default)(t),i=(0,NL.default)(n,r)-o;return n.setUTCDate(n.getUTCDate()-i*7),n}iC.exports=Bc.default});var fC=L((Ua,uC)=>{"use strict";Object.defineProperty(Ua,"__esModule",{value:!0});Ua.default=void 0;var qL=Kn(El()),qm=Kn(eC()),IL=Kn(rC()),LL=Kn(oC()),AL=Kn(aC()),sC=Kn(Ra()),Im=Kn(qa());function Kn(e){return e&&e.__esModule?e:{default:e}}var FL=36e5,UL=6e4,jL=1e3,Je={month:/^(1[0-2]|0?\d)/,date:/^(3[0-1]|[0-2]?\d)/,dayOfYear:/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,week:/^(5[0-3]|[0-4]?\d)/,hour23h:/^(2[0-3]|[0-1]?\d)/,hour24h:/^(2[0-4]|[0-1]?\d)/,hour11h:/^(1[0-1]|0?\d)/,hour12h:/^(1[0-2]|0?\d)/,minute:/^[0-5]?\d/,second:/^[0-5]?\d/,singleDigit:/^\d/,twoDigits:/^\d{1,2}/,threeDigits:/^\d{1,3}/,fourDigits:/^\d{1,4}/,anyDigitsSigned:/^-?\d+/,singleDigitSigned:/^-?\d/,twoDigitsSigned:/^-?\d{1,2}/,threeDigitsSigned:/^-?\d{1,3}/,fourDigitsSigned:/^-?\d{1,4}/},Pr={basicOptionalMinutes:/^([+-])(\d{2})(\d{2})?|Z/,basic:/^([+-])(\d{2})(\d{2})|Z/,basicOptionalSeconds:/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,extended:/^([+-])(\d{2}):(\d{2})|Z/,extendedOptionalSeconds:/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/};function Qe(e,t,r){var n=t.match(e);if(!n)return null;var o=parseInt(n[0],10);return{value:r?r(o):o,rest:t.slice(n[0].length)}}function Tr(e,t){var r=t.match(e);if(!r)return null;if(r[0]==="Z")return{value:0,rest:t.slice(1)};var n=r[1]==="+"?1:-1,o=r[2]?parseInt(r[2],10):0,i=r[3]?parseInt(r[3],10):0,u=r[5]?parseInt(r[5],10):0;return{value:n*(o*FL+i*UL+u*jL),rest:t.slice(r[0].length)}}function lC(e,t){return Qe(Je.anyDigitsSigned,e,t)}function $e(e,t,r){switch(e){case 1:return Qe(Je.singleDigit,t,r);case 2:return Qe(Je.twoDigits,t,r);case 3:return Qe(Je.threeDigits,t,r);case 4:return Qe(Je.fourDigits,t,r);default:return Qe(new RegExp("^\\d{1,"+e+"}"),t,r)}}function $c(e,t,r){switch(e){case 1:return Qe(Je.singleDigitSigned,t,r);case 2:return Qe(Je.twoDigitsSigned,t,r);case 3:return Qe(Je.threeDigitsSigned,t,r);case 4:return Qe(Je.fourDigitsSigned,t,r);default:return Qe(new RegExp("^-?\\d{1,"+e+"}"),t,r)}}function Lm(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;case"am":case"midnight":case"night":default:return 0}}function cC(e,t){var r=t>0,n=r?t:1-t,o;if(n<=50)o=e||100;else{var i=n+50,u=Math.floor(i/100)*100,s=e>=i%100;o=e+u-(s?100:0)}return r?o:1-o}var YL=[31,28,31,30,31,30,31,31,30,31,30,31],WL=[31,29,31,30,31,30,31,31,30,31,30,31];function dC(e){return e%400==0||e%4==0&&e%100!=0}var HL={G:{priority:140,parse:function(e,t,r,n){switch(t){case"G":case"GG":case"GGG":return r.era(e,{width:"abbreviated"})||r.era(e,{width:"narrow"});case"GGGGG":return r.era(e,{width:"narrow"});case"GGGG":default:return r.era(e,{width:"wide"})||r.era(e,{width:"abbreviated"})||r.era(e,{width:"narrow"})}},set:function(e,t,r,n){return t.era=r,e.setUTCFullYear(r,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(e,t,r,n){var o=function(i){return{year:i,isTwoDigitYear:t==="yy"}};switch(t){case"y":return $e(4,e,o);case"yo":return r.ordinalNumber(e,{unit:"year",valueCallback:o});default:return $e(t.length,e,o)}},validate:function(e,t,r){return t.isTwoDigitYear||t.year>0},set:function(e,t,r,n){var o=e.getUTCFullYear();if(r.isTwoDigitYear){var i=cC(r.year,o);return e.setUTCFullYear(i,0,1),e.setUTCHours(0,0,0,0),e}var u=!("era"in t)||t.era===1?r.year:1-r.year;return e.setUTCFullYear(u,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(e,t,r,n){var o=function(i){return{year:i,isTwoDigitYear:t==="YY"}};switch(t){case"Y":return $e(4,e,o);case"Yo":return r.ordinalNumber(e,{unit:"year",valueCallback:o});default:return $e(t.length,e,o)}},validate:function(e,t,r){return t.isTwoDigitYear||t.year>0},set:function(e,t,r,n){var o=(0,qL.default)(e,n);if(r.isTwoDigitYear){var i=cC(r.year,o);return e.setUTCFullYear(i,0,n.firstWeekContainsDate),e.setUTCHours(0,0,0,0),(0,Im.default)(e,n)}var u=!("era"in t)||t.era===1?r.year:1-r.year;return e.setUTCFullYear(u,0,n.firstWeekContainsDate),e.setUTCHours(0,0,0,0),(0,Im.default)(e,n)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(e,t,r,n){return $c(t==="R"?4:t.length,e)},set:function(e,t,r,n){var o=new Date(0);return o.setUTCFullYear(r,0,4),o.setUTCHours(0,0,0,0),(0,sC.default)(o)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(e,t,r,n){return $c(t==="u"?4:t.length,e)},set:function(e,t,r,n){return e.setUTCFullYear(r,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(e,t,r,n){switch(t){case"Q":case"QQ":return $e(t.length,e);case"Qo":return r.ordinalNumber(e,{unit:"quarter"});case"QQQ":return r.quarter(e,{width:"abbreviated",context:"formatting"})||r.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return r.quarter(e,{width:"narrow",context:"formatting"});case"QQQQ":default:return r.quarter(e,{width:"wide",context:"formatting"})||r.quarter(e,{width:"abbreviated",context:"formatting"})||r.quarter(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,r){return t>=1&&t<=4},set:function(e,t,r,n){return e.setUTCMonth((r-1)*3,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(e,t,r,n){switch(t){case"q":case"qq":return $e(t.length,e);case"qo":return r.ordinalNumber(e,{unit:"quarter"});case"qqq":return r.quarter(e,{width:"abbreviated",context:"standalone"})||r.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return r.quarter(e,{width:"narrow",context:"standalone"});case"qqqq":default:return r.quarter(e,{width:"wide",context:"standalone"})||r.quarter(e,{width:"abbreviated",context:"standalone"})||r.quarter(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,r){return t>=1&&t<=4},set:function(e,t,r,n){return e.setUTCMonth((r-1)*3,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(e,t,r,n){var o=function(i){return i-1};switch(t){case"M":return Qe(Je.month,e,o);case"MM":return $e(2,e,o);case"Mo":return r.ordinalNumber(e,{unit:"month",valueCallback:o});case"MMM":return r.month(e,{width:"abbreviated",context:"formatting"})||r.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return r.month(e,{width:"narrow",context:"formatting"});case"MMMM":default:return r.month(e,{width:"wide",context:"formatting"})||r.month(e,{width:"abbreviated",context:"formatting"})||r.month(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,r){return t>=0&&t<=11},set:function(e,t,r,n){return e.setUTCMonth(r,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(e,t,r,n){var o=function(i){return i-1};switch(t){case"L":return Qe(Je.month,e,o);case"LL":return $e(2,e,o);case"Lo":return r.ordinalNumber(e,{unit:"month",valueCallback:o});case"LLL":return r.month(e,{width:"abbreviated",context:"standalone"})||r.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return r.month(e,{width:"narrow",context:"standalone"});case"LLLL":default:return r.month(e,{width:"wide",context:"standalone"})||r.month(e,{width:"abbreviated",context:"standalone"})||r.month(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,r){return t>=0&&t<=11},set:function(e,t,r,n){return e.setUTCMonth(r,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(e,t,r,n){switch(t){case"w":return Qe(Je.week,e);case"wo":return r.ordinalNumber(e,{unit:"week"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=1&&t<=53},set:function(e,t,r,n){return(0,Im.default)((0,AL.default)(e,r,n),n)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(e,t,r,n){switch(t){case"I":return Qe(Je.week,e);case"Io":return r.ordinalNumber(e,{unit:"week"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=1&&t<=53},set:function(e,t,r,n){return(0,sC.default)((0,LL.default)(e,r,n),n)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(e,t,r,n){switch(t){case"d":return Qe(Je.date,e);case"do":return r.ordinalNumber(e,{unit:"date"});default:return $e(t.length,e)}},validate:function(e,t,r){var n=e.getUTCFullYear(),o=dC(n),i=e.getUTCMonth();return o?t>=1&&t<=WL[i]:t>=1&&t<=YL[i]},set:function(e,t,r,n){return e.setUTCDate(r),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(e,t,r,n){switch(t){case"D":case"DD":return Qe(Je.dayOfYear,e);case"Do":return r.ordinalNumber(e,{unit:"date"});default:return $e(t.length,e)}},validate:function(e,t,r){var n=e.getUTCFullYear(),o=dC(n);return o?t>=1&&t<=366:t>=1&&t<=365},set:function(e,t,r,n){return e.setUTCMonth(0,r),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(e,t,r,n){switch(t){case"E":case"EE":case"EEE":return r.day(e,{width:"abbreviated",context:"formatting"})||r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return r.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"});case"EEEE":default:return r.day(e,{width:"wide",context:"formatting"})||r.day(e,{width:"abbreviated",context:"formatting"})||r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,r){return t>=0&&t<=6},set:function(e,t,r,n){return e=(0,qm.default)(e,r,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(e,t,r,n){var o=function(i){var u=Math.floor((i-1)/7)*7;return(i+n.weekStartsOn+6)%7+u};switch(t){case"e":case"ee":return $e(t.length,e,o);case"eo":return r.ordinalNumber(e,{unit:"day",valueCallback:o});case"eee":return r.day(e,{width:"abbreviated",context:"formatting"})||r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"});case"eeeee":return r.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"});case"eeee":default:return r.day(e,{width:"wide",context:"formatting"})||r.day(e,{width:"abbreviated",context:"formatting"})||r.day(e,{width:"short",context:"formatting"})||r.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,r){return t>=0&&t<=6},set:function(e,t,r,n){return e=(0,qm.default)(e,r,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(e,t,r,n){var o=function(i){var u=Math.floor((i-1)/7)*7;return(i+n.weekStartsOn+6)%7+u};switch(t){case"c":case"cc":return $e(t.length,e,o);case"co":return r.ordinalNumber(e,{unit:"day",valueCallback:o});case"ccc":return r.day(e,{width:"abbreviated",context:"standalone"})||r.day(e,{width:"short",context:"standalone"})||r.day(e,{width:"narrow",context:"standalone"});case"ccccc":return r.day(e,{width:"narrow",context:"standalone"});case"cccccc":return r.day(e,{width:"short",context:"standalone"})||r.day(e,{width:"narrow",context:"standalone"});case"cccc":default:return r.day(e,{width:"wide",context:"standalone"})||r.day(e,{width:"abbreviated",context:"standalone"})||r.day(e,{width:"short",context:"standalone"})||r.day(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,r){return t>=0&&t<=6},set:function(e,t,r,n){return e=(0,qm.default)(e,r,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(e,t,r,n){var o=function(i){return i===0?7:i};switch(t){case"i":case"ii":return $e(t.length,e);case"io":return r.ordinalNumber(e,{unit:"day"});case"iii":return r.day(e,{width:"abbreviated",context:"formatting",valueCallback:o})||r.day(e,{width:"short",context:"formatting",valueCallback:o})||r.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiiii":return r.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiiiii":return r.day(e,{width:"short",context:"formatting",valueCallback:o})||r.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiii":default:return r.day(e,{width:"wide",context:"formatting",valueCallback:o})||r.day(e,{width:"abbreviated",context:"formatting",valueCallback:o})||r.day(e,{width:"short",context:"formatting",valueCallback:o})||r.day(e,{width:"narrow",context:"formatting",valueCallback:o})}},validate:function(e,t,r){return t>=1&&t<=7},set:function(e,t,r,n){return e=(0,IL.default)(e,r,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(e,t,r,n){switch(t){case"a":case"aa":case"aaa":return r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return r.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaa":default:return r.dayPeriod(e,{width:"wide",context:"formatting"})||r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,r,n){return e.setUTCHours(Lm(r),0,0,0),e},incompatibleTokens:["b","B","H","K","k","t","T"]},b:{priority:80,parse:function(e,t,r,n){switch(t){case"b":case"bb":case"bbb":return r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return r.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbb":default:return r.dayPeriod(e,{width:"wide",context:"formatting"})||r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,r,n){return e.setUTCHours(Lm(r),0,0,0),e},incompatibleTokens:["a","B","H","K","k","t","T"]},B:{priority:80,parse:function(e,t,r,n){switch(t){case"B":case"BB":case"BBB":return r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return r.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBB":default:return r.dayPeriod(e,{width:"wide",context:"formatting"})||r.dayPeriod(e,{width:"abbreviated",context:"formatting"})||r.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,r,n){return e.setUTCHours(Lm(r),0,0,0),e},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(e,t,r,n){switch(t){case"h":return Qe(Je.hour12h,e);case"ho":return r.ordinalNumber(e,{unit:"hour"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=1&&t<=12},set:function(e,t,r,n){var o=e.getUTCHours()>=12;return o&&r<12?e.setUTCHours(r+12,0,0,0):!o&&r===12?e.setUTCHours(0,0,0,0):e.setUTCHours(r,0,0,0),e},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(e,t,r,n){switch(t){case"H":return Qe(Je.hour23h,e);case"Ho":return r.ordinalNumber(e,{unit:"hour"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=0&&t<=23},set:function(e,t,r,n){return e.setUTCHours(r,0,0,0),e},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(e,t,r,n){switch(t){case"K":return Qe(Je.hour11h,e);case"Ko":return r.ordinalNumber(e,{unit:"hour"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=0&&t<=11},set:function(e,t,r,n){var o=e.getUTCHours()>=12;return o&&r<12?e.setUTCHours(r+12,0,0,0):e.setUTCHours(r,0,0,0),e},incompatibleTokens:["a","b","h","H","k","t","T"]},k:{priority:70,parse:function(e,t,r,n){switch(t){case"k":return Qe(Je.hour24h,e);case"ko":return r.ordinalNumber(e,{unit:"hour"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=1&&t<=24},set:function(e,t,r,n){var o=r<=24?r%24:r;return e.setUTCHours(o,0,0,0),e},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(e,t,r,n){switch(t){case"m":return Qe(Je.minute,e);case"mo":return r.ordinalNumber(e,{unit:"minute"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=0&&t<=59},set:function(e,t,r,n){return e.setUTCMinutes(r,0,0),e},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(e,t,r,n){switch(t){case"s":return Qe(Je.second,e);case"so":return r.ordinalNumber(e,{unit:"second"});default:return $e(t.length,e)}},validate:function(e,t,r){return t>=0&&t<=59},set:function(e,t,r,n){return e.setUTCSeconds(r,0),e},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(e,t,r,n){var o=function(i){return Math.floor(i*Math.pow(10,-t.length+3))};return $e(t.length,e,o)},set:function(e,t,r,n){return e.setUTCMilliseconds(r),e},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(e,t,r,n){switch(t){case"X":return Tr(Pr.basicOptionalMinutes,e);case"XX":return Tr(Pr.basic,e);case"XXXX":return Tr(Pr.basicOptionalSeconds,e);case"XXXXX":return Tr(Pr.extendedOptionalSeconds,e);case"XXX":default:return Tr(Pr.extended,e)}},set:function(e,t,r,n){return t.timestampIsSet?e:new Date(e.getTime()-r)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(e,t,r,n){switch(t){case"x":return Tr(Pr.basicOptionalMinutes,e);case"xx":return Tr(Pr.basic,e);case"xxxx":return Tr(Pr.basicOptionalSeconds,e);case"xxxxx":return Tr(Pr.extendedOptionalSeconds,e);case"xxx":default:return Tr(Pr.extended,e)}},set:function(e,t,r,n){return t.timestampIsSet?e:new Date(e.getTime()-r)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(e,t,r,n){return lC(e)},set:function(e,t,r,n){return[new Date(r*1e3),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(e,t,r,n){return lC(e)},set:function(e,t,r,n){return[new Date(r),{timestampIsSet:!0}]},incompatibleTokens:"*"}},QL=HL;Ua.default=QL;uC.exports=Ua.default});var mC=L((zc,pC)=>{"use strict";Object.defineProperty(zc,"__esModule",{value:!0});zc.default=BL;var VL=Qr(Hh()),$L=Qr(Vh()),hC=Qr(ue()),zL=Qr(JS()),KL=Qr(em()),GL=Qr(Aa()),Kc=tm(),Gc=Qr(Se()),XL=Qr(fC()),JL=Qr(X());function Qr(e){return e&&e.__esModule?e:{default:e}}var ZL=10,eA=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,tA=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,rA=/^'([^]*?)'?$/,nA=/''/g,oA=/\S/,iA=/[a-zA-Z]/;function BL(e,t,r,n){(0,JL.default)(3,arguments);var o=String(e),i=String(t),u=n||{},s=u.locale||VL.default;if(!s.match)throw new RangeError("locale must contain match property");var c=s.options&&s.options.firstWeekContainsDate,d=c==null?1:(0,Gc.default)(c),p=u.firstWeekContainsDate==null?d:(0,Gc.default)(u.firstWeekContainsDate);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var _=s.options&&s.options.weekStartsOn,g=_==null?0:(0,Gc.default)(_),T=u.weekStartsOn==null?g:(0,Gc.default)(u.weekStartsOn);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(i==="")return o===""?(0,hC.default)(r):new Date(NaN);var R={firstWeekContainsDate:p,weekStartsOn:T,locale:s},U=[{priority:ZL,subPriority:-1,set:aA,index:0}],S,y=i.match(tA).map(function(Ie){var Me=Ie[0];if(Me==="p"||Me==="P"){var ve=KL.default[Me];return ve(Ie,s.formatLong,R)}return Ie}).join("").match(eA),P=[];for(S=0;S<y.length;S++){var M=y[S];!u.useAdditionalWeekYearTokens&&(0,Kc.isProtectedWeekYearToken)(M)&&(0,Kc.throwProtectedError)(M,i,e),!u.useAdditionalDayOfYearTokens&&(0,Kc.isProtectedDayOfYearToken)(M)&&(0,Kc.throwProtectedError)(M,i,e);var I=M[0],z=XL.default[I];if(z){var H=z.incompatibleTokens;if(Array.isArray(H)){for(var B=void 0,V=0;V<P.length;V++){var K=P[V].token;if(H.indexOf(K)!==-1||K===I){B=P[V];break}}if(B)throw new RangeError("The format string mustn't contain `".concat(B.fullToken,"` and `").concat(M,"` at the same time"))}else if(z.incompatibleTokens==="*"&&P.length)throw new RangeError("The format string mustn't contain `".concat(M,"` and any other token at the same time"));P.push({token:I,fullToken:M});var ne=z.parse(o,M,s.match,R);if(!ne)return new Date(NaN);U.push({priority:z.priority,subPriority:z.subPriority||0,set:z.set,validate:z.validate,value:ne.value,index:U.length}),o=ne.rest}else{if(I.match(iA))throw new RangeError("Format string contains an unescaped latin alphabet character `"+I+"`");if(M==="''"?M="'":I==="'"&&(M=uA(M)),o.indexOf(M)===0)o=o.slice(M.length);else return new Date(NaN)}}if(o.length>0&&oA.test(o))return new Date(NaN);var we=U.map(function(Ie){return Ie.priority}).sort(function(Ie,Me){return Me-Ie}).filter(function(Ie,Me,ve){return ve.indexOf(Ie)===Me}).map(function(Ie){return U.filter(function(Me){return Me.priority===Ie}).sort(function(Me,ve){return ve.subPriority-Me.subPriority})}).map(function(Ie){return Ie[0]}),Oe=(0,hC.default)(r);if(isNaN(Oe))return new Date(NaN);var Ae=(0,$L.default)(Oe,(0,GL.default)(Oe)),ze={};for(S=0;S<we.length;S++){var Ne=we[S];if(Ne.validate&&!Ne.validate(Ae,Ne.value,R))return new Date(NaN);var tt=Ne.set(Ae,ze,Ne.value,R);tt[0]?(Ae=tt[0],(0,zL.default)(ze,tt[1])):Ae=tt}return Ae}function aA(e,t){if(t.timestampIsSet)return e;var r=new Date(0);return r.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),r.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),r}function uA(e){return e.match(rA)[1].replace(nA,"'")}pC.exports=zc.default});var xC=L((Xc,vC)=>{"use strict";Object.defineProperty(Xc,"__esModule",{value:!0});Xc.default=sA;var lA=yC(Se()),cA=yC(X());function yC(e){return e&&e.__esModule?e:{default:e}}var gC=36e5,wC=6e4,dA=2,Jc={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},fA=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,pA=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,hA=/^([+-])(\d{2})(?::?(\d{2}))?$/;function sA(e,t){(0,cA.default)(1,arguments);var r=t||{},n=r.additionalDigits==null?dA:(0,lA.default)(r.additionalDigits);if(n!==2&&n!==1&&n!==0)throw new RangeError("additionalDigits must be 0, 1 or 2");if(!(typeof e=="string"||Object.prototype.toString.call(e)==="[object String]"))return new Date(NaN);var o=mA(e),i;if(o.date){var u=vA(o.date,n);i=yA(u.restDateString,u.year)}if(isNaN(i)||!i)return new Date(NaN);var s=i.getTime(),c=0,d;if(o.time&&(c=gA(o.time),isNaN(c)||c===null))return new Date(NaN);if(o.timezone){if(d=wA(o.timezone),isNaN(d))return new Date(NaN)}else{var p=new Date(s+c),_=new Date(p.getUTCFullYear(),p.getUTCMonth(),p.getUTCDate(),p.getUTCHours(),p.getUTCMinutes(),p.getUTCSeconds(),p.getUTCMilliseconds());return _.setFullYear(p.getUTCFullYear()),_}return new Date(s+c+d)}function mA(e){var t={},r=e.split(Jc.dateTimeDelimiter),n;if(r.length>2)return t;if(/:/.test(r[0])?(t.date=null,n=r[0]):(t.date=r[0],n=r[1],Jc.timeZoneDelimiter.test(t.date)&&(t.date=e.split(Jc.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var o=Jc.timezone.exec(n);o?(t.time=n.replace(o[1],""),t.timezone=o[1]):t.time=n}return t}function vA(e,t){var r=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(r);if(!n)return{year:null};var o=n[1]&&parseInt(n[1]),i=n[2]&&parseInt(n[2]);return{year:i==null?o:i*100,restDateString:e.slice((n[1]||n[2]).length)}}function yA(e,t){if(t===null)return null;var r=e.match(fA);if(!r)return null;var n=!!r[4],o=ja(r[1]),i=ja(r[2])-1,u=ja(r[3]),s=ja(r[4]),c=ja(r[5])-1;if(n)return SA(t,s,c)?_A(t,s,c):new Date(NaN);var d=new Date(0);return!xA(t,i,u)||!EA(t,o)?new Date(NaN):(d.setUTCFullYear(t,i,Math.max(o,u)),d)}function ja(e){return e?parseInt(e):1}function gA(e){var t=e.match(pA);if(!t)return null;var r=Am(t[1]),n=Am(t[2]),o=Am(t[3]);return CA(r,n,o)?r*gC+n*wC+o*1e3:NaN}function Am(e){return e&&parseFloat(e.replace(",","."))||0}function wA(e){if(e==="Z")return 0;var t=e.match(hA);if(!t)return 0;var r=t[1]==="+"?-1:1,n=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return DA(n,o)?r*(n*gC+o*wC):NaN}function _A(e,t,r){var n=new Date(0);n.setUTCFullYear(e,0,4);var o=n.getUTCDay()||7,i=(t-1)*7+r+1-o;return n.setUTCDate(n.getUTCDate()+i),n}var PA=[31,null,31,30,31,30,31,31,30,31,30,31];function _C(e){return e%400==0||e%4==0&&e%100}function xA(e,t,r){return t>=0&&t<=11&&r>=1&&r<=(PA[t]||(_C(e)?29:28))}function EA(e,t){return t>=1&&t<=(_C(e)?366:365)}function SA(e,t,r){return t>=1&&t<=53&&r>=0&&r<=6}function CA(e,t,r){return e===24?t===0&&r===0:r>=0&&r<60&&t>=0&&t<60&&e>=0&&e<25}function DA(e,t){return t>=0&&t<=59}vC.exports=Xc.default});var DC=L(Zc=>{"use strict";Object.defineProperty(Zc,"__esModule",{value:!0});var EC=_e(),TA=ws();function OA(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function bA(e,t){if(e==null)return{};var r={},n=Object.keys(e),o,i;for(i=0;i<n.length;i++)o=n[i],!(t.indexOf(o)>=0)&&(r[o]=e[o]);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(i=0;i<u.length;i++)o=u[i],!(t.indexOf(o)>=0)&&(!Object.prototype.propertyIsEnumerable.call(e,o)||(r[o]=e[o]))}return r}function kA(e,t,r){return e===t?!0:e.correspondingElement?e.correspondingElement.classList.contains(r):e.classList.contains(r)}function MA(e,t,r){if(e===t)return!0;for(;e.parentNode;){if(kA(e,t,r))return!0;e=e.parentNode}return e}function NA(e){return document.documentElement.clientWidth<=e.clientX||document.documentElement.clientHeight<=e.clientY}var RA=function(){if(!(typeof window=="undefined"||typeof window.addEventListener!="function")){var t=!1,r=Object.defineProperty({},"passive",{get:function(){t=!0}}),n=function(){};return window.addEventListener("testPassiveEventSupport",n,r),window.removeEventListener("testPassiveEventSupport",n,r),t}};function qA(e){return e===void 0&&(e=0),function(){return++e}}var IA=qA(),Fm,ed={},Um={},LA=["touchstart","touchmove"],SC="ignore-react-onclickoutside";function CC(e,t){var r=null,n=LA.indexOf(t)!==-1;return n&&Fm&&(r={passive:!e.props.preventDefault}),r}function AA(e,t){var r,n,o=e.displayName||e.name||"Component";return n=r=function(i){OA(u,i);function u(c){var d;return d=i.call(this,c)||this,d.__outsideClickHandler=function(p){if(typeof d.__clickOutsideHandlerProp=="function"){d.__clickOutsideHandlerProp(p);return}var _=d.getInstance();if(typeof _.props.handleClickOutside=="function"){_.props.handleClickOutside(p);return}if(typeof _.handleClickOutside=="function"){_.handleClickOutside(p);return}throw new Error("WrappedComponent: "+o+" lacks a handleClickOutside(event) function for processing outside click events.")},d.__getComponentNode=function(){var p=d.getInstance();return t&&typeof t.setClickOutsideRef=="function"?t.setClickOutsideRef()(p):typeof p.setClickOutsideRef=="function"?p.setClickOutsideRef():TA.findDOMNode(p)},d.enableOnClickOutside=function(){if(!(typeof document=="undefined"||Um[d._uid])){typeof Fm=="undefined"&&(Fm=RA()),Um[d._uid]=!0;var p=d.props.eventTypes;p.forEach||(p=[p]),ed[d._uid]=function(_){if(d.componentNode!==null&&(d.props.preventDefault&&_.preventDefault(),d.props.stopPropagation&&_.stopPropagation(),!(d.props.excludeScrollbar&&NA(_)))){var g=_.target;MA(g,d.componentNode,d.props.outsideClickIgnoreClass)===document&&d.__outsideClickHandler(_)}},p.forEach(function(_){document.addEventListener(_,ed[d._uid],CC(d,_))})}},d.disableOnClickOutside=function(){delete Um[d._uid];var p=ed[d._uid];if(p&&typeof document!="undefined"){var _=d.props.eventTypes;_.forEach||(_=[_]),_.forEach(function(g){return document.removeEventListener(g,p,CC(d,g))}),delete ed[d._uid]}},d.getRef=function(p){return d.instanceRef=p},d._uid=IA(),d}var s=u.prototype;return s.getInstance=function(){if(!e.prototype.isReactComponent)return this;var d=this.instanceRef;return d.getInstance?d.getInstance():d},s.componentDidMount=function(){if(!(typeof document=="undefined"||!document.createElement)){var d=this.getInstance();if(t&&typeof t.handleClickOutside=="function"&&(this.__clickOutsideHandlerProp=t.handleClickOutside(d),typeof this.__clickOutsideHandlerProp!="function"))throw new Error("WrappedComponent: "+o+" lacks a function for processing outside click events specified by the handleClickOutside config option.");this.componentNode=this.__getComponentNode(),!this.props.disableOnClickOutside&&this.enableOnClickOutside()}},s.componentDidUpdate=function(){this.componentNode=this.__getComponentNode()},s.componentWillUnmount=function(){this.disableOnClickOutside()},s.render=function(){var d=this.props,p=d.excludeScrollbar,_=bA(d,["excludeScrollbar"]);return e.prototype.isReactComponent?_.ref=this.getRef:_.wrappedRef=this.getRef,_.disableOnClickOutside=this.disableOnClickOutside,_.enableOnClickOutside=this.enableOnClickOutside,EC.createElement(e,_)},u}(EC.Component),r.displayName="OnClickOutside("+o+")",r.defaultProps={eventTypes:["mousedown","touchstart"],excludeScrollbar:t&&t.excludeScrollbar||!1,outsideClickIgnoreClass:SC,preventDefault:!1,stopPropagation:!1},r.getClass=function(){return e.getClass?e.getClass():e},n}Zc.IGNORE_CLASS_NAME=SC;Zc.default=AA});var Wa=L((EY,Ya)=>{function FA(e){return e&&e.__esModule?e:{default:e}}Ya.exports=FA;Ya.exports.default=Ya.exports,Ya.exports.__esModule=!0});var PC=L((SY,Kt)=>{function td(e){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?(Kt.exports=td=function(r){return typeof r},Kt.exports.default=Kt.exports,Kt.exports.__esModule=!0):(Kt.exports=td=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},Kt.exports.default=Kt.exports,Kt.exports.__esModule=!0),td(e)}Kt.exports=td;Kt.exports.default=Kt.exports,Kt.exports.__esModule=!0});var Qa=L((CY,Ha)=>{var UA=PC().default;function TC(){if(typeof WeakMap!="function")return null;var e=new WeakMap;return TC=function(){return e},e}function jA(e){if(e&&e.__esModule)return e;if(e===null||UA(e)!=="object"&&typeof e!="function")return{default:e};var t=TC();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}return r.default=e,t&&t.set(e,r),r}Ha.exports=jA;Ha.exports.default=Ha.exports,Ha.exports.__esModule=!0});var OC=L((DY,Ba)=>{function YA(e,t){if(e==null)return{};var r={},n=Object.keys(e),o,i;for(i=0;i<n.length;i++)o=n[i],!(t.indexOf(o)>=0)&&(r[o]=e[o]);return r}Ba.exports=YA;Ba.exports.default=Ba.exports,Ba.exports.__esModule=!0});var Ym=L((PY,Br)=>{function jm(){return Br.exports=jm=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Br.exports.default=Br.exports,Br.exports.__esModule=!0,jm.apply(this,arguments)}Br.exports=jm;Br.exports.default=Br.exports,Br.exports.__esModule=!0});var rd=L((TY,Va)=>{var WA=ah();function HA(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,WA(e,t)}Va.exports=HA;Va.exports.default=Va.exports,Va.exports.__esModule=!0});var nd=L((OY,$a)=>{function QA(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}$a.exports=QA;$a.exports.default=$a.exports,$a.exports.__esModule=!0});var od=L((bY,za)=>{function BA(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}za.exports=BA;za.exports.default=za.exports,za.exports.__esModule=!0});var bC=L((Wm,Hm)=>{(function(e,t){typeof Wm=="object"&&typeof Hm!="undefined"?Hm.exports=t():typeof define=="function"&&define.amd?define(t):e.Popper=t()})(Wm,function(){"use strict";var e=typeof window!="undefined"&&typeof document!="undefined"&&typeof navigator!="undefined",t=function(){for(var f=["Edge","Trident","Firefox"],C=0;C<f.length;C+=1)if(e&&navigator.userAgent.indexOf(f[C])>=0)return 1;return 0}();function r(f){var C=!1;return function(){C||(C=!0,window.Promise.resolve().then(function(){C=!1,f()}))}}function n(f){var C=!1;return function(){C||(C=!0,setTimeout(function(){C=!1,f()},t))}}var o=e&&window.Promise,i=o?r:n;function u(f){var C={};return f&&C.toString.call(f)==="[object Function]"}function s(f,C){if(f.nodeType!==1)return[];var b=f.ownerDocument.defaultView,N=b.getComputedStyle(f,null);return C?N[C]:N}function c(f){return f.nodeName==="HTML"?f:f.parentNode||f.host}function d(f){if(!f)return document.body;switch(f.nodeName){case"HTML":case"BODY":return f.ownerDocument.body;case"#document":return f.body}var C=s(f),b=C.overflow,N=C.overflowX,j=C.overflowY;return/(auto|scroll|overlay)/.test(b+j+N)?f:d(c(f))}function p(f){return f&&f.referenceNode?f.referenceNode:f}var _=e&&!!(window.MSInputMethodContext&&document.documentMode),g=e&&/MSIE 10/.test(navigator.userAgent);function T(f){return f===11?_:f===10?g:_||g}function R(f){if(!f)return document.documentElement;for(var C=T(10)?document.body:null,b=f.offsetParent||null;b===C&&f.nextElementSibling;)b=(f=f.nextElementSibling).offsetParent;var N=b&&b.nodeName;return!N||N==="BODY"||N==="HTML"?f?f.ownerDocument.documentElement:document.documentElement:["TH","TD","TABLE"].indexOf(b.nodeName)!==-1&&s(b,"position")==="static"?R(b):b}function U(f){var C=f.nodeName;return C==="BODY"?!1:C==="HTML"||R(f.firstElementChild)===f}function S(f){return f.parentNode!==null?S(f.parentNode):f}function y(f,C){if(!f||!f.nodeType||!C||!C.nodeType)return document.documentElement;var b=f.compareDocumentPosition(C)&Node.DOCUMENT_POSITION_FOLLOWING,N=b?f:C,j=b?C:f,F=document.createRange();F.setStart(N,0),F.setEnd(j,0);var Q=F.commonAncestorContainer;if(f!==Q&&C!==Q||N.contains(j))return U(Q)?Q:R(Q);var Y=S(f);return Y.host?y(Y.host,C):y(f,S(C).host)}function P(f){var C=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"top",b=C==="top"?"scrollTop":"scrollLeft",N=f.nodeName;if(N==="BODY"||N==="HTML"){var j=f.ownerDocument.documentElement,F=f.ownerDocument.scrollingElement||j;return F[b]}return f[b]}function M(f,C){var b=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,N=P(C,"top"),j=P(C,"left"),F=b?-1:1;return f.top+=N*F,f.bottom+=N*F,f.left+=j*F,f.right+=j*F,f}function I(f,C){var b=C==="x"?"Left":"Top",N=b==="Left"?"Right":"Bottom";return parseFloat(f["border"+b+"Width"])+parseFloat(f["border"+N+"Width"])}function z(f,C,b,N){return Math.max(C["offset"+f],C["scroll"+f],b["client"+f],b["offset"+f],b["scroll"+f],T(10)?parseInt(b["offset"+f])+parseInt(N["margin"+(f==="Height"?"Top":"Left")])+parseInt(N["margin"+(f==="Height"?"Bottom":"Right")]):0)}function H(f){var C=f.body,b=f.documentElement,N=T(10)&&getComputedStyle(b);return{height:z("Height",C,b,N),width:z("Width",C,b,N)}}var B=function(f,C){if(!(f instanceof C))throw new TypeError("Cannot call a class as a function")},V=function(){function f(C,b){for(var N=0;N<b.length;N++){var j=b[N];j.enumerable=j.enumerable||!1,j.configurable=!0,"value"in j&&(j.writable=!0),Object.defineProperty(C,j.key,j)}}return function(C,b,N){return b&&f(C.prototype,b),N&&f(C,N),C}}(),K=function(f,C,b){return C in f?Object.defineProperty(f,C,{value:b,enumerable:!0,configurable:!0,writable:!0}):f[C]=b,f},ne=Object.assign||function(f){for(var C=1;C<arguments.length;C++){var b=arguments[C];for(var N in b)Object.prototype.hasOwnProperty.call(b,N)&&(f[N]=b[N])}return f};function we(f){return ne({},f,{right:f.left+f.width,bottom:f.top+f.height})}function Oe(f){var C={};try{if(T(10)){C=f.getBoundingClientRect();var b=P(f,"top"),N=P(f,"left");C.top+=b,C.left+=N,C.bottom+=b,C.right+=N}else C=f.getBoundingClientRect()}catch(ee){}var j={left:C.left,top:C.top,width:C.right-C.left,height:C.bottom-C.top},F=f.nodeName==="HTML"?H(f.ownerDocument):{},Q=F.width||f.clientWidth||j.width,Y=F.height||f.clientHeight||j.height,G=f.offsetWidth-Q,ie=f.offsetHeight-Y;if(G||ie){var ae=s(f);G-=I(ae,"x"),ie-=I(ae,"y"),j.width-=G,j.height-=ie}return we(j)}function Ae(f,C){var b=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,N=T(10),j=C.nodeName==="HTML",F=Oe(f),Q=Oe(C),Y=d(f),G=s(C),ie=parseFloat(G.borderTopWidth),ae=parseFloat(G.borderLeftWidth);b&&j&&(Q.top=Math.max(Q.top,0),Q.left=Math.max(Q.left,0));var ee=we({top:F.top-Q.top-ie,left:F.left-Q.left-ae,width:F.width,height:F.height});if(ee.marginTop=0,ee.marginLeft=0,!N&&j){var le=parseFloat(G.marginTop),ce=parseFloat(G.marginLeft);ee.top-=ie-le,ee.bottom-=ie-le,ee.left-=ae-ce,ee.right-=ae-ce,ee.marginTop=le,ee.marginLeft=ce}return(N&&!b?C.contains(Y):C===Y&&Y.nodeName!=="BODY")&&(ee=M(ee,C)),ee}function ze(f){var C=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,b=f.ownerDocument.documentElement,N=Ae(f,b),j=Math.max(b.clientWidth,window.innerWidth||0),F=Math.max(b.clientHeight,window.innerHeight||0),Q=C?0:P(b),Y=C?0:P(b,"left"),G={top:Q-N.top+N.marginTop,left:Y-N.left+N.marginLeft,width:j,height:F};return we(G)}function Ne(f){var C=f.nodeName;if(C==="BODY"||C==="HTML")return!1;if(s(f,"position")==="fixed")return!0;var b=c(f);return b?Ne(b):!1}function tt(f){if(!f||!f.parentElement||T())return document.documentElement;for(var C=f.parentElement;C&&s(C,"transform")==="none";)C=C.parentElement;return C||document.documentElement}function Ie(f,C,b,N){var j=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!1,F={top:0,left:0},Q=j?tt(f):y(f,p(C));if(N==="viewport")F=ze(Q,j);else{var Y=void 0;N==="scrollParent"?(Y=d(c(C)),Y.nodeName==="BODY"&&(Y=f.ownerDocument.documentElement)):N==="window"?Y=f.ownerDocument.documentElement:Y=N;var G=Ae(Y,Q,j);if(Y.nodeName==="HTML"&&!Ne(Q)){var ie=H(f.ownerDocument),ae=ie.height,ee=ie.width;F.top+=G.top-G.marginTop,F.bottom=ae+G.top,F.left+=G.left-G.marginLeft,F.right=ee+G.left}else F=G}b=b||0;var le=typeof b=="number";return F.left+=le?b:b.left||0,F.top+=le?b:b.top||0,F.right-=le?b:b.right||0,F.bottom-=le?b:b.bottom||0,F}function Me(f){var C=f.width,b=f.height;return C*b}function ve(f,C,b,N,j){var F=arguments.length>5&&arguments[5]!==void 0?arguments[5]:0;if(f.indexOf("auto")===-1)return f;var Q=Ie(b,N,F,j),Y={top:{width:Q.width,height:C.top-Q.top},right:{width:Q.right-C.right,height:Q.height},bottom:{width:Q.width,height:Q.bottom-C.bottom},left:{width:C.left-Q.left,height:Q.height}},G=Object.keys(Y).map(function(le){return ne({key:le},Y[le],{area:Me(Y[le])})}).sort(function(le,ce){return ce.area-le.area}),ie=G.filter(function(le){var ce=le.width,pe=le.height;return ce>=b.clientWidth&&pe>=b.clientHeight}),ae=ie.length>0?ie[0].key:G[0].key,ee=f.split("-")[1];return ae+(ee?"-"+ee:"")}function Ce(f,C,b){var N=arguments.length>3&&arguments[3]!==void 0?arguments[3]:null,j=N?tt(C):y(C,p(b));return Ae(b,j,N)}function se(f){var C=f.ownerDocument.defaultView,b=C.getComputedStyle(f),N=parseFloat(b.marginTop||0)+parseFloat(b.marginBottom||0),j=parseFloat(b.marginLeft||0)+parseFloat(b.marginRight||0),F={width:f.offsetWidth+j,height:f.offsetHeight+N};return F}function de(f){var C={left:"right",right:"left",bottom:"top",top:"bottom"};return f.replace(/left|right|bottom|top/g,function(b){return C[b]})}function xe(f,C,b){b=b.split("-")[0];var N=se(f),j={width:N.width,height:N.height},F=["right","left"].indexOf(b)!==-1,Q=F?"top":"left",Y=F?"left":"top",G=F?"height":"width",ie=F?"width":"height";return j[Q]=C[Q]+C[G]/2-N[G]/2,b===Y?j[Y]=C[Y]-N[ie]:j[Y]=C[de(Y)],j}function Pe(f,C){return Array.prototype.find?f.find(C):f.filter(C)[0]}function Et(f,C,b){if(Array.prototype.findIndex)return f.findIndex(function(j){return j[C]===b});var N=Pe(f,function(j){return j[C]===b});return f.indexOf(N)}function ut(f,C,b){var N=b===void 0?f:f.slice(0,Et(f,"name",b));return N.forEach(function(j){j.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var F=j.function||j.fn;j.enabled&&u(F)&&(C.offsets.popper=we(C.offsets.popper),C.offsets.reference=we(C.offsets.reference),C=F(C,j))}),C}function st(){if(!this.state.isDestroyed){var f={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};f.offsets.reference=Ce(this.state,this.popper,this.reference,this.options.positionFixed),f.placement=ve(this.options.placement,f.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),f.originalPlacement=f.placement,f.positionFixed=this.options.positionFixed,f.offsets.popper=xe(this.popper,f.offsets.reference,f.placement),f.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",f=ut(this.modifiers,f),this.state.isCreated?this.options.onUpdate(f):(this.state.isCreated=!0,this.options.onCreate(f))}}function sr(f,C){return f.some(function(b){var N=b.name,j=b.enabled;return j&&N===C})}function mr(f){for(var C=[!1,"ms","Webkit","Moz","O"],b=f.charAt(0).toUpperCase()+f.slice(1),N=0;N<C.length;N++){var j=C[N],F=j?""+j+b:f;if(typeof document.body.style[F]!="undefined")return F}return null}function Zn(){return this.state.isDestroyed=!0,sr(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[mr("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function yd(f){var C=f.ownerDocument;return C?C.defaultView:window}function gd(f,C,b,N){var j=f.nodeName==="BODY",F=j?f.ownerDocument.defaultView:f;F.addEventListener(C,b,{passive:!0}),j||gd(d(F.parentNode),C,b,N),N.push(F)}function wd(f,C,b,N){b.updateBound=N,yd(f).addEventListener("resize",b.updateBound,{passive:!0});var j=d(f);return gd(j,"scroll",b.updateBound,b.scrollParents),b.scrollElement=j,b.eventsEnabled=!0,b}function _d(){this.state.eventsEnabled||(this.state=wd(this.reference,this.options,this.state,this.scheduleUpdate))}function xd(f,C){return yd(f).removeEventListener("resize",C.updateBound),C.scrollParents.forEach(function(b){b.removeEventListener("scroll",C.updateBound)}),C.updateBound=null,C.scrollParents=[],C.scrollElement=null,C.eventsEnabled=!1,C}function Ed(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=xd(this.reference,this.state))}function oi(f){return f!==""&&!isNaN(parseFloat(f))&&isFinite(f)}function ii(f,C){Object.keys(C).forEach(function(b){var N="";["width","height","top","right","bottom","left"].indexOf(b)!==-1&&oi(C[b])&&(N="px"),f.style[b]=C[b]+N})}function Sd(f,C){Object.keys(C).forEach(function(b){var N=C[b];N!==!1?f.setAttribute(b,C[b]):f.removeAttribute(b)})}function Cd(f){return ii(f.instance.popper,f.styles),Sd(f.instance.popper,f.attributes),f.arrowElement&&Object.keys(f.arrowStyles).length&&ii(f.arrowElement,f.arrowStyles),f}function Dd(f,C,b,N,j){var F=Ce(j,C,f,b.positionFixed),Q=ve(b.placement,F,C,f,b.modifiers.flip.boundariesElement,b.modifiers.flip.padding);return C.setAttribute("x-placement",Q),ii(C,{position:b.positionFixed?"fixed":"absolute"}),b}function Pd(f,C){var b=f.offsets,N=b.popper,j=b.reference,F=Math.round,Q=Math.floor,Y=function(Wt){return Wt},G=F(j.width),ie=F(N.width),ae=["left","right"].indexOf(f.placement)!==-1,ee=f.placement.indexOf("-")!==-1,le=G%2==ie%2,ce=G%2==1&&ie%2==1,pe=C?ae||ee||le?F:Q:Y,Fe=C?F:Y;return{left:pe(ce&&!ee&&C?N.left-1:N.left),top:Fe(N.top),bottom:Fe(N.bottom),right:pe(N.right)}}var Td=e&&/Firefox/i.test(navigator.userAgent);function Od(f,C){var b=C.x,N=C.y,j=f.offsets.popper,F=Pe(f.instance.modifiers,function(Xt){return Xt.name==="applyStyle"}).gpuAcceleration;F!==void 0&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var Q=F!==void 0?F:C.gpuAcceleration,Y=R(f.instance.popper),G=Oe(Y),ie={position:j.position},ae=Pd(f,window.devicePixelRatio<2||!Td),ee=b==="bottom"?"top":"bottom",le=N==="right"?"left":"right",ce=mr("transform"),pe=void 0,Fe=void 0;if(ee==="bottom"?Y.nodeName==="HTML"?Fe=-Y.clientHeight+ae.bottom:Fe=-G.height+ae.bottom:Fe=ae.top,le==="right"?Y.nodeName==="HTML"?pe=-Y.clientWidth+ae.right:pe=-G.width+ae.right:pe=ae.left,Q&&ce)ie[ce]="translate3d("+pe+"px, "+Fe+"px, 0)",ie[ee]=0,ie[le]=0,ie.willChange="transform";else{var Gt=ee==="bottom"?-1:1,Wt=le==="right"?-1:1;ie[ee]=Fe*Gt,ie[le]=pe*Wt,ie.willChange=ee+", "+le}var yt={"x-placement":f.placement};return f.attributes=ne({},yt,f.attributes),f.styles=ne({},ie,f.styles),f.arrowStyles=ne({},f.offsets.arrow,f.arrowStyles),f}function eo(f,C,b){var N=Pe(f,function(Y){var G=Y.name;return G===C}),j=!!N&&f.some(function(Y){return Y.name===b&&Y.enabled&&Y.order<N.order});if(!j){var F="`"+C+"`",Q="`"+b+"`";console.warn(Q+" modifier is required by "+F+" modifier in order to work, be sure to include it before "+F+"!")}return j}function bd(f,C){var b;if(!eo(f.instance.modifiers,"arrow","keepTogether"))return f;var N=C.element;if(typeof N=="string"){if(N=f.instance.popper.querySelector(N),!N)return f}else if(!f.instance.popper.contains(N))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),f;var j=f.placement.split("-")[0],F=f.offsets,Q=F.popper,Y=F.reference,G=["left","right"].indexOf(j)!==-1,ie=G?"height":"width",ae=G?"Top":"Left",ee=ae.toLowerCase(),le=G?"left":"top",ce=G?"bottom":"right",pe=se(N)[ie];Y[ce]-pe<Q[ee]&&(f.offsets.popper[ee]-=Q[ee]-(Y[ce]-pe)),Y[ee]+pe>Q[ce]&&(f.offsets.popper[ee]+=Y[ee]+pe-Q[ce]),f.offsets.popper=we(f.offsets.popper);var Fe=Y[ee]+Y[ie]/2-pe/2,Gt=s(f.instance.popper),Wt=parseFloat(Gt["margin"+ae]),yt=parseFloat(Gt["border"+ae+"Width"]),Xt=Fe-f.offsets.popper[ee]-Wt-yt;return Xt=Math.max(Math.min(Q[ie]-pe,Xt),0),f.arrowElement=N,f.offsets.arrow=(b={},K(b,ee,Math.round(Xt)),K(b,le,""),b),f}function oe(f){return f==="end"?"start":f==="start"?"end":f}var A=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],lt=A.slice(3);function ai(f){var C=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,b=lt.indexOf(f),N=lt.slice(b+1).concat(lt.slice(0,b));return C?N.reverse():N}var ui={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function to(f,C){if(sr(f.instance.modifiers,"inner")||f.flipped&&f.placement===f.originalPlacement)return f;var b=Ie(f.instance.popper,f.instance.reference,C.padding,C.boundariesElement,f.positionFixed),N=f.placement.split("-")[0],j=de(N),F=f.placement.split("-")[1]||"",Q=[];switch(C.behavior){case ui.FLIP:Q=[N,j];break;case ui.CLOCKWISE:Q=ai(N);break;case ui.COUNTERCLOCKWISE:Q=ai(N,!0);break;default:Q=C.behavior}return Q.forEach(function(Y,G){if(N!==Y||Q.length===G+1)return f;N=f.placement.split("-")[0],j=de(N);var ie=f.offsets.popper,ae=f.offsets.reference,ee=Math.floor,le=N==="left"&&ee(ie.right)>ee(ae.left)||N==="right"&&ee(ie.left)<ee(ae.right)||N==="top"&&ee(ie.bottom)>ee(ae.top)||N==="bottom"&&ee(ie.top)<ee(ae.bottom),ce=ee(ie.left)<ee(b.left),pe=ee(ie.right)>ee(b.right),Fe=ee(ie.top)<ee(b.top),Gt=ee(ie.bottom)>ee(b.bottom),Wt=N==="left"&&ce||N==="right"&&pe||N==="top"&&Fe||N==="bottom"&&Gt,yt=["top","bottom"].indexOf(N)!==-1,Xt=!!C.flipVariations&&(yt&&F==="start"&&ce||yt&&F==="end"&&pe||!yt&&F==="start"&&Fe||!yt&&F==="end"&&Gt),li=!!C.flipVariationsByContent&&(yt&&F==="start"&&pe||yt&&F==="end"&&ce||!yt&&F==="start"&&Gt||!yt&&F==="end"&&Fe),Ja=Xt||li;(le||Wt||Ja)&&(f.flipped=!0,(le||Wt)&&(N=Q[G+1]),Ja&&(F=oe(F)),f.placement=N+(F?"-"+F:""),f.offsets.popper=ne({},f.offsets.popper,xe(f.instance.popper,f.offsets.reference,f.placement)),f=ut(f.instance.modifiers,f,"flip"))}),f}function si(f){var C=f.offsets,b=C.popper,N=C.reference,j=f.placement.split("-")[0],F=Math.floor,Q=["top","bottom"].indexOf(j)!==-1,Y=Q?"right":"bottom",G=Q?"left":"top",ie=Q?"width":"height";return b[Y]<F(N[G])&&(f.offsets.popper[G]=F(N[G])-b[ie]),b[G]>F(N[Y])&&(f.offsets.popper[G]=F(N[Y])),f}function kd(f,C,b,N){var j=f.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),F=+j[1],Q=j[2];if(!F)return f;if(Q.indexOf("%")===0){var Y=void 0;switch(Q){case"%p":Y=b;break;case"%":case"%r":default:Y=N}var G=we(Y);return G[C]/100*F}else if(Q==="vh"||Q==="vw"){var ie=void 0;return Q==="vh"?ie=Math.max(document.documentElement.clientHeight,window.innerHeight||0):ie=Math.max(document.documentElement.clientWidth,window.innerWidth||0),ie/100*F}else return F}function ro(f,C,b,N){var j=[0,0],F=["right","left"].indexOf(N)!==-1,Q=f.split(/(\+|\-)/).map(function(ae){return ae.trim()}),Y=Q.indexOf(Pe(Q,function(ae){return ae.search(/,|\s/)!==-1}));Q[Y]&&Q[Y].indexOf(",")===-1&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var G=/\s*,\s*|\s+/,ie=Y!==-1?[Q.slice(0,Y).concat([Q[Y].split(G)[0]]),[Q[Y].split(G)[1]].concat(Q.slice(Y+1))]:[Q];return ie=ie.map(function(ae,ee){var le=(ee===1?!F:F)?"height":"width",ce=!1;return ae.reduce(function(pe,Fe){return pe[pe.length-1]===""&&["+","-"].indexOf(Fe)!==-1?(pe[pe.length-1]=Fe,ce=!0,pe):ce?(pe[pe.length-1]+=Fe,ce=!1,pe):pe.concat(Fe)},[]).map(function(pe){return kd(pe,le,C,b)})}),ie.forEach(function(ae,ee){ae.forEach(function(le,ce){oi(le)&&(j[ee]+=le*(ae[ce-1]==="-"?-1:1))})}),j}function Xa(f,C){var b=C.offset,N=f.placement,j=f.offsets,F=j.popper,Q=j.reference,Y=N.split("-")[0],G=void 0;return oi(+b)?G=[+b,0]:G=ro(b,F,Q,Y),Y==="left"?(F.top+=G[0],F.left-=G[1]):Y==="right"?(F.top+=G[0],F.left+=G[1]):Y==="top"?(F.left+=G[0],F.top-=G[1]):Y==="bottom"&&(F.left+=G[0],F.top+=G[1]),f.popper=F,f}function br(f,C){var b=C.boundariesElement||R(f.instance.popper);f.instance.reference===b&&(b=R(b));var N=mr("transform"),j=f.instance.popper.style,F=j.top,Q=j.left,Y=j[N];j.top="",j.left="",j[N]="";var G=Ie(f.instance.popper,f.instance.reference,C.padding,b,f.positionFixed);j.top=F,j.left=Q,j[N]=Y,C.boundaries=G;var ie=C.priority,ae=f.offsets.popper,ee={primary:function(ce){var pe=ae[ce];return ae[ce]<G[ce]&&!C.escapeWithReference&&(pe=Math.max(ae[ce],G[ce])),K({},ce,pe)},secondary:function(ce){var pe=ce==="right"?"left":"top",Fe=ae[pe];return ae[ce]>G[ce]&&!C.escapeWithReference&&(Fe=Math.min(ae[pe],G[ce]-(ce==="right"?ae.width:ae.height))),K({},pe,Fe)}};return ie.forEach(function(le){var ce=["left","top"].indexOf(le)!==-1?"primary":"secondary";ae=ne({},ae,ee[ce](le))}),f.offsets.popper=ae,f}function no(f){var C=f.placement,b=C.split("-")[0],N=C.split("-")[1];if(N){var j=f.offsets,F=j.reference,Q=j.popper,Y=["bottom","top"].indexOf(b)!==-1,G=Y?"left":"top",ie=Y?"width":"height",ae={start:K({},G,F[G]),end:K({},G,F[G]+F[ie]-Q[ie])};f.offsets.popper=ne({},Q,ae[N])}return f}function Md(f){if(!eo(f.instance.modifiers,"hide","preventOverflow"))return f;var C=f.offsets.reference,b=Pe(f.instance.modifiers,function(N){return N.name==="preventOverflow"}).boundaries;if(C.bottom<b.top||C.left>b.right||C.top>b.bottom||C.right<b.left){if(f.hide===!0)return f;f.hide=!0,f.attributes["x-out-of-boundaries"]=""}else{if(f.hide===!1)return f;f.hide=!1,f.attributes["x-out-of-boundaries"]=!1}return f}function Nd(f){var C=f.placement,b=C.split("-")[0],N=f.offsets,j=N.popper,F=N.reference,Q=["left","right"].indexOf(b)!==-1,Y=["top","left"].indexOf(b)===-1;return j[Q?"left":"top"]=F[b]-(Y?j[Q?"width":"height"]:0),f.placement=de(C),f.offsets.popper=we(j),f}var Cn={shift:{order:100,enabled:!0,fn:no},offset:{order:200,enabled:!0,fn:Xa,offset:0},preventOverflow:{order:300,enabled:!0,fn:br,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:si},arrow:{order:500,enabled:!0,fn:bd,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:to,behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:Nd},hide:{order:800,enabled:!0,fn:Md},computeStyle:{order:850,enabled:!0,fn:Od,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:Cd,onLoad:Dd,gpuAcceleration:void 0}},oo={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:Cn},io=function(){function f(C,b){var N=this,j=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};B(this,f),this.scheduleUpdate=function(){return requestAnimationFrame(N.update)},this.update=i(this.update.bind(this)),this.options=ne({},f.Defaults,j),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=C&&C.jquery?C[0]:C,this.popper=b&&b.jquery?b[0]:b,this.options.modifiers={},Object.keys(ne({},f.Defaults.modifiers,j.modifiers)).forEach(function(Q){N.options.modifiers[Q]=ne({},f.Defaults.modifiers[Q]||{},j.modifiers?j.modifiers[Q]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(Q){return ne({name:Q},N.options.modifiers[Q])}).sort(function(Q,Y){return Q.order-Y.order}),this.modifiers.forEach(function(Q){Q.enabled&&u(Q.onLoad)&&Q.onLoad(N.reference,N.popper,N.options,Q,N.state)}),this.update();var F=this.options.eventsEnabled;F&&this.enableEventListeners(),this.state.eventsEnabled=F}return V(f,[{key:"update",value:function(){return st.call(this)}},{key:"destroy",value:function(){return Zn.call(this)}},{key:"enableEventListeners",value:function(){return _d.call(this)}},{key:"disableEventListeners",value:function(){return Ed.call(this)}}]),f}();return io.Utils=(typeof window!="undefined"?window:global).PopperUtils,io.placements=A,io.Defaults=oo,io})});var NC=L((kY,kC)=>{"use strict";var MC="__global_unique_id__";kC.exports=function(){return global[MC]=(global[MC]||0)+1}});var Qm=L((MY,RC)=>{"use strict";var VA=!1,qC=function(){};VA&&(IC=function(t,r){var n=arguments.length;r=new Array(n>1?n-1:0);for(var o=1;o<n;o++)r[o-1]=arguments[o];var i=0,u="Warning: "+t.replace(/%s/g,function(){return r[i++]});typeof console!="undefined"&&console.error(u);try{throw new Error(u)}catch(s){}},qC=function(e,t,r){var n=arguments.length;r=new Array(n>2?n-2:0);for(var o=2;o<n;o++)r[o-2]=arguments[o];if(t===void 0)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");e||IC.apply(null,[t].concat(r))});var IC;RC.exports=qC});var jC=L((id,LC)=>{"use strict";id.__esModule=!0;var Bm=_e(),NY=ad(Bm),$A=Wn(),AC=ad($A),zA=NC(),KA=ad(zA),GA=Qm(),RY=ad(GA);function ad(e){return e&&e.__esModule?e:{default:e}}function FC(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ud(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function UC(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var Vm=1073741823;function XA(e,t){return e===t?e!==0||1/e==1/t:e!==e&&t!==t}function JA(e){var t=[];return{on:function(n){t.push(n)},off:function(n){t=t.filter(function(o){return o!==n})},get:function(){return e},set:function(n,o){e=n,t.forEach(function(i){return i(e,o)})}}}function ZA(e){return Array.isArray(e)?e[0]:e}function e2(e,t){var r,n,o="__create-react-context-"+(0,KA.default)()+"__",i=function(s){UC(c,s);function c(){var d,p,_;FC(this,c);for(var g=arguments.length,T=Array(g),R=0;R<g;R++)T[R]=arguments[R];return _=(d=(p=ud(this,s.call.apply(s,[this].concat(T))),p),p.emitter=JA(p.props.value),d),ud(p,_)}return c.prototype.getChildContext=function(){var p;return p={},p[o]=this.emitter,p},c.prototype.componentWillReceiveProps=function(p){if(this.props.value!==p.value){var _=this.props.value,g=p.value,T=void 0;XA(_,g)?T=0:(T=typeof t=="function"?t(_,g):Vm,T|=0,T!==0&&this.emitter.set(p.value,T))}},c.prototype.render=function(){return this.props.children},c}(Bm.Component);i.childContextTypes=(r={},r[o]=AC.default.object.isRequired,r);var u=function(s){UC(c,s);function c(){var d,p,_;FC(this,c);for(var g=arguments.length,T=Array(g),R=0;R<g;R++)T[R]=arguments[R];return _=(d=(p=ud(this,s.call.apply(s,[this].concat(T))),p),p.state={value:p.getValue()},p.onUpdate=function(U,S){var y=p.observedBits|0;(y&S)!=0&&p.setState({value:p.getValue()})},d),ud(p,_)}return c.prototype.componentWillReceiveProps=function(p){var _=p.observedBits;this.observedBits=_??Vm},c.prototype.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var p=this.props.observedBits;this.observedBits=p??Vm},c.prototype.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},c.prototype.getValue=function(){return this.context[o]?this.context[o].get():e},c.prototype.render=function(){return ZA(this.props.children)(this.state.value)},c}(Bm.Component);return u.contextTypes=(n={},n[o]=AC.default.object,n),{Provider:i,Consumer:u}}id.default=e2;LC.exports=id.default});var HC=L((sd,YC)=>{"use strict";sd.__esModule=!0;var t2=_e(),r2=WC(t2),n2=jC(),o2=WC(n2);function WC(e){return e&&e.__esModule?e:{default:e}}sd.default=r2.default.createContext||o2.default;YC.exports=sd.default});var dd=L(Sn=>{"use strict";var i2=Qa(),ld=Wa();Object.defineProperty(Sn,"__esModule",{value:!0});Sn.default=Sn.ManagerReferenceNodeSetterContext=Sn.ManagerReferenceNodeContext=void 0;var a2=ld(rd()),cd=ld(nd()),QC=ld(od()),$m=i2(_e()),BC=ld(HC()),VC=(0,BC.default)();Sn.ManagerReferenceNodeContext=VC;var $C=(0,BC.default)();Sn.ManagerReferenceNodeSetterContext=$C;var u2=function(e){(0,a2.default)(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,(0,QC.default)((0,cd.default)((0,cd.default)(n)),"referenceNode",void 0),(0,QC.default)((0,cd.default)((0,cd.default)(n)),"setReferenceNode",function(s){s&&n.referenceNode!==s&&(n.referenceNode=s,n.forceUpdate())}),n}var r=t.prototype;return r.componentWillUnmount=function(){this.referenceNode=null},r.render=function(){return $m.createElement(VC.Provider,{value:this.referenceNode},$m.createElement($C.Provider,{value:this.setReferenceNode},this.props.children))},t}($m.Component);Sn.default=u2});var zm=L(Or=>{"use strict";Object.defineProperty(Or,"__esModule",{value:!0});Or.setRef=Or.shallowEqual=Or.safeInvoke=Or.unwrapArray=void 0;var s2=function(t){return Array.isArray(t)?t[0]:t};Or.unwrapArray=s2;var zC=function(t){if(typeof t=="function"){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return t.apply(void 0,n)}};Or.safeInvoke=zC;var l2=function(t,r){var n=Object.keys(t),o=Object.keys(r);if(o.length!==n.length)return!1;for(var i=0;i<o.length;i++){var u=n[i];if(t[u]!==r[u])return!1}return!0};Or.shallowEqual=l2;var c2=function(t,r){if(typeof t=="function")return zC(t,r);t!=null&&(t.current=r)};Or.setRef=c2});var GC=L(Gn=>{"use strict";var d2=Qa(),ri=Wa();Object.defineProperty(Gn,"__esModule",{value:!0});Gn.default=f2;Gn.placements=Gn.InnerPopper=void 0;var p2=ri(OC()),fd=ri(Ym()),h2=ri(rd()),De=ri(nd()),Ot=ri(od()),Km=d2(_e()),KC=ri(bC()),m2=dd(),Gm=zm(),v2={position:"absolute",top:0,left:0,opacity:0,pointerEvents:"none"},y2={},Xm=function(e){(0,h2.default)(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,(0,Ot.default)((0,De.default)((0,De.default)(n)),"state",{data:void 0,placement:void 0}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"popperInstance",void 0),(0,Ot.default)((0,De.default)((0,De.default)(n)),"popperNode",null),(0,Ot.default)((0,De.default)((0,De.default)(n)),"arrowNode",null),(0,Ot.default)((0,De.default)((0,De.default)(n)),"setPopperNode",function(s){!s||n.popperNode===s||((0,Gm.setRef)(n.props.innerRef,s),n.popperNode=s,n.updatePopperInstance())}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"setArrowNode",function(s){n.arrowNode=s}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"updateStateModifier",{enabled:!0,order:900,fn:function(c){var d=c.placement;return n.setState({data:c,placement:d}),c}}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"getOptions",function(){return{placement:n.props.placement,eventsEnabled:n.props.eventsEnabled,positionFixed:n.props.positionFixed,modifiers:(0,fd.default)({},n.props.modifiers,{arrow:(0,fd.default)({},n.props.modifiers&&n.props.modifiers.arrow,{enabled:!!n.arrowNode,element:n.arrowNode}),applyStyle:{enabled:!1},updateStateModifier:n.updateStateModifier})}}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"getPopperStyle",function(){return!n.popperNode||!n.state.data?v2:(0,fd.default)({position:n.state.data.offsets.popper.position},n.state.data.styles)}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"getPopperPlacement",function(){return n.state.data?n.state.placement:void 0}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"getArrowStyle",function(){return!n.arrowNode||!n.state.data?y2:n.state.data.arrowStyles}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"getOutOfBoundariesState",function(){return n.state.data?n.state.data.hide:void 0}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"destroyPopperInstance",function(){!n.popperInstance||(n.popperInstance.destroy(),n.popperInstance=null)}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"updatePopperInstance",function(){n.destroyPopperInstance();var s=(0,De.default)((0,De.default)(n)),c=s.popperNode,d=n.props.referenceElement;!d||!c||(n.popperInstance=new KC.default(d,c,n.getOptions()))}),(0,Ot.default)((0,De.default)((0,De.default)(n)),"scheduleUpdate",function(){n.popperInstance&&n.popperInstance.scheduleUpdate()}),n}var r=t.prototype;return r.componentDidUpdate=function(o,i){this.props.placement!==o.placement||this.props.referenceElement!==o.referenceElement||this.props.positionFixed!==o.positionFixed||this.props.modifiers!==o.modifiers?this.updatePopperInstance():this.props.eventsEnabled!==o.eventsEnabled&&this.popperInstance&&(this.props.eventsEnabled?this.popperInstance.enableEventListeners():this.popperInstance.disableEventListeners()),i.placement!==this.state.placement&&this.scheduleUpdate()},r.componentWillUnmount=function(){(0,Gm.setRef)(this.props.innerRef,null),this.destroyPopperInstance()},r.render=function(){return(0,Gm.unwrapArray)(this.props.children)({ref:this.setPopperNode,style:this.getPopperStyle(),placement:this.getPopperPlacement(),outOfBoundaries:this.getOutOfBoundariesState(),scheduleUpdate:this.scheduleUpdate,arrowProps:{ref:this.setArrowNode,style:this.getArrowStyle()}})},t}(Km.Component);Gn.InnerPopper=Xm;(0,Ot.default)(Xm,"defaultProps",{placement:"bottom",eventsEnabled:!0,referenceElement:void 0,positionFixed:!1});var g2=KC.default.placements;Gn.placements=g2;function f2(e){var t=e.referenceElement,r=(0,p2.default)(e,["referenceElement"]);return Km.createElement(m2.ManagerReferenceNodeContext.Consumer,null,function(n){return Km.createElement(Xm,(0,fd.default)({referenceElement:t!==void 0?t:n},r))})}});var JC=L(Jm=>{"use strict";var w2=Qa(),Ka=Wa();Object.defineProperty(Jm,"__esModule",{value:!0});Jm.default=_2;var x2=Ka(Ym()),E2=Ka(rd()),XC=Ka(nd()),S2=Ka(od()),Zm=w2(_e()),C2=Ka(Qm()),D2=dd(),pd=zm(),P2=function(e){(0,E2.default)(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,(0,S2.default)((0,XC.default)((0,XC.default)(n)),"refHandler",function(s){(0,pd.setRef)(n.props.innerRef,s),(0,pd.safeInvoke)(n.props.setReferenceNode,s)}),n}var r=t.prototype;return r.componentWillUnmount=function(){(0,pd.setRef)(this.props.innerRef,null)},r.render=function(){return(0,C2.default)(Boolean(this.props.setReferenceNode),"`Reference` should not be used outside of a `Manager` component."),(0,pd.unwrapArray)(this.props.children)({ref:this.refHandler})},t}(Zm.Component);function _2(e){return Zm.createElement(D2.ManagerReferenceNodeSetterContext.Consumer,null,function(t){return Zm.createElement(P2,(0,x2.default)({setReferenceNode:t},e))})}});var tD=L(ni=>{"use strict";var ZC=Wa(),T2=Qa();Object.defineProperty(ni,"__esModule",{value:!0});Object.defineProperty(ni,"Popper",{enumerable:!0,get:function(){return eD.default}});Object.defineProperty(ni,"placements",{enumerable:!0,get:function(){return eD.placements}});Object.defineProperty(ni,"Manager",{enumerable:!0,get:function(){return O2.default}});Object.defineProperty(ni,"Reference",{enumerable:!0,get:function(){return b2.default}});var eD=T2(GC()),O2=ZC(dd()),b2=ZC(JC())});var nD=L((hd,rD)=>{(function(e,t){typeof hd=="object"&&typeof rD!="undefined"?t(hd,_e(),Wn(),sx(),dx(),Yh(),vE(),nm(),im(),Il(),sm(),Fl(),dm(),CE(),PE(),OE(),kE(),NE(),qE(),AE(),jE(),HE(),VE(),KE(),a1(),l1(),f1(),m1(),g1(),_1(),E1(),C1(),Cm(),k1(),N1(),I1(),F1(),Q1(),z1(),J1(),rS(),xc(),Jl(),iS(),Om(),cS(),pS(),vS(),wS(),SS(),TS(),MS(),IS(),US(),HS(),$S(),GS(),ue(),mC(),xC(),DC(),tD(),ws()):typeof define=="function"&&define.amd?define(["exports","react","prop-types","classnames","date-fns/isDate","date-fns/isValid","date-fns/format","date-fns/addMinutes","date-fns/addHours","date-fns/addDays","date-fns/addWeeks","date-fns/addMonths","date-fns/addYears","date-fns/subMinutes","date-fns/subHours","date-fns/subDays","date-fns/subWeeks","date-fns/subMonths","date-fns/subYears","date-fns/getSeconds","date-fns/getMinutes","date-fns/getHours","date-fns/getDay","date-fns/getDate","date-fns/getISOWeek","date-fns/getMonth","date-fns/getQuarter","date-fns/getYear","date-fns/getTime","date-fns/setSeconds","date-fns/setMinutes","date-fns/setHours","date-fns/setMonth","date-fns/setQuarter","date-fns/setYear","date-fns/min","date-fns/max","date-fns/differenceInCalendarDays","date-fns/differenceInCalendarMonths","date-fns/differenceInCalendarWeeks","date-fns/differenceInCalendarYears","date-fns/startOfDay","date-fns/startOfWeek","date-fns/startOfMonth","date-fns/startOfQuarter","date-fns/startOfYear","date-fns/endOfDay","date-fns/endOfWeek","date-fns/endOfMonth","date-fns/isEqual","date-fns/isSameDay","date-fns/isSameMonth","date-fns/isSameYear","date-fns/isSameQuarter","date-fns/isAfter","date-fns/isBefore","date-fns/isWithinInterval","date-fns/toDate","date-fns/parse","date-fns/parseISO","react-onclickoutside","react-popper","react-dom"],t):t((e=typeof globalThis!="undefined"?globalThis:e||self).DatePicker={},e.React,e.PropTypes,e.classNames,e.isDate,e.isValidDate,e.format,e.addMinutes,e.addHours,e.utils$2,e.utils$3,e.addMonths,e.addYears,null,null,e.subDays,e.subWeeks,e.subMonths,e.subYears,e.getSeconds,e.getMinutes,e.getHours,e.getDay,e.getDate,e.getISOWeek,e.getMonth,e.getQuarter,e.getYear,e.getTime,e.setSeconds,e.setMinutes,e.setHours,e.utils,e.utils$1,e.utils$4,e.min,e.max,e.differenceInCalendarDays,e.differenceInCalendarMonths,null,e.differenceInCalendarYears,e.startOfDay,e.startOfWeek,e.startOfMonth,e.startOfQuarter,e.startOfYear,e.endOfDay,null,null,e.dfIsEqual,e.dfIsSameDay,e.dfIsSameMonth,e.dfIsSameYear,e.dfIsSameQuarter,e.isAfter,e.isBefore,e.isWithinInterval,e.toDate,e.parse,e.parseISO,e.onClickOutside,e.ReactPopper,e.ReactDOM)})(hd,function(e,t,r,n,o,i,u,s,c,d,p,_,g,T,R,U,S,y,P,M,I,z,H,B,V,K,ne,we,Oe,Ae,ze,Ne,tt,Ie,Me,ve,Ce,se,de,xe,Pe,Et,ut,st,sr,mr,Zn,yd,gd,wd,_d,xd,Ed,oi,ii,Sd,Cd,Dd,Pd,Td,Od,eo,bd){"use strict";function oe(E){return E&&typeof E=="object"&&"default"in E?E:{default:E}}var A=oe(t),lt=oe(n),ai=oe(o),ui=oe(i),to=oe(u),si=oe(s),kd=oe(c),ro=oe(d),Xa=oe(p),br=oe(_),no=oe(g),Md=oe(U),Nd=oe(S),Cn=oe(y),oo=oe(P),io=oe(M),f=oe(I),C=oe(z),b=oe(H),N=oe(B),j=oe(V),F=oe(K),Q=oe(ne),Y=oe(we),G=oe(Oe),ie=oe(Ae),ae=oe(ze),ee=oe(Ne),le=oe(tt),ce=oe(Ie),pe=oe(Me),Fe=oe(ve),Gt=oe(Ce),Wt=oe(se),yt=oe(de),Xt=oe(Pe),li=oe(Et),Ja=oe(ut),fD=oe(st),pD=oe(sr),hD=oe(mr),mD=oe(Zn),vD=oe(wd),yD=oe(_d),gD=oe(xd),wD=oe(Ed),_D=oe(oi),kr=oe(ii),Dn=oe(Sd),ev=oe(Cd),xD=oe(Dd),Rd=oe(Pd),ED=oe(Td),Za=oe(Od),SD=oe(bd);function tv(E){return(tv=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(v){return typeof v}:function(v){return v&&typeof Symbol=="function"&&v.constructor===Symbol&&v!==Symbol.prototype?"symbol":typeof v})(E)}function ct(E,v){if(!(E instanceof v))throw new TypeError("Cannot call a class as a function")}function rv(E,v){for(var x=0;x<v.length;x++){var l=v[x];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(E,l.key,l)}}function dt(E,v,x){return v&&rv(E.prototype,v),x&&rv(E,x),E}function O(E,v,x){return v in E?Object.defineProperty(E,v,{value:x,enumerable:!0,configurable:!0,writable:!0}):E[v]=x,E}function eu(){return(eu=Object.assign||function(E){for(var v=1;v<arguments.length;v++){var x=arguments[v];for(var l in x)Object.prototype.hasOwnProperty.call(x,l)&&(E[l]=x[l])}return E}).apply(this,arguments)}function nv(E,v){var x=Object.keys(E);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(E);v&&(l=l.filter(function(a){return Object.getOwnPropertyDescriptor(E,a).enumerable})),x.push.apply(x,l)}return x}function ov(E){for(var v=1;v<arguments.length;v++){var x=arguments[v]!=null?arguments[v]:{};v%2?nv(Object(x),!0).forEach(function(l){O(E,l,x[l])}):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(x)):nv(Object(x)).forEach(function(l){Object.defineProperty(E,l,Object.getOwnPropertyDescriptor(x,l))})}return E}function ft(E,v){if(typeof v!="function"&&v!==null)throw new TypeError("Super expression must either be null or a function");E.prototype=Object.create(v&&v.prototype,{constructor:{value:E,writable:!0,configurable:!0}}),v&&iv(E,v)}function qd(E){return(qd=Object.setPrototypeOf?Object.getPrototypeOf:function(v){return v.__proto__||Object.getPrototypeOf(v)})(E)}function iv(E,v){return(iv=Object.setPrototypeOf||function(x,l){return x.__proto__=l,x})(E,v)}function k(E){if(E===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return E}function CD(E,v){return!v||typeof v!="object"&&typeof v!="function"?k(E):v}function pt(E){var v=function(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(x){return!1}}();return function(){var x,l=qd(E);if(v){var a=qd(this).constructor;x=Reflect.construct(l,arguments,a)}else x=l.apply(this,arguments);return CD(this,x)}}function DD(E){return function(v){if(Array.isArray(v))return Id(v)}(E)||function(v){if(typeof Symbol!="undefined"&&Symbol.iterator in Object(v))return Array.from(v)}(E)||function(v,x){if(!!v){if(typeof v=="string")return Id(v,x);var l=Object.prototype.toString.call(v).slice(8,-1);if(l==="Object"&&v.constructor&&(l=v.constructor.name),l==="Map"||l==="Set")return Array.from(v);if(l==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l))return Id(v,x)}}(E)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function Id(E,v){(v==null||v>E.length)&&(v=E.length);for(var x=0,l=new Array(v);x<v;x++)l[x]=E[x];return l}function av(E,v){switch(E){case"P":return v.date({width:"short"});case"PP":return v.date({width:"medium"});case"PPP":return v.date({width:"long"});case"PPPP":default:return v.date({width:"full"})}}function uv(E,v){switch(E){case"p":return v.time({width:"short"});case"pp":return v.time({width:"medium"});case"ppp":return v.time({width:"long"});case"pppp":default:return v.time({width:"full"})}}var PD={p:uv,P:function(E,v){var x,l=E.match(/(P+)(p+)?/),a=l[1],m=l[2];if(!m)return av(E,v);switch(a){case"P":x=v.dateTime({width:"short"});break;case"PP":x=v.dateTime({width:"medium"});break;case"PPP":x=v.dateTime({width:"long"});break;case"PPPP":default:x=v.dateTime({width:"full"})}return x.replace("{{date}}",av(a,v)).replace("{{time}}",uv(m,v))}},ci=12,TD=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;function ht(E){var v=E?typeof E=="string"||E instanceof String?ED.default(E):xD.default(E):new Date;return Vr(v)?v:null}function OD(E,v,x,l){var a=null,m=Kr(x)||Kr(zr()),D=!0;return Array.isArray(v)?(v.forEach(function(h){var w=Rd.default(E,h,new Date,{locale:m});l&&(D=Vr(w)&&E===to.default(w,h,{awareOfUnicodeTokens:!0})),Vr(w)&&D&&(a=w)}),a):(a=Rd.default(E,v,new Date,{locale:m}),l?D=Vr(a)&&E===to.default(a,v,{awareOfUnicodeTokens:!0}):Vr(a)||(v=v.match(TD).map(function(h){var w=h[0];return w==="p"||w==="P"?m?(0,PD[w])(h,m.formatLong):w:h}).join(""),E.length>0&&(a=Rd.default(E,v.slice(0,E.length),new Date)),Vr(a)||(a=new Date(E))),Vr(a)&&D?a:null)}function Vr(E){return ui.default(E)&&kr.default(E,new Date("1/1/1000"))}function rt(E,v,x){if(x==="en")return to.default(E,v,{awareOfUnicodeTokens:!0});var l=Kr(x);return x&&!l&&console.warn('A locale object was not found for the provided string ["'.concat(x,'"].')),!l&&zr()&&Kr(zr())&&(l=Kr(zr())),to.default(E,v,{locale:l||null,awareOfUnicodeTokens:!0})}function sv(E,v){var x=v.hour,l=x===void 0?0:x,a=v.minute,m=a===void 0?0:a,D=v.second,h=D===void 0?0:D;return ee.default(ae.default(ie.default(E,h),m),l)}function bD(E,v){var x=v&&Kr(v)||zr()&&Kr(zr());return j.default(E,x?{locale:x}:null)}function kD(E,v){return rt(E,"ddd",v)}function MD(E){return li.default(E)}function Ld(E,v){var x=Kr(v||zr());return Ja.default(E,{locale:x})}function Pn(E){return fD.default(E)}function di(E){return hD.default(E)}function ND(E){return pD.default(E)}function lv(E,v){return E&&v?wD.default(E,v):!E&&!v}function $r(E,v){return E&&v?gD.default(E,v):!E&&!v}function tu(E,v){return E&&v?_D.default(E,v):!E&&!v}function qt(E,v){return E&&v?yD.default(E,v):!E&&!v}function ao(E,v){return E&&v?vD.default(E,v):!E&&!v}function ru(E,v,x){var l,a=li.default(v),m=mD.default(x);try{l=ev.default(E,{start:a,end:m})}catch(D){l=!1}return l}function zr(){return(typeof window!="undefined"?window:global).__localeId__}function Kr(E){if(typeof E=="string"){var v=typeof window!="undefined"?window:global;return v.__localeData__?v.__localeData__[E]:null}return E}function cv(E,v){return rt(le.default(ht(),E),"LLLL",v)}function dv(E,v){return rt(le.default(ht(),E),"LLL",v)}function RD(E,v){return rt(ce.default(ht(),E),"QQQ",v)}function Ad(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.maxDate,a=v.excludeDates,m=v.includeDates,D=v.filterDate;return nu(E,{minDate:x,maxDate:l})||a&&a.some(function(h){return qt(E,h)})||m&&!m.some(function(h){return qt(E,h)})||D&&!D(ht(E))||!1}function fv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.excludeDates;return x&&x.some(function(l){return qt(E,l)})||!1}function qD(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.maxDate,a=v.excludeDates,m=v.includeDates,D=v.filterDate;return nu(E,{minDate:x,maxDate:l})||a&&a.some(function(h){return $r(E,h)})||m&&!m.some(function(h){return $r(E,h)})||D&&!D(ht(E))||!1}function ID(E,v,x,l){var a=Y.default(E),m=F.default(E),D=Y.default(v),h=F.default(v),w=Y.default(l);return a===D&&a===w?m<=x&&x<=h:a<D?w===a&&m<=x||w===D&&h>=x||w<D&&w>a:void 0}function LD(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.maxDate,a=v.excludeDates,m=v.includeDates,D=v.filterDate;return nu(E,{minDate:x,maxDate:l})||a&&a.some(function(h){return tu(E,h)})||m&&!m.some(function(h){return tu(E,h)})||D&&!D(ht(E))||!1}function AD(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.maxDate,a=new Date(E,0,1);return nu(a,{minDate:x,maxDate:l})||!1}function FD(E,v,x,l){var a=Y.default(E),m=Q.default(E),D=Y.default(v),h=Q.default(v),w=Y.default(l);return a===D&&a===w?m<=x&&x<=h:a<D?w===a&&m<=x||w===D&&h>=x||w<D&&w>a:void 0}function nu(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.maxDate;return x&&Wt.default(E,x)<0||l&&Wt.default(E,l)>0}function pv(E,v){return v.some(function(x){return C.default(x)===C.default(E)&&f.default(x)===f.default(E)})}function hv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.excludeTimes,l=v.includeTimes,a=v.filterTime;return x&&pv(E,x)||l&&!pv(E,l)||a&&!a(E)||!1}function mv(E,v){var x=v.minTime,l=v.maxTime;if(!x||!l)throw new Error("Both minTime and maxTime props required");var a,m=ht(),D=ee.default(ae.default(m,f.default(E)),C.default(E)),h=ee.default(ae.default(m,f.default(x)),C.default(x)),w=ee.default(ae.default(m,f.default(l)),C.default(l));try{a=!ev.default(D,{start:h,end:w})}catch(q){a=!1}return a}function vv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.includeDates,a=Cn.default(E,1);return x&&yt.default(x,a)>0||l&&l.every(function(m){return yt.default(m,a)>0})||!1}function yv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.maxDate,l=v.includeDates,a=br.default(E,1);return x&&yt.default(a,x)>0||l&&l.every(function(m){return yt.default(a,m)>0})||!1}function gv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.minDate,l=v.includeDates,a=oo.default(E,1);return x&&Xt.default(x,a)>0||l&&l.every(function(m){return Xt.default(m,a)>0})||!1}function wv(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},x=v.maxDate,l=v.includeDates,a=no.default(E,1);return x&&Xt.default(a,x)>0||l&&l.every(function(m){return Xt.default(a,m)>0})||!1}function _v(E){var v=E.minDate,x=E.includeDates;if(x&&v){var l=x.filter(function(a){return Wt.default(a,v)>=0});return Fe.default(l)}return x?Fe.default(x):v}function xv(E){var v=E.maxDate,x=E.includeDates;if(x&&v){var l=x.filter(function(a){return Wt.default(a,v)<=0});return Gt.default(l)}return x?Gt.default(x):v}function Ev(){for(var E=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"react-datepicker__day--highlighted",x=new Map,l=0,a=E.length;l<a;l++){var m=E[l];if(ai.default(m)){var D=rt(m,"MM.dd.yyyy"),h=x.get(D)||[];h.includes(v)||(h.push(v),x.set(D,h))}else if(tv(m)==="object"){var w=Object.keys(m),q=w[0],W=m[w[0]];if(typeof q=="string"&&W.constructor===Array)for(var J=0,Z=W.length;J<Z;J++){var ye=rt(W[J],"MM.dd.yyyy"),he=x.get(ye)||[];he.includes(q)||(he.push(q),x.set(ye,he))}}}return x}function UD(E,v,x,l,a){for(var m=a.length,D=[],h=0;h<m;h++){var w=si.default(kd.default(E,C.default(a[h])),f.default(a[h])),q=si.default(E,(x+1)*l);kr.default(w,v)&&Dn.default(w,q)&&D.push(a[h])}return D}function Sv(E){return E<10?"0".concat(E):"".concat(E)}function ou(E){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:ci,x=Math.ceil(Y.default(E)/v)*v,l=x-(v-1);return{startPeriod:l,endPeriod:x}}function jD(E,v,x,l){for(var a=[],m=0;m<2*v+1;m++){var D=E+v-m,h=!0;x&&(h=Y.default(x)<=D),l&&h&&(h=Y.default(l)>=D),h&&a.push(D)}return a}var YD=function(E){ft(x,E);var v=pt(x);function x(l){var a;ct(this,x),O(k(a=v.call(this,l)),"renderOptions",function(){var w=a.props.year,q=a.state.yearsList.map(function(Z){return A.default.createElement("div",{className:w===Z?"react-datepicker__year-option react-datepicker__year-option--selected_year":"react-datepicker__year-option",key:Z,onClick:a.onChange.bind(k(a),Z)},w===Z?A.default.createElement("span",{className:"react-datepicker__year-option--selected"},"\u2713"):"",Z)}),W=a.props.minDate?Y.default(a.props.minDate):null,J=a.props.maxDate?Y.default(a.props.maxDate):null;return J&&a.state.yearsList.find(function(Z){return Z===J})||q.unshift(A.default.createElement("div",{className:"react-datepicker__year-option",key:"upcoming",onClick:a.incrementYears},A.default.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming"}))),W&&a.state.yearsList.find(function(Z){return Z===W})||q.push(A.default.createElement("div",{className:"react-datepicker__year-option",key:"previous",onClick:a.decrementYears},A.default.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous"}))),q}),O(k(a),"onChange",function(w){a.props.onChange(w)}),O(k(a),"handleClickOutside",function(){a.props.onCancel()}),O(k(a),"shiftYears",function(w){var q=a.state.yearsList.map(function(W){return W+w});a.setState({yearsList:q})}),O(k(a),"incrementYears",function(){return a.shiftYears(1)}),O(k(a),"decrementYears",function(){return a.shiftYears(-1)});var m=l.yearDropdownItemNumber,D=l.scrollableYearDropdown,h=m||(D?10:5);return a.state={yearsList:jD(a.props.year,h,a.props.minDate,a.props.maxDate)},a}return dt(x,[{key:"render",value:function(){var l=lt.default({"react-datepicker__year-dropdown":!0,"react-datepicker__year-dropdown--scrollable":this.props.scrollableYearDropdown});return A.default.createElement("div",{className:l},this.renderOptions())}}]),x}(A.default.Component),WD=Za.default(YD),HD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"state",{dropdownVisible:!1}),O(k(l),"renderSelectOptions",function(){for(var h=l.props.minDate?Y.default(l.props.minDate):1900,w=l.props.maxDate?Y.default(l.props.maxDate):2100,q=[],W=h;W<=w;W++)q.push(A.default.createElement("option",{key:W,value:W},W));return q}),O(k(l),"onSelectChange",function(h){l.onChange(h.target.value)}),O(k(l),"renderSelectMode",function(){return A.default.createElement("select",{value:l.props.year,className:"react-datepicker__year-select",onChange:l.onSelectChange},l.renderSelectOptions())}),O(k(l),"renderReadView",function(h){return A.default.createElement("div",{key:"read",style:{visibility:h?"visible":"hidden"},className:"react-datepicker__year-read-view",onClick:function(w){return l.toggleDropdown(w)}},A.default.createElement("span",{className:"react-datepicker__year-read-view--down-arrow"}),A.default.createElement("span",{className:"react-datepicker__year-read-view--selected-year"},l.props.year))}),O(k(l),"renderDropdown",function(){return A.default.createElement(WD,{key:"dropdown",year:l.props.year,onChange:l.onChange,onCancel:l.toggleDropdown,minDate:l.props.minDate,maxDate:l.props.maxDate,scrollableYearDropdown:l.props.scrollableYearDropdown,yearDropdownItemNumber:l.props.yearDropdownItemNumber})}),O(k(l),"renderScrollMode",function(){var h=l.state.dropdownVisible,w=[l.renderReadView(!h)];return h&&w.unshift(l.renderDropdown()),w}),O(k(l),"onChange",function(h){l.toggleDropdown(),h!==l.props.year&&l.props.onChange(h)}),O(k(l),"toggleDropdown",function(h){l.setState({dropdownVisible:!l.state.dropdownVisible},function(){l.props.adjustDateOnChange&&l.handleYearChange(l.props.date,h)})}),O(k(l),"handleYearChange",function(h,w){l.onSelect(h,w),l.setOpen()}),O(k(l),"onSelect",function(h,w){l.props.onSelect&&l.props.onSelect(h,w)}),O(k(l),"setOpen",function(){l.props.setOpen&&l.props.setOpen(!0)}),l}return dt(x,[{key:"render",value:function(){var l;switch(this.props.dropdownMode){case"scroll":l=this.renderScrollMode();break;case"select":l=this.renderSelectMode()}return A.default.createElement("div",{className:"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode)},l)}}]),x}(A.default.Component),QD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"renderOptions",function(){return l.props.monthNames.map(function(h,w){return A.default.createElement("div",{className:l.props.month===w?"react-datepicker__month-option react-datepicker__month-option--selected_month":"react-datepicker__month-option",key:h,onClick:l.onChange.bind(k(l),w)},l.props.month===w?A.default.createElement("span",{className:"react-datepicker__month-option--selected"},"\u2713"):"",h)})}),O(k(l),"onChange",function(h){return l.props.onChange(h)}),O(k(l),"handleClickOutside",function(){return l.props.onCancel()}),l}return dt(x,[{key:"render",value:function(){return A.default.createElement("div",{className:"react-datepicker__month-dropdown"},this.renderOptions())}}]),x}(A.default.Component),BD=Za.default(QD),VD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"state",{dropdownVisible:!1}),O(k(l),"renderSelectOptions",function(h){return h.map(function(w,q){return A.default.createElement("option",{key:q,value:q},w)})}),O(k(l),"renderSelectMode",function(h){return A.default.createElement("select",{value:l.props.month,className:"react-datepicker__month-select",onChange:function(w){return l.onChange(w.target.value)}},l.renderSelectOptions(h))}),O(k(l),"renderReadView",function(h,w){return A.default.createElement("div",{key:"read",style:{visibility:h?"visible":"hidden"},className:"react-datepicker__month-read-view",onClick:l.toggleDropdown},A.default.createElement("span",{className:"react-datepicker__month-read-view--down-arrow"}),A.default.createElement("span",{className:"react-datepicker__month-read-view--selected-month"},w[l.props.month]))}),O(k(l),"renderDropdown",function(h){return A.default.createElement(BD,{key:"dropdown",month:l.props.month,monthNames:h,onChange:l.onChange,onCancel:l.toggleDropdown})}),O(k(l),"renderScrollMode",function(h){var w=l.state.dropdownVisible,q=[l.renderReadView(!w,h)];return w&&q.unshift(l.renderDropdown(h)),q}),O(k(l),"onChange",function(h){l.toggleDropdown(),h!==l.props.month&&l.props.onChange(h)}),O(k(l),"toggleDropdown",function(){return l.setState({dropdownVisible:!l.state.dropdownVisible})}),l}return dt(x,[{key:"render",value:function(){var l,a=this,m=[0,1,2,3,4,5,6,7,8,9,10,11].map(this.props.useShortMonthInDropdown?function(D){return dv(D,a.props.locale)}:function(D){return cv(D,a.props.locale)});switch(this.props.dropdownMode){case"scroll":l=this.renderScrollMode(m);break;case"select":l=this.renderSelectMode(m)}return A.default.createElement("div",{className:"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode)},l)}}]),x}(A.default.Component);function $D(E,v){for(var x=[],l=Pn(E),a=Pn(v);!kr.default(l,a);)x.push(ht(l)),l=br.default(l,1);return x}var zD=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"renderOptions",function(){return a.state.monthYearsList.map(function(m){var D=G.default(m),h=lv(a.props.date,m)&&$r(a.props.date,m);return A.default.createElement("div",{className:h?"react-datepicker__month-year-option --selected_month-year":"react-datepicker__month-year-option",key:D,onClick:a.onChange.bind(k(a),D)},h?A.default.createElement("span",{className:"react-datepicker__month-year-option--selected"},"\u2713"):"",rt(m,a.props.dateFormat,a.props.locale))})}),O(k(a),"onChange",function(m){return a.props.onChange(m)}),O(k(a),"handleClickOutside",function(){a.props.onCancel()}),a.state={monthYearsList:$D(a.props.minDate,a.props.maxDate)},a}return dt(x,[{key:"render",value:function(){var l=lt.default({"react-datepicker__month-year-dropdown":!0,"react-datepicker__month-year-dropdown--scrollable":this.props.scrollableMonthYearDropdown});return A.default.createElement("div",{className:l},this.renderOptions())}}]),x}(A.default.Component),KD=Za.default(zD),GD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"state",{dropdownVisible:!1}),O(k(l),"renderSelectOptions",function(){for(var h=Pn(l.props.minDate),w=Pn(l.props.maxDate),q=[];!kr.default(h,w);){var W=G.default(h);q.push(A.default.createElement("option",{key:W,value:W},rt(h,l.props.dateFormat,l.props.locale))),h=br.default(h,1)}return q}),O(k(l),"onSelectChange",function(h){l.onChange(h.target.value)}),O(k(l),"renderSelectMode",function(){return A.default.createElement("select",{value:G.default(Pn(l.props.date)),className:"react-datepicker__month-year-select",onChange:l.onSelectChange},l.renderSelectOptions())}),O(k(l),"renderReadView",function(h){var w=rt(l.props.date,l.props.dateFormat,l.props.locale);return A.default.createElement("div",{key:"read",style:{visibility:h?"visible":"hidden"},className:"react-datepicker__month-year-read-view",onClick:function(q){return l.toggleDropdown(q)}},A.default.createElement("span",{className:"react-datepicker__month-year-read-view--down-arrow"}),A.default.createElement("span",{className:"react-datepicker__month-year-read-view--selected-month-year"},w))}),O(k(l),"renderDropdown",function(){return A.default.createElement(KD,{key:"dropdown",date:l.props.date,dateFormat:l.props.dateFormat,onChange:l.onChange,onCancel:l.toggleDropdown,minDate:l.props.minDate,maxDate:l.props.maxDate,scrollableMonthYearDropdown:l.props.scrollableMonthYearDropdown,locale:l.props.locale})}),O(k(l),"renderScrollMode",function(){var h=l.state.dropdownVisible,w=[l.renderReadView(!h)];return h&&w.unshift(l.renderDropdown()),w}),O(k(l),"onChange",function(h){l.toggleDropdown();var w=ht(parseInt(h));lv(l.props.date,w)&&$r(l.props.date,w)||l.props.onChange(w)}),O(k(l),"toggleDropdown",function(){return l.setState({dropdownVisible:!l.state.dropdownVisible})}),l}return dt(x,[{key:"render",value:function(){var l;switch(this.props.dropdownMode){case"scroll":l=this.renderScrollMode();break;case"select":l=this.renderSelectMode()}return A.default.createElement("div",{className:"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode)},l)}}]),x}(A.default.Component),XD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"dayEl",A.default.createRef()),O(k(l),"handleClick",function(h){!l.isDisabled()&&l.props.onClick&&l.props.onClick(h)}),O(k(l),"handleMouseEnter",function(h){!l.isDisabled()&&l.props.onMouseEnter&&l.props.onMouseEnter(h)}),O(k(l),"handleOnKeyDown",function(h){h.key===" "&&(h.preventDefault(),h.key="Enter"),l.props.handleOnKeyDown(h)}),O(k(l),"isSameDay",function(h){return qt(l.props.day,h)}),O(k(l),"isKeyboardSelected",function(){return!l.props.disabledKeyboardNavigation&&!l.isSameDay(l.props.selected)&&l.isSameDay(l.props.preSelection)}),O(k(l),"isDisabled",function(){return Ad(l.props.day,l.props)}),O(k(l),"isExcluded",function(){return fv(l.props.day,l.props)}),O(k(l),"getHighLightedClass",function(h){var w=l.props,q=w.day,W=w.highlightDates;if(!W)return!1;var J=rt(q,"MM.dd.yyyy");return W.get(J)}),O(k(l),"isInRange",function(){var h=l.props,w=h.day,q=h.startDate,W=h.endDate;return!(!q||!W)&&ru(w,q,W)}),O(k(l),"isInSelectingRange",function(){var h=l.props,w=h.day,q=h.selectsStart,W=h.selectsEnd,J=h.selectsRange,Z=h.selectingDate,ye=h.startDate,he=h.endDate;return!(!(q||W||J)||!Z||l.isDisabled())&&(q&&he&&(Dn.default(Z,he)||ao(Z,he))?ru(w,Z,he):(W&&ye&&(kr.default(Z,ye)||ao(Z,ye))||!(!J||!ye||he||!kr.default(Z,ye)&&!ao(Z,ye)))&&ru(w,ye,Z))}),O(k(l),"isSelectingRangeStart",function(){if(!l.isInSelectingRange())return!1;var h=l.props,w=h.day,q=h.selectingDate,W=h.startDate;return qt(w,h.selectsStart?q:W)}),O(k(l),"isSelectingRangeEnd",function(){if(!l.isInSelectingRange())return!1;var h=l.props,w=h.day,q=h.selectingDate,W=h.endDate;return qt(w,h.selectsEnd?q:W)}),O(k(l),"isRangeStart",function(){var h=l.props,w=h.day,q=h.startDate,W=h.endDate;return!(!q||!W)&&qt(q,w)}),O(k(l),"isRangeEnd",function(){var h=l.props,w=h.day,q=h.startDate,W=h.endDate;return!(!q||!W)&&qt(W,w)}),O(k(l),"isWeekend",function(){var h=b.default(l.props.day);return h===0||h===6}),O(k(l),"isOutsideMonth",function(){return l.props.month!==void 0&&l.props.month!==F.default(l.props.day)}),O(k(l),"getClassNames",function(h){var w=l.props.dayClassName?l.props.dayClassName(h):void 0;return lt.default("react-datepicker__day",w,"react-datepicker__day--"+kD(l.props.day),{"react-datepicker__day--disabled":l.isDisabled(),"react-datepicker__day--excluded":l.isExcluded(),"react-datepicker__day--selected":l.isSameDay(l.props.selected),"react-datepicker__day--keyboard-selected":l.isKeyboardSelected(),"react-datepicker__day--range-start":l.isRangeStart(),"react-datepicker__day--range-end":l.isRangeEnd(),"react-datepicker__day--in-range":l.isInRange(),"react-datepicker__day--in-selecting-range":l.isInSelectingRange(),"react-datepicker__day--selecting-range-start":l.isSelectingRangeStart(),"react-datepicker__day--selecting-range-end":l.isSelectingRangeEnd(),"react-datepicker__day--today":l.isSameDay(ht()),"react-datepicker__day--weekend":l.isWeekend(),"react-datepicker__day--outside-month":l.isOutsideMonth()},l.getHighLightedClass("react-datepicker__day--highlighted"))}),O(k(l),"getAriaLabel",function(){var h=l.props,w=h.day,q=h.ariaLabelPrefixWhenEnabled,W=q===void 0?"Choose":q,J=h.ariaLabelPrefixWhenDisabled,Z=J===void 0?"Not available":J,ye=l.isDisabled()||l.isExcluded()?Z:W;return"".concat(ye," ").concat(rt(w,"PPPP"))}),O(k(l),"getTabIndex",function(h,w){var q=h||l.props.selected,W=w||l.props.preSelection;return l.isKeyboardSelected()||l.isSameDay(q)&&qt(W,q)?0:-1}),O(k(l),"handleFocusDay",function(){var h=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},w=!1;l.getTabIndex()===0&&!h.isInputFocused&&l.isSameDay(l.props.preSelection)&&(document.activeElement&&document.activeElement!==document.body||(w=!0),l.props.inline&&!l.props.shouldFocusDayInline&&(w=!1),l.props.containerRef&&l.props.containerRef.current&&l.props.containerRef.current.contains(document.activeElement)&&document.activeElement.classList.contains("react-datepicker__day")&&(w=!0)),w&&l.dayEl.current.focus({preventScroll:!0})}),O(k(l),"renderDayContents",function(){return l.isOutsideMonth()&&(l.props.monthShowsDuplicateDaysEnd&&N.default(l.props.day)<10||l.props.monthShowsDuplicateDaysStart&&N.default(l.props.day)>20)?null:l.props.renderDayContents?l.props.renderDayContents(N.default(l.props.day),l.props.day):N.default(l.props.day)}),O(k(l),"render",function(){return A.default.createElement("div",{ref:l.dayEl,className:l.getClassNames(l.props.day),onKeyDown:l.handleOnKeyDown,onClick:l.handleClick,onMouseEnter:l.handleMouseEnter,tabIndex:l.getTabIndex(),"aria-label":l.getAriaLabel(),role:"button","aria-disabled":l.isDisabled()},l.renderDayContents())}),l}return dt(x,[{key:"componentDidMount",value:function(){this.handleFocusDay()}},{key:"componentDidUpdate",value:function(l){this.handleFocusDay(l)}}]),x}(A.default.Component),JD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"handleClick",function(h){l.props.onClick&&l.props.onClick(h)}),l}return dt(x,[{key:"render",value:function(){var l=this.props,a=l.weekNumber,m=l.ariaLabelPrefix,D=m===void 0?"week ":m,h={"react-datepicker__week-number":!0,"react-datepicker__week-number--clickable":!!l.onClick};return A.default.createElement("div",{className:lt.default(h),"aria-label":"".concat(D," ").concat(this.props.weekNumber),onClick:this.handleClick},a)}}]),x}(A.default.Component),ZD=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"handleDayClick",function(h,w){l.props.onDayClick&&l.props.onDayClick(h,w)}),O(k(l),"handleDayMouseEnter",function(h){l.props.onDayMouseEnter&&l.props.onDayMouseEnter(h)}),O(k(l),"handleWeekClick",function(h,w,q){typeof l.props.onWeekSelect=="function"&&l.props.onWeekSelect(h,w,q),l.props.shouldCloseOnSelect&&l.props.setOpen(!1)}),O(k(l),"formatWeekNumber",function(h){return l.props.formatWeekNumber?l.props.formatWeekNumber(h):bD(h)}),O(k(l),"renderDays",function(){var h=Ld(l.props.day,l.props.locale),w=[],q=l.formatWeekNumber(h);if(l.props.showWeekNumber){var W=l.props.onWeekSelect?l.handleWeekClick.bind(k(l),h,q):void 0;w.push(A.default.createElement(JD,{key:"W",weekNumber:q,onClick:W,ariaLabelPrefix:l.props.ariaLabelPrefix}))}return w.concat([0,1,2,3,4,5,6].map(function(J){var Z=ro.default(h,J);return A.default.createElement(XD,{ariaLabelPrefixWhenEnabled:l.props.chooseDayAriaLabelPrefix,ariaLabelPrefixWhenDisabled:l.props.disabledDayAriaLabelPrefix,key:Z.valueOf(),day:Z,month:l.props.month,onClick:l.handleDayClick.bind(k(l),Z),onMouseEnter:l.handleDayMouseEnter.bind(k(l),Z),minDate:l.props.minDate,maxDate:l.props.maxDate,excludeDates:l.props.excludeDates,includeDates:l.props.includeDates,highlightDates:l.props.highlightDates,selectingDate:l.props.selectingDate,filterDate:l.props.filterDate,preSelection:l.props.preSelection,selected:l.props.selected,selectsStart:l.props.selectsStart,selectsEnd:l.props.selectsEnd,selectsRange:l.props.selectsRange,startDate:l.props.startDate,endDate:l.props.endDate,dayClassName:l.props.dayClassName,renderDayContents:l.props.renderDayContents,disabledKeyboardNavigation:l.props.disabledKeyboardNavigation,handleOnKeyDown:l.props.handleOnKeyDown,isInputFocused:l.props.isInputFocused,containerRef:l.props.containerRef,inline:l.props.inline,shouldFocusDayInline:l.props.shouldFocusDayInline,monthShowsDuplicateDaysEnd:l.props.monthShowsDuplicateDaysEnd,monthShowsDuplicateDaysStart:l.props.monthShowsDuplicateDaysStart})}))}),l}return dt(x,[{key:"render",value:function(){return A.default.createElement("div",{className:"react-datepicker__week"},this.renderDays())}}],[{key:"defaultProps",get:function(){return{shouldCloseOnSelect:!0}}}]),x}(A.default.Component),eP=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"MONTH_REFS",DD(Array(12)).map(function(){return A.default.createRef()})),O(k(l),"isDisabled",function(h){return Ad(h,l.props)}),O(k(l),"isExcluded",function(h){return fv(h,l.props)}),O(k(l),"handleDayClick",function(h,w){l.props.onDayClick&&l.props.onDayClick(h,w,l.props.orderInDisplay)}),O(k(l),"handleDayMouseEnter",function(h){l.props.onDayMouseEnter&&l.props.onDayMouseEnter(h)}),O(k(l),"handleMouseLeave",function(){l.props.onMouseLeave&&l.props.onMouseLeave()}),O(k(l),"isRangeStartMonth",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate;return!(!W||!J)&&$r(le.default(q,h),W)}),O(k(l),"isRangeStartQuarter",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate;return!(!W||!J)&&tu(ce.default(q,h),W)}),O(k(l),"isRangeEndMonth",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate;return!(!W||!J)&&$r(le.default(q,h),J)}),O(k(l),"isRangeEndQuarter",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate;return!(!W||!J)&&tu(ce.default(q,h),J)}),O(k(l),"isWeekInMonth",function(h){var w=l.props.day,q=ro.default(h,6);return $r(h,w)||$r(q,w)}),O(k(l),"renderWeeks",function(){for(var h=[],w=l.props.fixedHeight,q=Ld(Pn(l.props.day),l.props.locale),W=0,J=!1;h.push(A.default.createElement(ZD,{ariaLabelPrefix:l.props.weekAriaLabelPrefix,chooseDayAriaLabelPrefix:l.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:l.props.disabledDayAriaLabelPrefix,key:W,day:q,month:F.default(l.props.day),onDayClick:l.handleDayClick,onDayMouseEnter:l.handleDayMouseEnter,onWeekSelect:l.props.onWeekSelect,formatWeekNumber:l.props.formatWeekNumber,locale:l.props.locale,minDate:l.props.minDate,maxDate:l.props.maxDate,excludeDates:l.props.excludeDates,includeDates:l.props.includeDates,inline:l.props.inline,shouldFocusDayInline:l.props.shouldFocusDayInline,highlightDates:l.props.highlightDates,selectingDate:l.props.selectingDate,filterDate:l.props.filterDate,preSelection:l.props.preSelection,selected:l.props.selected,selectsStart:l.props.selectsStart,selectsEnd:l.props.selectsEnd,selectsRange:l.props.selectsRange,showWeekNumber:l.props.showWeekNumbers,startDate:l.props.startDate,endDate:l.props.endDate,dayClassName:l.props.dayClassName,setOpen:l.props.setOpen,shouldCloseOnSelect:l.props.shouldCloseOnSelect,disabledKeyboardNavigation:l.props.disabledKeyboardNavigation,renderDayContents:l.props.renderDayContents,handleOnKeyDown:l.props.handleOnKeyDown,isInputFocused:l.props.isInputFocused,containerRef:l.props.containerRef,monthShowsDuplicateDaysEnd:l.props.monthShowsDuplicateDaysEnd,monthShowsDuplicateDaysStart:l.props.monthShowsDuplicateDaysStart})),!J;){W++,q=Xa.default(q,1);var Z=w&&W>=6,ye=!w&&!l.isWeekInMonth(q);if(Z||ye){if(!l.props.peekNextMonth)break;J=!0}}return h}),O(k(l),"onMonthClick",function(h,w){l.handleDayClick(Pn(le.default(l.props.day,w)),h)}),O(k(l),"handleMonthNavigation",function(h,w){l.isDisabled(w)||l.isExcluded(w)||(l.props.setPreSelection(w),l.MONTH_REFS[h].current&&l.MONTH_REFS[h].current.focus())}),O(k(l),"onMonthKeyDown",function(h,w){var q=h.key;if(!l.props.disabledKeyboardNavigation)switch(q){case"Enter":l.onMonthClick(h,w),l.props.setPreSelection(l.props.selected);break;case"ArrowRight":l.handleMonthNavigation(w===11?0:w+1,br.default(l.props.preSelection,1));break;case"ArrowLeft":l.handleMonthNavigation(w===0?11:w-1,Cn.default(l.props.preSelection,1))}}),O(k(l),"onQuarterClick",function(h,w){l.handleDayClick(ND(ce.default(l.props.day,w)),h)}),O(k(l),"getMonthClassNames",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate,Z=w.selected,ye=w.minDate,he=w.maxDate,nt=w.preSelection,ot=w.monthClassName,It=ot?ot(q):void 0;return lt.default("react-datepicker__month-text","react-datepicker__month-".concat(h),It,{"react-datepicker__month--disabled":(ye||he)&&qD(le.default(q,h),l.props),"react-datepicker__month--selected":F.default(q)===h&&Y.default(q)===Y.default(Z),"react-datepicker__month-text--keyboard-selected":F.default(nt)===h,"react-datepicker__month--in-range":ID(W,J,h,q),"react-datepicker__month--range-start":l.isRangeStartMonth(h),"react-datepicker__month--range-end":l.isRangeEndMonth(h)})}),O(k(l),"getTabIndex",function(h){var w=F.default(l.props.preSelection);return l.props.disabledKeyboardNavigation||h!==w?"-1":"0"}),O(k(l),"getAriaLabel",function(h){var w=l.props,q=w.ariaLabelPrefix,W=q===void 0?"Choose":q,J=w.disabledDayAriaLabelPrefix,Z=J===void 0?"Not available":J,ye=w.day,he=le.default(ye,h),nt=l.isDisabled(he)||l.isExcluded(he)?Z:W;return"".concat(nt," ").concat(rt(he,"MMMM yyyy"))}),O(k(l),"getQuarterClassNames",function(h){var w=l.props,q=w.day,W=w.startDate,J=w.endDate,Z=w.selected,ye=w.minDate,he=w.maxDate;return lt.default("react-datepicker__quarter-text","react-datepicker__quarter-".concat(h),{"react-datepicker__quarter--disabled":(ye||he)&&LD(ce.default(q,h),l.props),"react-datepicker__quarter--selected":Q.default(q)===h&&Y.default(q)===Y.default(Z),"react-datepicker__quarter--in-range":FD(W,J,h,q),"react-datepicker__quarter--range-start":l.isRangeStartQuarter(h),"react-datepicker__quarter--range-end":l.isRangeEndQuarter(h)})}),O(k(l),"renderMonths",function(){var h=l.props,w=h.showFullMonthYearPicker,q=h.showTwoColumnMonthYearPicker,W=h.showFourColumnMonthYearPicker,J=h.locale;return(W?[[0,1,2,3],[4,5,6,7],[8,9,10,11]]:q?[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]]:[[0,1,2],[3,4,5],[6,7,8],[9,10,11]]).map(function(Z,ye){return A.default.createElement("div",{className:"react-datepicker__month-wrapper",key:ye},Z.map(function(he,nt){return A.default.createElement("div",{ref:l.MONTH_REFS[he],key:nt,onClick:function(ot){l.onMonthClick(ot,he)},onKeyDown:function(ot){l.onMonthKeyDown(ot,he)},tabIndex:l.getTabIndex(he),className:l.getMonthClassNames(he),role:"button","aria-label":l.getAriaLabel(he)},w?cv(he,J):dv(he,J))}))})}),O(k(l),"renderQuarters",function(){return A.default.createElement("div",{className:"react-datepicker__quarter-wrapper"},[1,2,3,4].map(function(h,w){return A.default.createElement("div",{key:w,onClick:function(q){l.onQuarterClick(q,h)},className:l.getQuarterClassNames(h)},RD(h,l.props.locale))}))}),O(k(l),"getClassNames",function(){var h=l.props;h.day;var w=h.selectingDate,q=h.selectsStart,W=h.selectsEnd,J=h.showMonthYearPicker,Z=h.showQuarterYearPicker;return lt.default("react-datepicker__month",{"react-datepicker__month--selecting-range":w&&(q||W)},{"react-datepicker__monthPicker":J},{"react-datepicker__quarterPicker":Z})}),l}return dt(x,[{key:"render",value:function(){var l=this.props,a=l.showMonthYearPicker,m=l.showQuarterYearPicker,D=l.day,h=l.ariaLabelPrefix,w=h===void 0?"month ":h;return A.default.createElement("div",{className:this.getClassNames(),onMouseLeave:this.handleMouseLeave,"aria-label":"".concat(w," ").concat(rt(D,"yyyy-MM"))},a?this.renderMonths():m?this.renderQuarters():this.renderWeeks())}}]),x}(A.default.Component),Cv=function(E){ft(x,E);var v=pt(x);function x(){var l;ct(this,x);for(var a=arguments.length,m=new Array(a),D=0;D<a;D++)m[D]=arguments[D];return O(k(l=v.call.apply(v,[this].concat(m))),"state",{height:null}),O(k(l),"handleClick",function(h){(l.props.minTime||l.props.maxTime)&&mv(h,l.props)||(l.props.excludeTimes||l.props.includeTimes||l.props.filterTime)&&hv(h,l.props)||l.props.onChange(h)}),O(k(l),"liClasses",function(h,w,q){var W=["react-datepicker__time-list-item",l.props.timeClassName?l.props.timeClassName(h,w,q):void 0];return l.props.selected&&w===C.default(h)&&q===f.default(h)&&W.push("react-datepicker__time-list-item--selected"),((l.props.minTime||l.props.maxTime)&&mv(h,l.props)||(l.props.excludeTimes||l.props.includeTimes||l.props.filterTime)&&hv(h,l.props))&&W.push("react-datepicker__time-list-item--disabled"),l.props.injectTimes&&(60*C.default(h)+f.default(h))%l.props.intervals!=0&&W.push("react-datepicker__time-list-item--injected"),W.join(" ")}),O(k(l),"renderTimes",function(){for(var h=[],w=l.props.format?l.props.format:"p",q=l.props.intervals,W=MD(ht(l.props.selected)),J=1440/q,Z=l.props.injectTimes&&l.props.injectTimes.sort(function(Mt,fi){return Mt-fi}),ye=l.props.selected||l.props.openToDate||ht(),he=C.default(ye),nt=f.default(ye),ot=ee.default(ae.default(W,nt),he),It=0;It<J;It++){var kt=si.default(W,It*q);if(h.push(kt),Z){var Mr=UD(W,kt,It,q,Z);h=h.concat(Mr)}}return h.map(function(Mt,fi){return A.default.createElement("li",{key:fi,onClick:l.handleClick.bind(k(l),Mt),className:l.liClasses(Mt,he,nt),ref:function(jd){(Dn.default(Mt,ot)||ao(Mt,ot))&&(l.centerLi=jd)},tabIndex:"0"},rt(Mt,w,l.props.locale))})}),l}return dt(x,[{key:"componentDidMount",value:function(){this.list.scrollTop=x.calcCenterPosition(this.props.monthRef?this.props.monthRef.clientHeight-this.header.clientHeight:this.list.clientHeight,this.centerLi),this.props.monthRef&&this.header&&this.setState({height:this.props.monthRef.clientHeight-this.header.clientHeight})}},{key:"render",value:function(){var l=this,a=this.state.height;return A.default.createElement("div",{className:"react-datepicker__time-container ".concat(this.props.todayButton?"react-datepicker__time-container--with-today-button":"")},A.default.createElement("div",{className:"react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly?"react-datepicker__header--time--only":""),ref:function(m){l.header=m}},A.default.createElement("div",{className:"react-datepicker-time__header"},this.props.timeCaption)),A.default.createElement("div",{className:"react-datepicker__time"},A.default.createElement("div",{className:"react-datepicker__time-box"},A.default.createElement("ul",{className:"react-datepicker__time-list",ref:function(m){l.list=m},style:a?{height:a}:{},tabIndex:"0"},this.renderTimes()))))}}],[{key:"defaultProps",get:function(){return{intervals:30,onTimeChange:function(){},todayButton:null,timeCaption:"Time"}}}]),x}(A.default.Component);O(Cv,"calcCenterPosition",function(E,v){return v.offsetTop-(E/2-v.clientHeight/2)});var tP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"handleYearClick",function(m,D){a.props.onDayClick&&a.props.onDayClick(m,D)}),O(k(a),"isSameDay",function(m,D){return qt(m,D)}),O(k(a),"isKeyboardSelected",function(m){var D=di(pe.default(a.props.date,m));return!a.props.disabledKeyboardNavigation&&!a.props.inline&&!qt(D,di(a.props.selected))&&qt(D,di(a.props.preSelection))}),O(k(a),"onYearClick",function(m,D){var h=a.props.date;a.handleYearClick(di(pe.default(h,D)),m)}),O(k(a),"getYearClassNames",function(m){var D=a.props,h=D.minDate,w=D.maxDate,q=D.selected;return lt.default("react-datepicker__year-text",{"react-datepicker__year-text--selected":m===Y.default(q),"react-datepicker__year-text--disabled":(h||w)&&AD(m,a.props),"react-datepicker__year-text--keyboard-selected":a.isKeyboardSelected(m),"react-datepicker__year-text--today":m===Y.default(ht())})}),a}return dt(x,[{key:"render",value:function(){for(var l=this,a=[],m=this.props,D=ou(m.date,m.yearItemNumber),h=D.startPeriod,w=D.endPeriod,q=function(J){a.push(A.default.createElement("div",{onClick:function(Z){l.onYearClick(Z,J)},className:l.getYearClassNames(J),key:J},J))},W=h;W<=w;W++)q(W);return A.default.createElement("div",{className:"react-datepicker__year"},A.default.createElement("div",{className:"react-datepicker__year-wrapper"},a))}}]),x}(A.default.Component),rP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"onTimeChange",function(m){a.setState({time:m});var D=new Date;D.setHours(m.split(":")[0]),D.setMinutes(m.split(":")[1]),a.props.onChange(D)}),O(k(a),"renderTimeInput",function(){var m=a.state.time,D=a.props,h=D.date,w=D.timeString,q=D.customTimeInput;return q?A.default.cloneElement(q,{date:h,value:m,onChange:a.onTimeChange}):A.default.createElement("input",{type:"time",className:"react-datepicker-time__input",placeholder:"Time",name:"time-input",required:!0,value:m,onChange:function(W){a.onTimeChange(W.target.value||w)}})}),a.state={time:a.props.timeString},a}return dt(x,[{key:"render",value:function(){return A.default.createElement("div",{className:"react-datepicker__input-time-container"},A.default.createElement("div",{className:"react-datepicker-time__caption"},this.props.timeInputLabel),A.default.createElement("div",{className:"react-datepicker-time__input-container"},A.default.createElement("div",{className:"react-datepicker-time__input"},this.renderTimeInput())))}}],[{key:"getDerivedStateFromProps",value:function(l,a){return l.timeString!==a.time?{time:l.timeString}:null}}]),x}(A.default.Component);function Dv(E){var v=E.className,x=E.children,l=E.showPopperArrow,a=E.arrowProps,m=a===void 0?{}:a;return A.default.createElement("div",{className:v},l&&A.default.createElement("div",eu({className:"react-datepicker__triangle"},m)),x)}var nP=["react-datepicker__year-select","react-datepicker__month-select","react-datepicker__month-year-select"],oP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"handleClickOutside",function(m){a.props.onClickOutside(m)}),O(k(a),"setClickOutsideRef",function(){return a.containerRef.current}),O(k(a),"handleDropdownFocus",function(m){(function(){var D=((arguments.length>0&&arguments[0]!==void 0?arguments[0]:{}).className||"").split(/\s+/);return nP.some(function(h){return D.indexOf(h)>=0})})(m.target)&&a.props.onDropdownFocus()}),O(k(a),"getDateInView",function(){var m=a.props,D=m.preSelection,h=m.selected,w=m.openToDate,q=_v(a.props),W=xv(a.props),J=ht(),Z=w||h||D;return Z||(q&&Dn.default(J,q)?q:W&&kr.default(J,W)?W:J)}),O(k(a),"increaseMonth",function(){a.setState(function(m){var D=m.date;return{date:br.default(D,1)}},function(){return a.handleMonthChange(a.state.date)})}),O(k(a),"decreaseMonth",function(){a.setState(function(m){var D=m.date;return{date:Cn.default(D,1)}},function(){return a.handleMonthChange(a.state.date)})}),O(k(a),"handleDayClick",function(m,D,h){a.props.onSelect(m,D,h),a.props.setPreSelection&&a.props.setPreSelection(m)}),O(k(a),"handleDayMouseEnter",function(m){a.setState({selectingDate:m}),a.props.onDayMouseEnter&&a.props.onDayMouseEnter(m)}),O(k(a),"handleMonthMouseLeave",function(){a.setState({selectingDate:null}),a.props.onMonthMouseLeave&&a.props.onMonthMouseLeave()}),O(k(a),"handleYearChange",function(m){a.props.onYearChange&&a.props.onYearChange(m),a.props.adjustDateOnChange&&(a.props.onSelect&&a.props.onSelect(m),a.props.setOpen&&a.props.setOpen(!0)),a.props.setPreSelection&&a.props.setPreSelection(m)}),O(k(a),"handleMonthChange",function(m){a.props.onMonthChange&&a.props.onMonthChange(m),a.props.adjustDateOnChange&&(a.props.onSelect&&a.props.onSelect(m),a.props.setOpen&&a.props.setOpen(!0)),a.props.setPreSelection&&a.props.setPreSelection(m)}),O(k(a),"handleMonthYearChange",function(m){a.handleYearChange(m),a.handleMonthChange(m)}),O(k(a),"changeYear",function(m){a.setState(function(D){var h=D.date;return{date:pe.default(h,m)}},function(){return a.handleYearChange(a.state.date)})}),O(k(a),"changeMonth",function(m){a.setState(function(D){var h=D.date;return{date:le.default(h,m)}},function(){return a.handleMonthChange(a.state.date)})}),O(k(a),"changeMonthYear",function(m){a.setState(function(D){var h=D.date;return{date:pe.default(le.default(h,F.default(m)),Y.default(m))}},function(){return a.handleMonthYearChange(a.state.date)})}),O(k(a),"header",function(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:a.state.date,D=Ld(m,a.props.locale),h=[];return a.props.showWeekNumbers&&h.push(A.default.createElement("div",{key:"W",className:"react-datepicker__day-name"},a.props.weekLabel||"#")),h.concat([0,1,2,3,4,5,6].map(function(w){var q=ro.default(D,w),W=a.formatWeekday(q,a.props.locale),J=a.props.weekDayClassName?a.props.weekDayClassName(q):void 0;return A.default.createElement("div",{key:w,className:lt.default("react-datepicker__day-name",J)},W)}))}),O(k(a),"formatWeekday",function(m,D){return a.props.formatWeekDay?function(h,w,q){return w(rt(h,"EEEE",q))}(m,a.props.formatWeekDay,D):a.props.useWeekdaysShort?function(h,w){return rt(h,"EEE",w)}(m,D):function(h,w){return rt(h,"EEEEEE",w)}(m,D)}),O(k(a),"decreaseYear",function(){a.setState(function(m){var D=m.date;return{date:oo.default(D,a.props.showYearPicker?a.props.yearItemNumber:1)}},function(){return a.handleYearChange(a.state.date)})}),O(k(a),"renderPreviousButton",function(){if(!a.props.renderCustomHeader){var m;switch(!0){case a.props.showMonthYearPicker:m=gv(a.state.date,a.props);break;case a.props.showYearPicker:m=function(he){var nt=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},ot=nt.minDate,It=nt.yearItemNumber,kt=It===void 0?ci:It,Mr=ou(di(oo.default(he,kt)),kt).endPeriod,Mt=ot&&Y.default(ot);return Mt&&Mt>Mr||!1}(a.state.date,a.props);break;default:m=vv(a.state.date,a.props)}if((a.props.forceShowMonthNavigation||a.props.showDisabledMonthNavigation||!m)&&!a.props.showTimeSelectOnly){var D=["react-datepicker__navigation","react-datepicker__navigation--previous"],h=a.decreaseMonth;(a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker)&&(h=a.decreaseYear),m&&a.props.showDisabledMonthNavigation&&(D.push("react-datepicker__navigation--previous--disabled"),h=null);var w=a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker,q=a.props,W=q.previousMonthAriaLabel,J=W===void 0?"Previous Month":W,Z=q.previousYearAriaLabel,ye=Z===void 0?"Previous Year":Z;return A.default.createElement("button",{type:"button",className:D.join(" "),onClick:h,"aria-label":w?ye:J},w?a.props.previousYearButtonLabel:a.props.previousMonthButtonLabel)}}}),O(k(a),"increaseYear",function(){a.setState(function(m){var D=m.date;return{date:no.default(D,a.props.showYearPicker?a.props.yearItemNumber:1)}},function(){return a.handleYearChange(a.state.date)})}),O(k(a),"renderNextButton",function(){if(!a.props.renderCustomHeader){var m;switch(!0){case a.props.showMonthYearPicker:m=wv(a.state.date,a.props);break;case a.props.showYearPicker:m=function(he){var nt=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},ot=nt.maxDate,It=nt.yearItemNumber,kt=It===void 0?ci:It,Mr=ou(no.default(he,kt),kt).startPeriod,Mt=ot&&Y.default(ot);return Mt&&Mt<Mr||!1}(a.state.date,a.props);break;default:m=yv(a.state.date,a.props)}if((a.props.forceShowMonthNavigation||a.props.showDisabledMonthNavigation||!m)&&!a.props.showTimeSelectOnly){var D=["react-datepicker__navigation","react-datepicker__navigation--next"];a.props.showTimeSelect&&D.push("react-datepicker__navigation--next--with-time"),a.props.todayButton&&D.push("react-datepicker__navigation--next--with-today-button");var h=a.increaseMonth;(a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker)&&(h=a.increaseYear),m&&a.props.showDisabledMonthNavigation&&(D.push("react-datepicker__navigation--next--disabled"),h=null);var w=a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker,q=a.props,W=q.nextMonthAriaLabel,J=W===void 0?"Next Month":W,Z=q.nextYearAriaLabel,ye=Z===void 0?"Next Year":Z;return A.default.createElement("button",{type:"button",className:D.join(" "),onClick:h,"aria-label":w?ye:J},w?a.props.nextYearButtonLabel:a.props.nextMonthButtonLabel)}}}),O(k(a),"renderCurrentMonth",function(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:a.state.date,D=["react-datepicker__current-month"];return a.props.showYearDropdown&&D.push("react-datepicker__current-month--hasYearDropdown"),a.props.showMonthDropdown&&D.push("react-datepicker__current-month--hasMonthDropdown"),a.props.showMonthYearDropdown&&D.push("react-datepicker__current-month--hasMonthYearDropdown"),A.default.createElement("div",{className:D.join(" ")},rt(m,a.props.dateFormat,a.props.locale))}),O(k(a),"renderYearDropdown",function(){var m=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(a.props.showYearDropdown&&!m)return A.default.createElement(HD,{adjustDateOnChange:a.props.adjustDateOnChange,date:a.state.date,onSelect:a.props.onSelect,setOpen:a.props.setOpen,dropdownMode:a.props.dropdownMode,onChange:a.changeYear,minDate:a.props.minDate,maxDate:a.props.maxDate,year:Y.default(a.state.date),scrollableYearDropdown:a.props.scrollableYearDropdown,yearDropdownItemNumber:a.props.yearDropdownItemNumber})}),O(k(a),"renderMonthDropdown",function(){var m=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(a.props.showMonthDropdown&&!m)return A.default.createElement(VD,{dropdownMode:a.props.dropdownMode,locale:a.props.locale,onChange:a.changeMonth,month:F.default(a.state.date),useShortMonthInDropdown:a.props.useShortMonthInDropdown})}),O(k(a),"renderMonthYearDropdown",function(){var m=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(a.props.showMonthYearDropdown&&!m)return A.default.createElement(GD,{dropdownMode:a.props.dropdownMode,locale:a.props.locale,dateFormat:a.props.dateFormat,onChange:a.changeMonthYear,minDate:a.props.minDate,maxDate:a.props.maxDate,date:a.state.date,scrollableMonthYearDropdown:a.props.scrollableMonthYearDropdown})}),O(k(a),"renderTodayButton",function(){if(a.props.todayButton&&!a.props.showTimeSelectOnly)return A.default.createElement("div",{className:"react-datepicker__today-button",onClick:function(m){return a.props.onSelect(li.default(ht()),m)}},a.props.todayButton)}),O(k(a),"renderDefaultHeader",function(m){var D=m.monthDate,h=m.i;return A.default.createElement("div",{className:"react-datepicker__header ".concat(a.props.showTimeSelect?"react-datepicker__header--has-time-select":"")},a.renderCurrentMonth(D),A.default.createElement("div",{className:"react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a.props.dropdownMode),onFocus:a.handleDropdownFocus},a.renderMonthDropdown(h!==0),a.renderMonthYearDropdown(h!==0),a.renderYearDropdown(h!==0)),A.default.createElement("div",{className:"react-datepicker__day-names"},a.header(D)))}),O(k(a),"renderCustomHeader",function(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},D=m.monthDate,h=m.i;if(a.props.showTimeSelect&&(a.state.monthContainer||a.props.showTimeSelectOnly))return null;var w=vv(a.state.date,a.props),q=yv(a.state.date,a.props),W=gv(a.state.date,a.props),J=wv(a.state.date,a.props),Z=!a.props.showMonthYearPicker&&!a.props.showQuarterYearPicker&&!a.props.showYearPicker;return A.default.createElement("div",{className:"react-datepicker__header react-datepicker__header--custom",onFocus:a.props.onDropdownFocus},a.props.renderCustomHeader(ov(ov({},a.state),{},{customHeaderCount:h,changeMonth:a.changeMonth,changeYear:a.changeYear,decreaseMonth:a.decreaseMonth,increaseMonth:a.increaseMonth,decreaseYear:a.decreaseYear,increaseYear:a.increaseYear,prevMonthButtonDisabled:w,nextMonthButtonDisabled:q,prevYearButtonDisabled:W,nextYearButtonDisabled:J})),Z&&A.default.createElement("div",{className:"react-datepicker__day-names"},a.header(D)))}),O(k(a),"renderYearHeader",function(){var m=a.state.date,D=a.props,h=D.showYearPicker,w=ou(m,D.yearItemNumber),q=w.startPeriod,W=w.endPeriod;return A.default.createElement("div",{className:"react-datepicker__header react-datepicker-year-header"},h?"".concat(q," - ").concat(W):Y.default(m))}),O(k(a),"renderHeader",function(m){switch(!0){case a.props.renderCustomHeader!==void 0:return a.renderCustomHeader(m);case(a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker):return a.renderYearHeader(m);default:return a.renderDefaultHeader(m)}}),O(k(a),"renderMonths",function(){if(!a.props.showTimeSelectOnly&&!a.props.showYearPicker){for(var m=[],D=a.props.showPreviousMonths?a.props.monthsShown-1:0,h=Cn.default(a.state.date,D),w=0;w<a.props.monthsShown;++w){var q=w-a.props.monthSelectedIn,W=br.default(h,q),J="month-".concat(w),Z=w<a.props.monthsShown-1,ye=w>0;m.push(A.default.createElement("div",{key:J,ref:function(he){a.monthContainer=he},className:"react-datepicker__month-container"},a.renderHeader({monthDate:W,i:w}),A.default.createElement(eP,{chooseDayAriaLabelPrefix:a.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:a.props.disabledDayAriaLabelPrefix,weekAriaLabelPrefix:a.props.weekAriaLabelPrefix,onChange:a.changeMonthYear,day:W,dayClassName:a.props.dayClassName,monthClassName:a.props.monthClassName,onDayClick:a.handleDayClick,handleOnKeyDown:a.props.handleOnKeyDown,onDayMouseEnter:a.handleDayMouseEnter,onMouseLeave:a.handleMonthMouseLeave,onWeekSelect:a.props.onWeekSelect,orderInDisplay:w,formatWeekNumber:a.props.formatWeekNumber,locale:a.props.locale,minDate:a.props.minDate,maxDate:a.props.maxDate,excludeDates:a.props.excludeDates,highlightDates:a.props.highlightDates,selectingDate:a.state.selectingDate,includeDates:a.props.includeDates,inline:a.props.inline,shouldFocusDayInline:a.props.shouldFocusDayInline,fixedHeight:a.props.fixedHeight,filterDate:a.props.filterDate,preSelection:a.props.preSelection,setPreSelection:a.props.setPreSelection,selected:a.props.selected,selectsStart:a.props.selectsStart,selectsEnd:a.props.selectsEnd,selectsRange:a.props.selectsRange,showWeekNumbers:a.props.showWeekNumbers,startDate:a.props.startDate,endDate:a.props.endDate,peekNextMonth:a.props.peekNextMonth,setOpen:a.props.setOpen,shouldCloseOnSelect:a.props.shouldCloseOnSelect,renderDayContents:a.props.renderDayContents,disabledKeyboardNavigation:a.props.disabledKeyboardNavigation,showMonthYearPicker:a.props.showMonthYearPicker,showFullMonthYearPicker:a.props.showFullMonthYearPicker,showTwoColumnMonthYearPicker:a.props.showTwoColumnMonthYearPicker,showFourColumnMonthYearPicker:a.props.showFourColumnMonthYearPicker,showYearPicker:a.props.showYearPicker,showQuarterYearPicker:a.props.showQuarterYearPicker,isInputFocused:a.props.isInputFocused,containerRef:a.containerRef,monthShowsDuplicateDaysEnd:Z,monthShowsDuplicateDaysStart:ye})))}return m}}),O(k(a),"renderYears",function(){if(!a.props.showTimeSelectOnly)return a.props.showYearPicker?A.default.createElement("div",{className:"react-datepicker__year--container"},a.renderHeader(),A.default.createElement(tP,eu({onDayClick:a.handleDayClick,date:a.state.date},a.props))):void 0}),O(k(a),"renderTimeSection",function(){if(a.props.showTimeSelect&&(a.state.monthContainer||a.props.showTimeSelectOnly))return A.default.createElement(Cv,{selected:a.props.selected,openToDate:a.props.openToDate,onChange:a.props.onTimeChange,timeClassName:a.props.timeClassName,format:a.props.timeFormat,includeTimes:a.props.includeTimes,intervals:a.props.timeIntervals,minTime:a.props.minTime,maxTime:a.props.maxTime,excludeTimes:a.props.excludeTimes,filterTime:a.props.filterTime,timeCaption:a.props.timeCaption,todayButton:a.props.todayButton,showMonthDropdown:a.props.showMonthDropdown,showMonthYearDropdown:a.props.showMonthYearDropdown,showYearDropdown:a.props.showYearDropdown,withPortal:a.props.withPortal,monthRef:a.state.monthContainer,injectTimes:a.props.injectTimes,locale:a.props.locale,showTimeSelectOnly:a.props.showTimeSelectOnly})}),O(k(a),"renderInputTimeSection",function(){var m=new Date(a.props.selected),D=Vr(m)&&Boolean(a.props.selected)?"".concat(Sv(m.getHours()),":").concat(Sv(m.getMinutes())):"";if(a.props.showTimeInput)return A.default.createElement(rP,{date:m,timeString:D,timeInputLabel:a.props.timeInputLabel,onChange:a.props.onTimeChange,customTimeInput:a.props.customTimeInput})}),a.containerRef=A.default.createRef(),a.state={date:a.getDateInView(),selectingDate:null,monthContainer:null},a}return dt(x,[{key:"componentDidMount",value:function(){var l=this;this.props.showTimeSelect&&(this.assignMonthContainer=void l.setState({monthContainer:l.monthContainer}))}},{key:"componentDidUpdate",value:function(l){this.props.preSelection&&!qt(this.props.preSelection,l.preSelection)?this.setState({date:this.props.preSelection}):this.props.openToDate&&!qt(this.props.openToDate,l.openToDate)&&this.setState({date:this.props.openToDate})}},{key:"render",value:function(){var l=this.props.container||Dv;return A.default.createElement("div",{ref:this.containerRef},A.default.createElement(l,{className:lt.default("react-datepicker",this.props.className,{"react-datepicker--time-only":this.props.showTimeSelectOnly}),showPopperArrow:this.props.showPopperArrow,arrowProps:this.props.arrowProps},this.renderPreviousButton(),this.renderNextButton(),this.renderMonths(),this.renderYears(),this.renderTodayButton(),this.renderTimeSection(),this.renderInputTimeSection(),this.props.children))}}],[{key:"defaultProps",get:function(){return{onDropdownFocus:function(){},monthsShown:1,monthSelectedIn:0,forceShowMonthNavigation:!1,timeCaption:"Time",previousYearButtonLabel:"Previous Year",nextYearButtonLabel:"Next Year",previousMonthButtonLabel:"Previous Month",nextMonthButtonLabel:"Next Month",customTimeInput:null,yearItemNumber:ci}}}]),x}(A.default.Component),iP=function(E){return!E.disabled&&E.tabIndex!==-1},aP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"getTabChildren",function(){return Array.prototype.slice.call(a.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"),1,-1).filter(iP)}),O(k(a),"handleFocusStart",function(m){var D=a.getTabChildren();D&&D.length>1&&D[D.length-1].focus()}),O(k(a),"handleFocusEnd",function(m){var D=a.getTabChildren();D&&D.length>1&&D[0].focus()}),a.tabLoopRef=A.default.createRef(),a}return dt(x,[{key:"render",value:function(){return this.props.enableTabLoop?A.default.createElement("div",{className:"react-datepicker__tab-loop",ref:this.tabLoopRef},A.default.createElement("div",{className:"react-datepicker__tab-loop__start",tabIndex:"0",onFocus:this.handleFocusStart}),this.props.children,A.default.createElement("div",{className:"react-datepicker__tab-loop__end",tabIndex:"0",onFocus:this.handleFocusEnd})):this.props.children}}],[{key:"defaultProps",get:function(){return{enableTabLoop:!0}}}]),x}(A.default.Component),uP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),(a=v.call(this,l)).el=document.createElement("div"),a}return dt(x,[{key:"componentDidMount",value:function(){this.portalRoot=document.getElementById(this.props.portalId),this.portalRoot||(this.portalRoot=document.createElement("div"),this.portalRoot.setAttribute("id",this.props.portalId),document.body.appendChild(this.portalRoot)),this.portalRoot.appendChild(this.el)}},{key:"componentWillUnmount",value:function(){this.portalRoot.removeChild(this.el)}},{key:"render",value:function(){return SD.default.createPortal(this.props.children,this.el)}}]),x}(A.default.Component),sP=function(E){ft(x,E);var v=pt(x);function x(){return ct(this,x),v.apply(this,arguments)}return dt(x,[{key:"render",value:function(){var l,a=this.props,m=a.className,D=a.wrapperClassName,h=a.hidePopper,w=a.popperComponent,q=a.popperModifiers,W=a.popperPlacement,J=a.popperProps,Z=a.targetComponent,ye=a.enableTabLoop,he=a.popperOnKeyDown,nt=a.portalId;if(!h){var ot=lt.default("react-datepicker-popper",m);l=A.default.createElement(eo.Popper,eu({modifiers:q,placement:W},J),function(kt){var Mr=kt.ref,Mt=kt.style,fi=kt.placement,jd=kt.arrowProps;return A.default.createElement(aP,{enableTabLoop:ye},A.default.createElement("div",{ref:Mr,style:Mt,className:ot,"data-placement":fi,onKeyDown:he},A.default.cloneElement(w,{arrowProps:jd})))})}this.props.popperContainer&&(l=A.default.createElement(this.props.popperContainer,{},l)),nt&&!h&&(l=A.default.createElement(uP,{portalId:nt},l));var It=lt.default("react-datepicker-wrapper",D);return A.default.createElement(eo.Manager,{className:"react-datepicker-manager"},A.default.createElement(eo.Reference,null,function(kt){var Mr=kt.ref;return A.default.createElement("div",{ref:Mr,className:It},Z)}),l)}}],[{key:"defaultProps",get:function(){return{hidePopper:!0,popperModifiers:{preventOverflow:{enabled:!0,escapeWithReference:!0,boundariesElement:"viewport"}},popperProps:{},popperPlacement:"bottom-start"}}}]),x}(A.default.Component),Pv="react-datepicker-ignore-onclickoutside",lP=Za.default(oP),Fd="Date input not valid.",cP=function(E){ft(x,E);var v=pt(x);function x(l){var a;return ct(this,x),O(k(a=v.call(this,l)),"getPreSelection",function(){return a.props.openToDate?a.props.openToDate:a.props.selectsEnd&&a.props.startDate?a.props.startDate:a.props.selectsStart&&a.props.endDate?a.props.endDate:ht()}),O(k(a),"calcInitialState",function(){var m=a.getPreSelection(),D=_v(a.props),h=xv(a.props),w=D&&Dn.default(m,D)?D:h&&kr.default(m,h)?h:m;return{open:a.props.startOpen||!1,preventFocus:!1,preSelection:a.props.selected?a.props.selected:w,highlightDates:Ev(a.props.highlightDates),focused:!1,shouldFocusDayInline:!1}}),O(k(a),"clearPreventFocusTimeout",function(){a.preventFocusTimeout&&clearTimeout(a.preventFocusTimeout)}),O(k(a),"setFocus",function(){a.input&&a.input.focus&&a.input.focus({preventScroll:!0})}),O(k(a),"setBlur",function(){a.input&&a.input.blur&&a.input.blur(),a.cancelFocusInput()}),O(k(a),"setOpen",function(m){var D=arguments.length>1&&arguments[1]!==void 0&&arguments[1];a.setState({open:m,preSelection:m&&a.state.open?a.state.preSelection:a.calcInitialState().preSelection,lastPreSelectChange:Ud},function(){m||a.setState(function(h){return{focused:!!D&&h.focused}},function(){!D&&a.setBlur(),a.setState({inputValue:null})})})}),O(k(a),"inputOk",function(){return ai.default(a.state.preSelection)}),O(k(a),"isCalendarOpen",function(){return a.props.open===void 0?a.state.open&&!a.props.disabled&&!a.props.readOnly:a.props.open}),O(k(a),"handleFocus",function(m){a.state.preventFocus||(a.props.onFocus(m),a.props.preventOpenOnFocus||a.props.readOnly||a.setOpen(!0)),a.setState({focused:!0})}),O(k(a),"cancelFocusInput",function(){clearTimeout(a.inputFocusTimeout),a.inputFocusTimeout=null}),O(k(a),"deferFocusInput",function(){a.cancelFocusInput(),a.inputFocusTimeout=setTimeout(function(){return a.setFocus()},1)}),O(k(a),"handleDropdownFocus",function(){a.cancelFocusInput()}),O(k(a),"handleBlur",function(m){(!a.state.open||a.props.withPortal||a.props.showTimeInput)&&a.props.onBlur(m),a.setState({focused:!1})}),O(k(a),"handleCalendarClickOutside",function(m){a.props.inline||a.setOpen(!1),a.props.onClickOutside(m),a.props.withPortal&&m.preventDefault()}),O(k(a),"handleChange",function(){for(var m=arguments.length,D=new Array(m),h=0;h<m;h++)D[h]=arguments[h];var w=D[0];if(!a.props.onChangeRaw||(a.props.onChangeRaw.apply(k(a),D),typeof w.isDefaultPrevented=="function"&&!w.isDefaultPrevented())){a.setState({inputValue:w.target.value,lastPreSelectChange:dP});var q=OD(w.target.value,a.props.dateFormat,a.props.locale,a.props.strictParsing);!q&&w.target.value||a.setSelected(q,w,!0)}}),O(k(a),"handleSelect",function(m,D,h){a.setState({preventFocus:!0},function(){return a.preventFocusTimeout=setTimeout(function(){return a.setState({preventFocus:!1})},50),a.preventFocusTimeout}),a.props.onChangeRaw&&a.props.onChangeRaw(D),a.setSelected(m,D,!1,h),!a.props.shouldCloseOnSelect||a.props.showTimeSelect?a.setPreSelection(m):a.props.inline||a.setOpen(!1)}),O(k(a),"setSelected",function(m,D,h,w){var q=m;if(q===null||!Ad(q,a.props)){var W=a.props,J=W.onChange,Z=W.selectsRange,ye=W.startDate,he=W.endDate;if(!ao(a.props.selected,q)||a.props.allowSameDay||Z)if(q!==null&&(!a.props.selected||h&&(a.props.showTimeSelect||a.props.showTimeSelectOnly||a.props.showTimeInput)||(q=sv(q,{hour:C.default(a.props.selected),minute:f.default(a.props.selected),second:io.default(a.props.selected)})),a.props.inline||a.setState({preSelection:q}),a.props.focusSelectedMonth||a.setState({monthSelectedIn:w})),Z){var nt=ye&&!he,ot=ye&&he;!ye&&!he?J([q,null],D):nt&&(Dn.default(q,ye)?J([q,null],D):J([ye,q],D)),ot&&J([q,null],D)}else J(q,D);h||(a.props.onSelect(q,D),a.setState({inputValue:null}))}}),O(k(a),"setPreSelection",function(m){var D=a.props.minDate!==void 0,h=a.props.maxDate!==void 0,w=!0;m&&(D&&h?w=ru(m,a.props.minDate,a.props.maxDate):D?w=kr.default(m,a.props.minDate):h&&(w=Dn.default(m,a.props.maxDate))),w&&a.setState({preSelection:m})}),O(k(a),"handleTimeChange",function(m){var D=sv(a.props.selected?a.props.selected:a.getPreSelection(),{hour:C.default(m),minute:f.default(m)});a.setState({preSelection:D}),a.props.onChange(D),a.props.shouldCloseOnSelect&&a.setOpen(!1),a.props.showTimeInput&&a.setOpen(!0),a.setState({inputValue:null})}),O(k(a),"onInputClick",function(){a.props.disabled||a.props.readOnly||a.setOpen(!0),a.props.onInputClick()}),O(k(a),"onInputKeyDown",function(m){a.props.onKeyDown(m);var D=m.key;if(a.state.open||a.props.inline||a.props.preventOpenOnFocus){if(a.state.open){if(D==="ArrowDown"||D==="ArrowUp"){m.preventDefault();var h=a.calendar.componentNode&&a.calendar.componentNode.querySelector('.react-datepicker__day[tabindex="0"]');return void(h&&h.focus({preventScroll:!0}))}var w=ht(a.state.preSelection);D==="Enter"?(m.preventDefault(),a.inputOk()&&a.state.lastPreSelectChange===Ud?(a.handleSelect(w,m),!a.props.shouldCloseOnSelect&&a.setPreSelection(w)):a.setOpen(!1)):D==="Escape"&&(m.preventDefault(),a.setOpen(!1)),a.inputOk()||a.props.onInputError({code:1,msg:Fd})}}else D!=="ArrowDown"&&D!=="ArrowUp"&&D!=="Enter"||a.onInputClick()}),O(k(a),"onDayKeyDown",function(m){a.props.onKeyDown(m);var D=m.key,h=ht(a.state.preSelection);if(D==="Enter")m.preventDefault(),a.handleSelect(h,m),!a.props.shouldCloseOnSelect&&a.setPreSelection(h);else if(D==="Escape")m.preventDefault(),a.setOpen(!1),a.inputOk()||a.props.onInputError({code:1,msg:Fd});else if(!a.props.disabledKeyboardNavigation){var w;switch(D){case"ArrowLeft":w=Md.default(h,1);break;case"ArrowRight":w=ro.default(h,1);break;case"ArrowUp":w=Nd.default(h,1);break;case"ArrowDown":w=Xa.default(h,1);break;case"PageUp":w=Cn.default(h,1);break;case"PageDown":w=br.default(h,1);break;case"Home":w=oo.default(h,1);break;case"End":w=no.default(h,1)}if(!w)return void(a.props.onInputError&&a.props.onInputError({code:1,msg:Fd}));if(m.preventDefault(),a.setState({lastPreSelectChange:Ud}),a.props.adjustDateOnChange&&a.setSelected(w),a.setPreSelection(w),a.props.inline){var q=F.default(h),W=F.default(w),J=Y.default(h),Z=Y.default(w);q!==W||J!==Z?a.setState({shouldFocusDayInline:!0}):a.setState({shouldFocusDayInline:!1})}}}),O(k(a),"onPopperKeyDown",function(m){m.key==="Escape"&&(m.preventDefault(),a.setState({preventFocus:!0},function(){a.setOpen(!1),setTimeout(function(){a.setFocus(),a.setState({preventFocus:!1})})}))}),O(k(a),"onClearClick",function(m){m&&m.preventDefault&&m.preventDefault(),a.props.onChange(null,m),a.setState({inputValue:null})}),O(k(a),"clear",function(){a.onClearClick()}),O(k(a),"onScroll",function(m){typeof a.props.closeOnScroll=="boolean"&&a.props.closeOnScroll?m.target!==document&&m.target!==document.documentElement&&m.target!==document.body||a.setOpen(!1):typeof a.props.closeOnScroll=="function"&&a.props.closeOnScroll(m)&&a.setOpen(!1)}),O(k(a),"renderCalendar",function(){return a.props.inline||a.isCalendarOpen()?A.default.createElement(lP,{ref:function(m){a.calendar=m},locale:a.props.locale,chooseDayAriaLabelPrefix:a.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:a.props.disabledDayAriaLabelPrefix,weekAriaLabelPrefix:a.props.weekAriaLabelPrefix,adjustDateOnChange:a.props.adjustDateOnChange,setOpen:a.setOpen,shouldCloseOnSelect:a.props.shouldCloseOnSelect,dateFormat:a.props.dateFormatCalendar,useWeekdaysShort:a.props.useWeekdaysShort,formatWeekDay:a.props.formatWeekDay,dropdownMode:a.props.dropdownMode,selected:a.props.selected,preSelection:a.state.preSelection,onSelect:a.handleSelect,onWeekSelect:a.props.onWeekSelect,openToDate:a.props.openToDate,minDate:a.props.minDate,maxDate:a.props.maxDate,selectsStart:a.props.selectsStart,selectsEnd:a.props.selectsEnd,selectsRange:a.props.selectsRange,startDate:a.props.startDate,endDate:a.props.endDate,excludeDates:a.props.excludeDates,filterDate:a.props.filterDate,onClickOutside:a.handleCalendarClickOutside,formatWeekNumber:a.props.formatWeekNumber,highlightDates:a.state.highlightDates,includeDates:a.props.includeDates,includeTimes:a.props.includeTimes,injectTimes:a.props.injectTimes,inline:a.props.inline,shouldFocusDayInline:a.state.shouldFocusDayInline,peekNextMonth:a.props.peekNextMonth,showMonthDropdown:a.props.showMonthDropdown,showPreviousMonths:a.props.showPreviousMonths,useShortMonthInDropdown:a.props.useShortMonthInDropdown,showMonthYearDropdown:a.props.showMonthYearDropdown,showWeekNumbers:a.props.showWeekNumbers,showYearDropdown:a.props.showYearDropdown,withPortal:a.props.withPortal,forceShowMonthNavigation:a.props.forceShowMonthNavigation,showDisabledMonthNavigation:a.props.showDisabledMonthNavigation,scrollableYearDropdown:a.props.scrollableYearDropdown,scrollableMonthYearDropdown:a.props.scrollableMonthYearDropdown,todayButton:a.props.todayButton,weekLabel:a.props.weekLabel,outsideClickIgnoreClass:Pv,fixedHeight:a.props.fixedHeight,monthsShown:a.props.monthsShown,monthSelectedIn:a.state.monthSelectedIn,onDropdownFocus:a.handleDropdownFocus,onMonthChange:a.props.onMonthChange,onYearChange:a.props.onYearChange,dayClassName:a.props.dayClassName,weekDayClassName:a.props.weekDayClassName,monthClassName:a.props.monthClassName,timeClassName:a.props.timeClassName,showTimeSelect:a.props.showTimeSelect,showTimeSelectOnly:a.props.showTimeSelectOnly,onTimeChange:a.handleTimeChange,timeFormat:a.props.timeFormat,timeIntervals:a.props.timeIntervals,minTime:a.props.minTime,maxTime:a.props.maxTime,excludeTimes:a.props.excludeTimes,filterTime:a.props.filterTime,timeCaption:a.props.timeCaption,className:a.props.calendarClassName,container:a.props.calendarContainer,yearItemNumber:a.props.yearItemNumber,yearDropdownItemNumber:a.props.yearDropdownItemNumber,previousMonthButtonLabel:a.props.previousMonthButtonLabel,nextMonthButtonLabel:a.props.nextMonthButtonLabel,previousYearButtonLabel:a.props.previousYearButtonLabel,nextYearButtonLabel:a.props.nextYearButtonLabel,timeInputLabel:a.props.timeInputLabel,disabledKeyboardNavigation:a.props.disabledKeyboardNavigation,renderCustomHeader:a.props.renderCustomHeader,popperProps:a.props.popperProps,renderDayContents:a.props.renderDayContents,onDayMouseEnter:a.props.onDayMouseEnter,onMonthMouseLeave:a.props.onMonthMouseLeave,showTimeInput:a.props.showTimeInput,showMonthYearPicker:a.props.showMonthYearPicker,showFullMonthYearPicker:a.props.showFullMonthYearPicker,showTwoColumnMonthYearPicker:a.props.showTwoColumnMonthYearPicker,showFourColumnMonthYearPicker:a.props.showFourColumnMonthYearPicker,showYearPicker:a.props.showYearPicker,showQuarterYearPicker:a.props.showQuarterYearPicker,showPopperArrow:a.props.showPopperArrow,excludeScrollbar:a.props.excludeScrollbar,handleOnKeyDown:a.onDayKeyDown,isInputFocused:a.state.focused,customTimeInput:a.props.customTimeInput,setPreSelection:a.setPreSelection},a.props.children):null}),O(k(a),"renderDateInput",function(){var m,D,h,w,q,W=lt.default(a.props.className,O({},Pv,a.state.open)),J=a.props.customInput||A.default.createElement("input",{type:"text"}),Z=a.props.customInputRef||"ref",ye=typeof a.props.value=="string"?a.props.value:typeof a.state.inputValue=="string"?a.state.inputValue:(D=a.props.selected,h=a.props,w=h.dateFormat,q=h.locale,D&&rt(D,Array.isArray(w)?w[0]:w,q)||"");return A.default.cloneElement(J,(O(m={},Z,function(he){a.input=he}),O(m,"value",ye),O(m,"onBlur",a.handleBlur),O(m,"onChange",a.handleChange),O(m,"onClick",a.onInputClick),O(m,"onFocus",a.handleFocus),O(m,"onKeyDown",a.onInputKeyDown),O(m,"id",a.props.id),O(m,"name",a.props.name),O(m,"autoFocus",a.props.autoFocus),O(m,"placeholder",a.props.placeholderText),O(m,"disabled",a.props.disabled),O(m,"autoComplete",a.props.autoComplete),O(m,"className",lt.default(J.props.className,W)),O(m,"title",a.props.title),O(m,"readOnly",a.props.readOnly),O(m,"required",a.props.required),O(m,"tabIndex",a.props.tabIndex),O(m,"aria-describedby",a.props.ariaDescribedBy),O(m,"aria-invalid",a.props.ariaInvalid),O(m,"aria-labelledby",a.props.ariaLabelledBy),O(m,"aria-required",a.props.ariaRequired),m))}),O(k(a),"renderClearButton",function(){var m=a.props,D=m.isClearable,h=m.selected,w=m.clearButtonTitle,q=m.ariaLabelClose,W=q===void 0?"Close":q;return D&&h!=null?A.default.createElement("button",{type:"button",className:"react-datepicker__close-icon","aria-label":W,onClick:a.onClearClick,title:w,tabIndex:-1}):null}),a.state=a.calcInitialState(),a}return dt(x,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.onScroll,!0)}},{key:"componentDidUpdate",value:function(l,a){var m,D;l.inline&&(m=l.selected,D=this.props.selected,m&&D?F.default(m)!==F.default(D)||Y.default(m)!==Y.default(D):m!==D)&&this.setPreSelection(this.props.selected),this.state.monthSelectedIn!==void 0&&l.monthsShown!==this.props.monthsShown&&this.setState({monthSelectedIn:0}),l.highlightDates!==this.props.highlightDates&&this.setState({highlightDates:Ev(this.props.highlightDates)}),a.focused||ao(l.selected,this.props.selected)||this.setState({inputValue:null}),a.open!==this.state.open&&(a.open===!1&&this.state.open===!0&&this.props.onCalendarOpen(),a.open===!0&&this.state.open===!1&&this.props.onCalendarClose())}},{key:"componentWillUnmount",value:function(){this.clearPreventFocusTimeout(),window.removeEventListener("scroll",this.onScroll,!0)}},{key:"render",value:function(){var l=this.renderCalendar();return this.props.inline&&!this.props.withPortal?l:this.props.withPortal?A.default.createElement("div",null,this.props.inline?null:A.default.createElement("div",{className:"react-datepicker__input-container"},this.renderDateInput(),this.renderClearButton()),this.state.open||this.props.inline?A.default.createElement("div",{className:"react-datepicker__portal"},l):null):A.default.createElement(sP,{className:this.props.popperClassName,wrapperClassName:this.props.wrapperClassName,hidePopper:!this.isCalendarOpen(),portalId:this.props.portalId,popperModifiers:this.props.popperModifiers,targetComponent:A.default.createElement("div",{className:"react-datepicker__input-container"},this.renderDateInput(),this.renderClearButton()),popperContainer:this.props.popperContainer,popperComponent:l,popperPlacement:this.props.popperPlacement,popperProps:this.props.popperProps,popperOnKeyDown:this.onPopperKeyDown,enableTabLoop:this.props.enableTabLoop})}}],[{key:"defaultProps",get:function(){return{allowSameDay:!1,dateFormat:"MM/dd/yyyy",dateFormatCalendar:"LLLL yyyy",onChange:function(){},disabled:!1,disabledKeyboardNavigation:!1,dropdownMode:"scroll",onFocus:function(){},onBlur:function(){},onKeyDown:function(){},onInputClick:function(){},onSelect:function(){},onClickOutside:function(){},onMonthChange:function(){},onCalendarOpen:function(){},onCalendarClose:function(){},preventOpenOnFocus:!1,onYearChange:function(){},onInputError:function(){},monthsShown:1,readOnly:!1,withPortal:!1,shouldCloseOnSelect:!0,showTimeSelect:!1,showTimeInput:!1,showPreviousMonths:!1,showMonthYearPicker:!1,showFullMonthYearPicker:!1,showTwoColumnMonthYearPicker:!1,showFourColumnMonthYearPicker:!1,showYearPicker:!1,showQuarterYearPicker:!1,strictParsing:!1,timeIntervals:30,timeCaption:"Time",previousMonthButtonLabel:"Previous Month",nextMonthButtonLabel:"Next Month",previousYearButtonLabel:"Previous Year",nextYearButtonLabel:"Next Year",timeInputLabel:"Time",enableTabLoop:!0,yearItemNumber:ci,renderDayContents:function(l){return l},focusSelectedMonth:!1,showPopperArrow:!0,excludeScrollbar:!0,customTimeInput:null}}}]),x}(A.default.Component),dP="input",Ud="navigate";e.CalendarContainer=Dv,e.default=cP,e.getDefaultLocale=zr,e.registerLocale=function(E,v){var x=typeof window!="undefined"?window:global;x.__localeData__||(x.__localeData__={}),x.__localeData__[E]=v},e.setDefaultLocale=function(E){(typeof window!="undefined"?window:global).__localeId__=E},Object.defineProperty(e,"__esModule",{value:!0})})});var vd=ge(_e()),dD=ge(ws());var et=ge(_e());var H0=ge(ah());function Re(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,H0.default(e,t)}var Ge=ge(_e()),CF=ge(Wn());function re(){return re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},re.apply(this,arguments)}function _s(e){return e.charAt(0)==="/"}function uh(e,t){for(var r=t,n=r+1,o=e.length;n<o;r+=1,n+=1)e[r]=e[n];e.pop()}function PO(e,t){t===void 0&&(t="");var r=e&&e.split("/")||[],n=t&&t.split("/")||[],o=e&&_s(e),i=t&&_s(t),u=o||i;if(e&&_s(e)?n=r:r.length&&(n.pop(),n=n.concat(r)),!n.length)return"/";var s;if(n.length){var c=n[n.length-1];s=c==="."||c===".."||c===""}else s=!1;for(var d=0,p=n.length;p>=0;p--){var _=n[p];_==="."?uh(n,p):_===".."?(uh(n,p),d++):d&&(uh(n,p),d--)}if(!u)for(;d--;d)n.unshift("..");u&&n[0]!==""&&(!n[0]||!_s(n[0]))&&n.unshift("");var g=n.join("/");return s&&g.substr(-1)!=="/"&&(g+="/"),g}var X0=PO;function J0(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}function xs(e,t){if(e===t)return!0;if(e==null||t==null)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(o,i){return xs(o,t[i])});if(typeof e=="object"||typeof t=="object"){var r=J0(e),n=J0(t);return r!==e||n!==t?xs(r,n):Object.keys(Object.assign({},e,t)).every(function(o){return xs(e[o],t[o])})}return!1}var Z0=xs;var TO=!0,ew="Invariant failed";function OO(e,t){if(!e)throw TO?new Error(ew):new Error(ew+": "+(t||""))}var fr=OO;function fa(e){return e.charAt(0)==="/"?e:"/"+e}function tw(e){return e.charAt(0)==="/"?e.substr(1):e}function bO(e,t){return e.toLowerCase().indexOf(t.toLowerCase())===0&&"/?#".indexOf(e.charAt(t.length))!==-1}function rw(e,t){return bO(e,t)?e.substr(t.length):e}function nw(e){return e.charAt(e.length-1)==="/"?e.slice(0,-1):e}function kO(e){var t=e||"/",r="",n="",o=t.indexOf("#");o!==-1&&(n=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return i!==-1&&(r=t.substr(i),t=t.substr(0,i)),{pathname:t,search:r==="?"?"":r,hash:n==="#"?"":n}}function Bt(e){var t=e.pathname,r=e.search,n=e.hash,o=t||"/";return r&&r!=="?"&&(o+=r.charAt(0)==="?"?r:"?"+r),n&&n!=="#"&&(o+=n.charAt(0)==="#"?n:"#"+n),o}function xt(e,t,r,n){var o;typeof e=="string"?(o=kO(e),o.state=t):(o=re({},e),o.pathname===void 0&&(o.pathname=""),o.search?o.search.charAt(0)!=="?"&&(o.search="?"+o.search):o.search="",o.hash?o.hash.charAt(0)!=="#"&&(o.hash="#"+o.hash):o.hash="",t!==void 0&&o.state===void 0&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(i){throw i instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):i}return r&&(o.key=r),n?o.pathname?o.pathname.charAt(0)!=="/"&&(o.pathname=X0(o.pathname,n.pathname)):o.pathname=n.pathname:o.pathname||(o.pathname="/"),o}function ow(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Z0(e.state,t.state)}function sh(){var e=null;function t(u){return e=u,function(){e===u&&(e=null)}}function r(u,s,c,d){if(e!=null){var p=typeof e=="function"?e(u,s):e;typeof p=="string"?typeof c=="function"?c(p,d):d(!0):d(p!==!1)}else d(!0)}var n=[];function o(u){var s=!0;function c(){s&&u.apply(void 0,arguments)}return n.push(c),function(){s=!1,n=n.filter(function(d){return d!==c})}}function i(){for(var u=arguments.length,s=new Array(u),c=0;c<u;c++)s[c]=arguments[c];n.forEach(function(d){return d.apply(void 0,s)})}return{setPrompt:t,confirmTransitionTo:r,appendListener:o,notifyListeners:i}}var iw=!!(typeof window!="undefined"&&window.document&&window.document.createElement);function aw(e,t){t(window.confirm(e))}function MO(){var e=window.navigator.userAgent;return(e.indexOf("Android 2.")!==-1||e.indexOf("Android 4.0")!==-1)&&e.indexOf("Mobile Safari")!==-1&&e.indexOf("Chrome")===-1&&e.indexOf("Windows Phone")===-1?!1:window.history&&"pushState"in window.history}function NO(){return window.navigator.userAgent.indexOf("Trident")===-1}function RO(){return window.navigator.userAgent.indexOf("Firefox")===-1}function qO(e){return e.state===void 0&&navigator.userAgent.indexOf("CriOS")===-1}var uw="popstate",sw="hashchange";function lw(){try{return window.history.state||{}}catch(e){return{}}}function cw(e){e===void 0&&(e={}),iw||fr(!1);var t=window.history,r=MO(),n=!NO(),o=e,i=o.forceRefresh,u=i===void 0?!1:i,s=o.getUserConfirmation,c=s===void 0?aw:s,d=o.keyLength,p=d===void 0?6:d,_=e.basename?nw(fa(e.basename)):"";function g(ve){var Ce=ve||{},se=Ce.key,de=Ce.state,xe=window.location,Pe=xe.pathname,Et=xe.search,ut=xe.hash,st=Pe+Et+ut;return _&&(st=rw(st,_)),xt(st,de,se)}function T(){return Math.random().toString(36).substr(2,p)}var R=sh();function U(ve){re(Me,ve),Me.length=t.length,R.notifyListeners(Me.location,Me.action)}function S(ve){qO(ve)||M(g(ve.state))}function y(){M(g(lw()))}var P=!1;function M(ve){if(P)P=!1,U();else{var Ce="POP";R.confirmTransitionTo(ve,Ce,c,function(se){se?U({action:Ce,location:ve}):I(ve)})}}function I(ve){var Ce=Me.location,se=H.indexOf(Ce.key);se===-1&&(se=0);var de=H.indexOf(ve.key);de===-1&&(de=0);var xe=se-de;xe&&(P=!0,ne(xe))}var z=g(lw()),H=[z.key];function B(ve){return _+Bt(ve)}function V(ve,Ce){var se="PUSH",de=xt(ve,Ce,T(),Me.location);R.confirmTransitionTo(de,se,c,function(xe){if(!!xe){var Pe=B(de),Et=de.key,ut=de.state;if(r)if(t.pushState({key:Et,state:ut},null,Pe),u)window.location.href=Pe;else{var st=H.indexOf(Me.location.key),sr=H.slice(0,st+1);sr.push(de.key),H=sr,U({action:se,location:de})}else window.location.href=Pe}})}function K(ve,Ce){var se="REPLACE",de=xt(ve,Ce,T(),Me.location);R.confirmTransitionTo(de,se,c,function(xe){if(!!xe){var Pe=B(de),Et=de.key,ut=de.state;if(r)if(t.replaceState({key:Et,state:ut},null,Pe),u)window.location.replace(Pe);else{var st=H.indexOf(Me.location.key);st!==-1&&(H[st]=de.key),U({action:se,location:de})}else window.location.replace(Pe)}})}function ne(ve){t.go(ve)}function we(){ne(-1)}function Oe(){ne(1)}var Ae=0;function ze(ve){Ae+=ve,Ae===1&&ve===1?(window.addEventListener(uw,S),n&&window.addEventListener(sw,y)):Ae===0&&(window.removeEventListener(uw,S),n&&window.removeEventListener(sw,y))}var Ne=!1;function tt(ve){ve===void 0&&(ve=!1);var Ce=R.setPrompt(ve);return Ne||(ze(1),Ne=!0),function(){return Ne&&(Ne=!1,ze(-1)),Ce()}}function Ie(ve){var Ce=R.appendListener(ve);return ze(1),function(){ze(-1),Ce()}}var Me={length:t.length,action:"POP",location:z,createHref:B,push:V,replace:K,go:ne,goBack:we,goForward:Oe,block:tt,listen:Ie};return Me}var dw="hashchange",IO={hashbang:{encodePath:function(t){return t.charAt(0)==="!"?t:"!/"+tw(t)},decodePath:function(t){return t.charAt(0)==="!"?t.substr(1):t}},noslash:{encodePath:tw,decodePath:fa},slash:{encodePath:fa,decodePath:fa}};function fw(e){var t=e.indexOf("#");return t===-1?e:e.slice(0,t)}function pa(){var e=window.location.href,t=e.indexOf("#");return t===-1?"":e.substring(t+1)}function LO(e){window.location.hash=e}function lh(e){window.location.replace(fw(window.location.href)+"#"+e)}function pw(e){e===void 0&&(e={}),iw||fr(!1);var t=window.history,r=RO(),n=e,o=n.getUserConfirmation,i=o===void 0?aw:o,u=n.hashType,s=u===void 0?"slash":u,c=e.basename?nw(fa(e.basename)):"",d=IO[s],p=d.encodePath,_=d.decodePath;function g(){var se=_(pa());return c&&(se=rw(se,c)),xt(se)}var T=sh();function R(se){re(Ce,se),Ce.length=t.length,T.notifyListeners(Ce.location,Ce.action)}var U=!1,S=null;function y(se,de){return se.pathname===de.pathname&&se.search===de.search&&se.hash===de.hash}function P(){var se=pa(),de=p(se);if(se!==de)lh(de);else{var xe=g(),Pe=Ce.location;if(!U&&y(Pe,xe)||S===Bt(xe))return;S=null,M(xe)}}function M(se){if(U)U=!1,R();else{var de="POP";T.confirmTransitionTo(se,de,i,function(xe){xe?R({action:de,location:se}):I(se)})}}function I(se){var de=Ce.location,xe=V.lastIndexOf(Bt(de));xe===-1&&(xe=0);var Pe=V.lastIndexOf(Bt(se));Pe===-1&&(Pe=0);var Et=xe-Pe;Et&&(U=!0,Oe(Et))}var z=pa(),H=p(z);z!==H&&lh(H);var B=g(),V=[Bt(B)];function K(se){var de=document.querySelector("base"),xe="";return de&&de.getAttribute("href")&&(xe=fw(window.location.href)),xe+"#"+p(c+Bt(se))}function ne(se,de){var xe="PUSH",Pe=xt(se,void 0,void 0,Ce.location);T.confirmTransitionTo(Pe,xe,i,function(Et){if(!!Et){var ut=Bt(Pe),st=p(c+ut),sr=pa()!==st;if(sr){S=ut,LO(st);var mr=V.lastIndexOf(Bt(Ce.location)),Zn=V.slice(0,mr+1);Zn.push(ut),V=Zn,R({action:xe,location:Pe})}else R()}})}function we(se,de){var xe="REPLACE",Pe=xt(se,void 0,void 0,Ce.location);T.confirmTransitionTo(Pe,xe,i,function(Et){if(!!Et){var ut=Bt(Pe),st=p(c+ut),sr=pa()!==st;sr&&(S=ut,lh(st));var mr=V.indexOf(Bt(Ce.location));mr!==-1&&(V[mr]=ut),R({action:xe,location:Pe})}})}function Oe(se){t.go(se)}function Ae(){Oe(-1)}function ze(){Oe(1)}var Ne=0;function tt(se){Ne+=se,Ne===1&&se===1?window.addEventListener(dw,P):Ne===0&&window.removeEventListener(dw,P)}var Ie=!1;function Me(se){se===void 0&&(se=!1);var de=T.setPrompt(se);return Ie||(tt(1),Ie=!0),function(){return Ie&&(Ie=!1,tt(-1)),de()}}function ve(se){var de=T.appendListener(se);return tt(1),function(){tt(-1),de()}}var Ce={length:t.length,action:"POP",location:B,createHref:K,push:ne,replace:we,go:Oe,goBack:Ae,goForward:ze,block:Me,listen:ve};return Ce}function hw(e,t,r){return Math.min(Math.max(e,t),r)}function mw(e){e===void 0&&(e={});var t=e,r=t.getUserConfirmation,n=t.initialEntries,o=n===void 0?["/"]:n,i=t.initialIndex,u=i===void 0?0:i,s=t.keyLength,c=s===void 0?6:s,d=sh();function p(V){re(B,V),B.length=B.entries.length,d.notifyListeners(B.location,B.action)}function _(){return Math.random().toString(36).substr(2,c)}var g=hw(u,0,o.length-1),T=o.map(function(V){return typeof V=="string"?xt(V,void 0,_()):xt(V,void 0,V.key||_())}),R=Bt;function U(V,K){var ne="PUSH",we=xt(V,K,_(),B.location);d.confirmTransitionTo(we,ne,r,function(Oe){if(!!Oe){var Ae=B.index,ze=Ae+1,Ne=B.entries.slice(0);Ne.length>ze?Ne.splice(ze,Ne.length-ze,we):Ne.push(we),p({action:ne,location:we,index:ze,entries:Ne})}})}function S(V,K){var ne="REPLACE",we=xt(V,K,_(),B.location);d.confirmTransitionTo(we,ne,r,function(Oe){!Oe||(B.entries[B.index]=we,p({action:ne,location:we}))})}function y(V){var K=hw(B.index+V,0,B.entries.length-1),ne="POP",we=B.entries[K];d.confirmTransitionTo(we,ne,r,function(Oe){Oe?p({action:ne,location:we,index:K}):p()})}function P(){y(-1)}function M(){y(1)}function I(V){var K=B.index+V;return K>=0&&K<B.entries.length}function z(V){return V===void 0&&(V=!1),d.setPrompt(V)}function H(V){return d.appendListener(V)}var B={length:T.length,action:"POP",location:T[g],index:g,entries:T,createHref:R,push:U,replace:S,go:y,goBack:P,goForward:M,canGo:I,block:z,listen:H};return B}var ha=ge(_e());var ch=ge(Wn());var dh=1073741823,vw=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:{};function AO(){var e="__global_unique_id__";return vw[e]=(vw[e]||0)+1}function FO(e,t){return e===t?e!==0||1/e==1/t:e!==e&&t!==t}function UO(e){var t=[];return{on:function(n){t.push(n)},off:function(n){t=t.filter(function(o){return o!==n})},get:function(){return e},set:function(n,o){e=n,t.forEach(function(i){return i(e,o)})}}}function jO(e){return Array.isArray(e)?e[0]:e}function YO(e,t){var r,n,o="__create-react-context-"+AO()+"__",i=function(s){Re(c,s);function c(){var p;return p=s.apply(this,arguments)||this,p.emitter=UO(p.props.value),p}var d=c.prototype;return d.getChildContext=function(){var _;return _={},_[o]=this.emitter,_},d.componentWillReceiveProps=function(_){if(this.props.value!==_.value){var g=this.props.value,T=_.value,R;FO(g,T)?R=0:(R=typeof t=="function"?t(g,T):dh,R|=0,R!==0&&this.emitter.set(_.value,R))}},d.render=function(){return this.props.children},c}(ha.Component);i.childContextTypes=(r={},r[o]=ch.default.object.isRequired,r);var u=function(s){Re(c,s);function c(){var p;return p=s.apply(this,arguments)||this,p.state={value:p.getValue()},p.onUpdate=function(_,g){var T=p.observedBits|0;(T&g)!=0&&p.setState({value:p.getValue()})},p}var d=c.prototype;return d.componentWillReceiveProps=function(_){var g=_.observedBits;this.observedBits=g??dh},d.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var _=this.props.observedBits;this.observedBits=_??dh},d.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},d.getValue=function(){return this.context[o]?this.context[o].get():e},d.render=function(){return jO(this.props.children)(this.state.value)},c}(ha.Component);return u.contextTypes=(n={},n[o]=ch.default.object,n),{Provider:i,Consumer:u}}var WO=ha.default.createContext||YO,fh=WO;var Eh=ge(Ew()),kF=ge(wh());function gn(e,t){if(e==null)return{};var r={},n=Object.keys(e),o,i;for(i=0;i<n.length;i++)o=n[i],!(t.indexOf(o)>=0)&&(r[o]=e[o]);return r}var lb=ge(Nw()),cb=function(t){var r=fh();return r.displayName=t,r},db=cb("Router-History"),fb=function(t){var r=fh();return r.displayName=t,r},jr=fb("Router"),ma=function(e){Re(t,e),t.computeRootMatch=function(o){return{path:"/",url:"/",params:{},isExact:o==="/"}};function t(n){var o;return o=e.call(this,n)||this,o.state={location:n.history.location},o._isMounted=!1,o._pendingLocation=null,n.staticContext||(o.unlisten=n.history.listen(function(i){o._isMounted?o.setState({location:i}):o._pendingLocation=i})),o}var r=t.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return Ge.default.createElement(jr.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},Ge.default.createElement(db.Provider,{children:this.props.children||null,value:this.props.history}))},t}(Ge.default.Component),RF=function(e){Re(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,n.history=mw(n.props),n}var r=t.prototype;return r.render=function(){return Ge.default.createElement(ma,{history:this.history,children:this.props.children})},t}(Ge.default.Component),pb=function(e){Re(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},r.componentDidUpdate=function(o){this.props.onUpdate&&this.props.onUpdate.call(this,this,o)},r.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},r.render=function(){return null},t}(Ge.default.Component);var Sh={},hb=1e4,Rw=0;function mb(e){if(Sh[e])return Sh[e];var t=Eh.default.compile(e);return Rw<hb&&(Sh[e]=t,Rw++),t}function qw(e,t){return e===void 0&&(e="/"),t===void 0&&(t={}),e==="/"?e:mb(e)(t,{pretty:!0})}function qs(e){var t=e.computedMatch,r=e.to,n=e.push,o=n===void 0?!1:n;return Ge.default.createElement(jr.Consumer,null,function(i){i||fr(!1);var u=i.history,s=i.staticContext,c=o?u.push:u.replace,d=xt(t?typeof r=="string"?qw(r,t.params):re({},r,{pathname:qw(r.pathname,t.params)}):r);return s?(c(d),null):Ge.default.createElement(pb,{onMount:function(){c(d)},onUpdate:function(_,g){var T=xt(g.to);ow(T,re({},d,{key:T.key}))||c(d)},to:r})})}var Iw={},vb=1e4,Lw=0;function yb(e,t){var r=""+t.end+t.strict+t.sensitive,n=Iw[r]||(Iw[r]={});if(n[e])return n[e];var o=[],i=Eh.default(e,o,t),u={regexp:i,keys:o};return Lw<vb&&(n[e]=u,Lw++),u}function Is(e,t){t===void 0&&(t={}),(typeof t=="string"||Array.isArray(t))&&(t={path:t});var r=t,n=r.path,o=r.exact,i=o===void 0?!1:o,u=r.strict,s=u===void 0?!1:u,c=r.sensitive,d=c===void 0?!1:c,p=[].concat(n);return p.reduce(function(_,g){if(!g&&g!=="")return null;if(_)return _;var T=yb(g,{end:i,strict:s,sensitive:d}),R=T.regexp,U=T.keys,S=R.exec(e);if(!S)return null;var y=S[0],P=S.slice(1),M=e===y;return i&&!M?null:{path:g,url:g==="/"&&y===""?"/":y,isExact:M,params:U.reduce(function(I,z,H){return I[z.name]=P[H],I},{})}},null)}var Wo=function(e){Re(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.render=function(){var o=this;return Ge.default.createElement(jr.Consumer,null,function(i){i||fr(!1);var u=o.props.location||i.location,s=o.props.computedMatch?o.props.computedMatch:o.props.path?Is(u.pathname,o.props):i.match,c=re({},i,{location:u,match:s}),d=o.props,p=d.children,_=d.component,g=d.render;return Array.isArray(p)&&p.length===0&&(p=null),Ge.default.createElement(jr.Provider,{value:c},c.match?p?typeof p=="function"?p(c):p:_?Ge.default.createElement(_,c):g?g(c):null:typeof p=="function"?p(c):null)})},t}(Ge.default.Component);function Ch(e){return e.charAt(0)==="/"?e:"/"+e}function gb(e,t){return e?re({},t,{pathname:Ch(e)+t.pathname}):t}function wb(e,t){if(!e)return t;var r=Ch(e);return t.pathname.indexOf(r)!==0?t:re({},t,{pathname:t.pathname.substr(r.length)})}function Aw(e){return typeof e=="string"?e:Bt(e)}function Dh(e){return function(){fr(!1)}}function Fw(){}var qF=function(e){Re(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,n.handlePush=function(s){return n.navigateTo(s,"PUSH")},n.handleReplace=function(s){return n.navigateTo(s,"REPLACE")},n.handleListen=function(){return Fw},n.handleBlock=function(){return Fw},n}var r=t.prototype;return r.navigateTo=function(o,i){var u=this.props,s=u.basename,c=s===void 0?"":s,d=u.context,p=d===void 0?{}:d;p.action=i,p.location=gb(c,xt(o)),p.url=Aw(p.location)},r.render=function(){var o=this.props,i=o.basename,u=i===void 0?"":i,s=o.context,c=s===void 0?{}:s,d=o.location,p=d===void 0?"/":d,_=gn(o,["basename","context","location"]),g={createHref:function(R){return Ch(u+Aw(R))},action:"POP",location:wb(u,xt(p)),push:this.handlePush,replace:this.handleReplace,go:Dh("go"),goBack:Dh("goBack"),goForward:Dh("goForward"),listen:this.handleListen,block:this.handleBlock};return Ge.default.createElement(ma,re({},_,{history:g,staticContext:c}))},t}(Ge.default.Component),Uw=function(e){Re(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.render=function(){var o=this;return Ge.default.createElement(jr.Consumer,null,function(i){i||fr(!1);var u=o.props.location||i.location,s,c;return Ge.default.Children.forEach(o.props.children,function(d){if(c==null&&Ge.default.isValidElement(d)){s=d;var p=d.props.path||d.props.from;c=p?Is(u.pathname,re({},d.props,{path:p})):i.match}}),c?Ge.default.cloneElement(s,{location:u,computedMatch:c}):null})},t}(Ge.default.Component);var _b=Ge.default.useContext;function Hn(){var e=_b(jr).match;return e?e.params:{}}var ar=ge(_e());var UF=ge(Wn());var jw=function(e){Re(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,n.history=cw(n.props),n}var r=t.prototype;return r.render=function(){return ar.default.createElement(ma,{history:this.history,children:this.props.children})},t}(ar.default.Component),QF=function(e){Re(t,e);function t(){for(var n,o=arguments.length,i=new Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=e.call.apply(e,[this].concat(i))||this,n.history=pw(n.props),n}var r=t.prototype;return r.render=function(){return ar.default.createElement(ma,{history:this.history,children:this.props.children})},t}(ar.default.Component),Ph=function(t,r){return typeof t=="function"?t(r):t},Yw=function(t,r){return typeof t=="string"?xt(t,null,null,r):t},Th=function(t){return t},Ho=ar.default.forwardRef;typeof Ho=="undefined"&&(Ho=Th);function xb(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var Eb=Ho(function(e,t){var r=e.innerRef,n=e.navigate,o=e.onClick,i=gn(e,["innerRef","navigate","onClick"]),u=i.target,s=re({},i,{onClick:function(d){try{o&&o(d)}catch(p){throw d.preventDefault(),p}!d.defaultPrevented&&d.button===0&&(!u||u==="_self")&&!xb(d)&&(d.preventDefault(),n())}});return Th!==Ho?s.ref=t||r:s.ref=r,ar.default.createElement("a",s)}),Sr=Ho(function(e,t){var r=e.component,n=r===void 0?Eb:r,o=e.replace,i=e.to,u=e.innerRef,s=gn(e,["component","replace","to","innerRef"]);return ar.default.createElement(jr.Consumer,null,function(c){c||fr(!1);var d=c.history,p=Yw(Ph(i,c.location),c.location),_=p?d.createHref(p):"",g=re({},s,{href:_,navigate:function(){var R=Ph(i,c.location),U=o?d.replace:d.push;U(R)}});return Th!==Ho?g.ref=t||u:g.innerRef=u,ar.default.createElement(n,g)})});var Ww=function(t){return t},Ls=ar.default.forwardRef;typeof Ls=="undefined"&&(Ls=Ww);function Sb(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter(function(n){return n}).join(" ")}var BF=Ls(function(e,t){var r=e["aria-current"],n=r===void 0?"page":r,o=e.activeClassName,i=o===void 0?"active":o,u=e.activeStyle,s=e.className,c=e.exact,d=e.isActive,p=e.location,_=e.sensitive,g=e.strict,T=e.style,R=e.to,U=e.innerRef,S=gn(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return ar.default.createElement(jr.Consumer,null,function(y){y||fr(!1);var P=p||y.location,M=Yw(Ph(R,P),P),I=M.pathname,z=I&&I.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),H=z?Is(P.pathname,{path:z,exact:c,sensitive:_,strict:g}):null,B=!!(d?d(H,P):H),V=B?Sb(s,i):s,K=B?re({},T,{},u):T,ne=re({"aria-current":B&&n||null,className:V,style:K,to:M},S);return Ww!==Ls?ne.ref=t||U:ne.innerRef=U,ar.default.createElement(Sr,ne)})});var lD=ge(Qw());var ur=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(n){var o=this,i=n||function(){};return this.listeners.push(i),this.onSubscribe(),function(){o.listeners=o.listeners.filter(function(u){return u!==i}),o.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}();var Qn=typeof window=="undefined";function qe(){}function Bw(e,t){return typeof e=="function"?e(t):e}function va(e){return typeof e=="number"&&e>=0&&e!==Infinity}function As(e){return Array.isArray(e)?e:[e]}function Fs(e,t){return Math.max(e+(t||0)-Date.now(),0)}function Qo(e,t,r){return Us(e)?typeof t=="function"?re({},r,{queryKey:e,queryFn:t}):re({},t,{queryKey:e}):e}function Vw(e,t,r){return Us(e)?typeof t=="function"?re({},r,{mutationKey:e,mutationFn:t}):re({},t,{mutationKey:e}):typeof e=="function"?re({},t,{mutationFn:e}):re({},e)}function Cr(e,t,r){return Us(e)?[re({},t,{queryKey:e}),r]:[e||{},t]}function Oh(e,t){var r=e.active,n=e.exact,o=e.fetching,i=e.inactive,u=e.predicate,s=e.queryKey,c=e.stale;if(Us(s)){if(n){if(t.queryHash!==ya(s,t.options))return!1}else if(!js(t.queryKey,s))return!1}var d;return i===!1||r&&!i?d=!0:(r===!1||i&&!r)&&(d=!1),!(typeof d=="boolean"&&t.isActive()!==d||typeof c=="boolean"&&t.isStale()!==c||typeof o=="boolean"&&t.isFetching()!==o||u&&!u(t))}function ya(e,t){var r=(t==null?void 0:t.queryKeyHashFn)||Bo;return r(e)}function Bo(e){var t=Array.isArray(e)?e:[e];return Cb(t)}function Cb(e){return JSON.stringify(e,function(t,r){return bh(r)?Object.keys(r).sort().reduce(function(n,o){return n[o]=r[o],n},{}):r})}function js(e,t){return $w(As(e),As(t))}function $w(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(function(r){return!$w(e[r],t[r])}):!1}function ga(e,t){if(e===t)return e;var r=Array.isArray(e)&&Array.isArray(t);if(r||bh(e)&&bh(t)){for(var n=r?e.length:Object.keys(e).length,o=r?t:Object.keys(t),i=o.length,u=r?[]:{},s=0,c=0;c<i;c++){var d=r?c:o[c];u[d]=ga(e[d],t[d]),u[d]===e[d]&&s++}return n===i&&s===n?e:u}return t}function zw(e,t){if(e&&!t||t&&!e)return!1;for(var r in e)if(e[r]!==t[r])return!1;return!0}function bh(e){if(!Kw(e))return!1;var t=e.constructor;if(typeof t=="undefined")return!0;var r=t.prototype;return!(!Kw(r)||!r.hasOwnProperty("isPrototypeOf"))}function Kw(e){return Object.prototype.toString.call(e)==="[object Object]"}function Us(e){return typeof e=="string"||Array.isArray(e)}function Gw(e){return new Promise(function(t){setTimeout(t,e)})}function kh(e){Promise.resolve().then(e).catch(function(t){return setTimeout(function(){throw t})})}var Db=function(e){Re(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.onSubscribe=function(){this.removeEventListener||this.setDefaultEventListener()},r.setEventListener=function(o){var i=this;this.removeEventListener&&this.removeEventListener(),this.removeEventListener=o(function(u){typeof u=="boolean"?i.setFocused(u):i.onFocus()})},r.setFocused=function(o){this.focused=o,o&&this.onFocus()},r.onFocus=function(){this.listeners.forEach(function(o){o()})},r.isFocused=function(){return typeof this.focused=="boolean"?this.focused:typeof document=="undefined"?!0:[void 0,"visible","prerender"].includes(document.visibilityState)},r.setDefaultEventListener=function(){var o;!Qn&&((o=window)==null?void 0:o.addEventListener)&&this.setEventListener(function(i){return window.addEventListener("visibilitychange",i,!1),window.addEventListener("focus",i,!1),function(){window.removeEventListener("visibilitychange",i),window.removeEventListener("focus",i)}})},t}(ur),wn=new Db;var Pb=function(e){Re(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.onSubscribe=function(){this.removeEventListener||this.setDefaultEventListener()},r.setEventListener=function(o){var i=this;this.removeEventListener&&this.removeEventListener(),this.removeEventListener=o(function(u){typeof u=="boolean"?i.setOnline(u):i.onOnline()})},r.setOnline=function(o){this.online=o,o&&this.onOnline()},r.onOnline=function(){this.listeners.forEach(function(o){o()})},r.isOnline=function(){return typeof this.online=="boolean"?this.online:typeof navigator=="undefined"||typeof navigator.onLine=="undefined"?!0:navigator.onLine},r.setDefaultEventListener=function(){var o;!Qn&&((o=window)==null?void 0:o.addEventListener)&&this.setEventListener(function(i){return window.addEventListener("online",i,!1),window.addEventListener("offline",i,!1),function(){window.removeEventListener("online",i),window.removeEventListener("offline",i)}})},t}(ur),Vo=new Pb;function Tb(e){return Math.min(1e3*Math.pow(2,e),3e4)}function wa(e){return typeof(e==null?void 0:e.cancel)=="function"}var Xw=function(t){this.revert=t==null?void 0:t.revert,this.silent=t==null?void 0:t.silent};function Ys(e){return e instanceof Xw}var Ws=function(t){var r=this,n=!1,o,i,u,s;this.cancel=function(g){return o==null?void 0:o(g)},this.cancelRetry=function(){n=!0},this.continue=function(){return i==null?void 0:i()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise(function(g,T){u=g,s=T});var c=function(T){r.isResolved||(r.isResolved=!0,t.onSuccess==null||t.onSuccess(T),i==null||i(),u(T))},d=function(T){r.isResolved||(r.isResolved=!0,t.onError==null||t.onError(T),i==null||i(),s(T))},p=function(){return new Promise(function(T){i=T,r.isPaused=!0,t.onPause==null||t.onPause()}).then(function(){i=void 0,r.isPaused=!1,t.onContinue==null||t.onContinue()})},_=function g(){if(!r.isResolved){var T;try{T=t.fn()}catch(R){T=Promise.reject(R)}o=function(U){if(!r.isResolved&&(d(new Xw(U)),wa(T)))try{T.cancel()}catch(S){}},r.isTransportCancelable=wa(T),Promise.resolve(T).then(c).catch(function(R){var U,S;if(!r.isResolved){var y=(U=t.retry)!=null?U:3,P=(S=t.retryDelay)!=null?S:Tb,M=typeof P=="function"?P(r.failureCount,R):P,I=y===!0||typeof y=="number"&&r.failureCount<y||typeof y=="function"&&y(r.failureCount,R);if(n||!I){d(R);return}r.failureCount++,t.onFail==null||t.onFail(r.failureCount,R),Gw(M).then(function(){if(!wn.isFocused()||!Vo.isOnline())return p()}).then(function(){n?d(R):g()})}})}};_()};var Ob=function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(r){r()},this.batchNotifyFn=function(r){r()}}var t=e.prototype;return t.batch=function(n){this.transactions++;var o=n();return this.transactions--,this.transactions||this.flush(),o},t.schedule=function(n){var o=this;this.transactions?this.queue.push(n):kh(function(){o.notifyFn(n)})},t.batchCalls=function(n){var o=this;return function(){for(var i=arguments.length,u=new Array(i),s=0;s<i;s++)u[s]=arguments[s];o.schedule(function(){n.apply(void 0,u)})}},t.flush=function(){var n=this,o=this.queue;this.queue=[],o.length&&kh(function(){n.batchNotifyFn(function(){o.forEach(function(i){n.notifyFn(i)})})})},t.setNotifyFunction=function(n){this.notifyFn=n},t.setBatchNotifyFunction=function(n){this.batchNotifyFn=n},e}(),Te=new Ob;var bb=console||{error:qe,warn:qe,log:qe};function $o(){return bb}var Jw=function(){function e(r){this.defaultOptions=r.defaultOptions,this.setOptions(r.options),this.observers=[],this.cache=r.cache,this.queryKey=r.queryKey,this.queryHash=r.queryHash,this.initialState=r.state||this.getDefaultState(this.options),this.state=this.initialState,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(n){var o;this.options=re({},this.defaultOptions,n),this.cacheTime=Math.max(this.cacheTime||0,(o=this.options.cacheTime)!=null?o:5*60*1e3)},t.setDefaultOptions=function(n){this.defaultOptions=n},t.scheduleGc=function(){var n=this;this.clearGcTimeout(),va(this.cacheTime)&&(this.gcTimeout=setTimeout(function(){n.optionalRemove()},this.cacheTime))},t.clearGcTimeout=function(){clearTimeout(this.gcTimeout),this.gcTimeout=void 0},t.optionalRemove=function(){!this.observers.length&&!this.state.isFetching&&this.cache.remove(this)},t.setData=function(n,o){var i,u,s=this.state.data,c=Bw(n,s);return((i=(u=this.options).isDataEqual)==null?void 0:i.call(u,s,c))?c=s:this.options.structuralSharing!==!1&&(c=ga(s,c)),this.dispatch({data:c,type:"success",dataUpdatedAt:o==null?void 0:o.updatedAt}),c},t.setState=function(n,o){this.dispatch({type:"setState",state:n,setStateOptions:o})},t.cancel=function(n){var o,i=this.promise;return(o=this.retryer)==null||o.cancel(n),i?i.then(qe).catch(qe):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some(function(n){return n.options.enabled!==!1})},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some(function(n){return n.getCurrentResult().isStale})},t.isStaleByTime=function(n){return n===void 0&&(n=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!Fs(this.state.dataUpdatedAt,n)},t.onFocus=function(){var n,o=this.observers.find(function(i){return i.shouldFetchOnWindowFocus()});o&&o.refetch(),(n=this.retryer)==null||n.continue()},t.onOnline=function(){var n,o=this.observers.find(function(i){return i.shouldFetchOnReconnect()});o&&o.refetch(),(n=this.retryer)==null||n.continue()},t.addObserver=function(n){this.observers.indexOf(n)===-1&&(this.observers.push(n),this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:n}))},t.removeObserver=function(n){this.observers.indexOf(n)!==-1&&(this.observers=this.observers.filter(function(o){return o!==n}),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:n}))},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(n,o){var i=this,u,s;if(this.state.isFetching){if(this.state.dataUpdatedAt&&(o==null?void 0:o.cancelRefetch))this.cancel({silent:!0});else if(this.promise)return this.promise}if(n&&this.setOptions(n),!this.options.queryFn){var c=this.observers.find(function(U){return U.options.queryFn});c&&this.setOptions(c.options)}var d=As(this.queryKey),p={queryKey:d,pageParam:void 0},_=function(){return i.options.queryFn?i.options.queryFn(p):Promise.reject("Missing queryFn")},g={fetchOptions:o,options:this.options,queryKey:d,state:this.state,fetchFn:_};if((u=this.options.behavior)==null?void 0:u.onFetch){var T;(T=this.options.behavior)==null||T.onFetch(g)}if(this.revertState=this.state,!this.state.isFetching||this.state.fetchMeta!==((s=g.fetchOptions)==null?void 0:s.meta)){var R;this.dispatch({type:"fetch",meta:(R=g.fetchOptions)==null?void 0:R.meta})}return this.retryer=new Ws({fn:g.fetchFn,onSuccess:function(S){i.setData(S),i.cacheTime===0&&i.optionalRemove()},onError:function(S){Ys(S)&&S.silent||i.dispatch({type:"error",error:S}),Ys(S)||(i.cache.config.onError&&i.cache.config.onError(S,i),$o().error(S)),i.cacheTime===0&&i.optionalRemove()},onFail:function(){i.dispatch({type:"failed"})},onPause:function(){i.dispatch({type:"pause"})},onContinue:function(){i.dispatch({type:"continue"})},retry:g.options.retry,retryDelay:g.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(n){var o=this;this.state=this.reducer(this.state,n),Te.batch(function(){o.observers.forEach(function(i){i.onQueryUpdate(n)}),o.cache.notify({query:o,type:"queryUpdated",action:n})})},t.getDefaultState=function(n){var o=typeof n.initialData=="function"?n.initialData():n.initialData,i=typeof n.initialData!="undefined",u=i?typeof n.initialDataUpdatedAt=="function"?n.initialDataUpdatedAt():n.initialDataUpdatedAt:0,s=typeof o!="undefined";return{data:o,dataUpdateCount:0,dataUpdatedAt:s?u??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:s?"success":"idle"}},t.reducer=function(n,o){var i,u;switch(o.type){case"failed":return re({},n,{fetchFailureCount:n.fetchFailureCount+1});case"pause":return re({},n,{isPaused:!0});case"continue":return re({},n,{isPaused:!1});case"fetch":return re({},n,{fetchFailureCount:0,fetchMeta:(i=o.meta)!=null?i:null,isFetching:!0,isPaused:!1,status:n.dataUpdatedAt?n.status:"loading"});case"success":return re({},n,{data:o.data,dataUpdateCount:n.dataUpdateCount+1,dataUpdatedAt:(u=o.dataUpdatedAt)!=null?u:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var s=o.error;return Ys(s)&&s.revert&&this.revertState?re({},this.revertState):re({},n,{error:s,errorUpdateCount:n.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:n.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return re({},n,{isInvalidated:!0});case"setState":return re({},n,o.state);default:return n}},e}();var Zw=function(e){Re(t,e);function t(n){var o;return o=e.call(this)||this,o.config=n||{},o.queries=[],o.queriesMap={},o}var r=t.prototype;return r.build=function(o,i,u){var s,c=i.queryKey,d=(s=i.queryHash)!=null?s:ya(c,i),p=this.get(d);return p||(p=new Jw({cache:this,queryKey:c,queryHash:d,options:o.defaultQueryOptions(i),state:u,defaultOptions:o.getQueryDefaults(c)}),this.add(p)),p},r.add=function(o){this.queriesMap[o.queryHash]||(this.queriesMap[o.queryHash]=o,this.queries.push(o),this.notify({type:"queryAdded",query:o}))},r.remove=function(o){var i=this.queriesMap[o.queryHash];i&&(o.destroy(),this.queries=this.queries.filter(function(u){return u!==o}),i===o&&delete this.queriesMap[o.queryHash],this.notify({type:"queryRemoved",query:o}))},r.clear=function(){var o=this;Te.batch(function(){o.queries.forEach(function(i){o.remove(i)})})},r.get=function(o){return this.queriesMap[o]},r.getAll=function(){return this.queries},r.find=function(o,i){var u=Cr(o,i),s=u[0];return typeof s.exact=="undefined"&&(s.exact=!0),this.queries.find(function(c){return Oh(s,c)})},r.findAll=function(o,i){var u=Cr(o,i),s=u[0];return s?this.queries.filter(function(c){return Oh(s,c)}):this.queries},r.notify=function(o){var i=this;Te.batch(function(){i.listeners.forEach(function(u){u(o)})})},r.onFocus=function(){var o=this;Te.batch(function(){o.queries.forEach(function(i){i.onFocus()})})},r.onOnline=function(){var o=this;Te.batch(function(){o.queries.forEach(function(i){i.onOnline()})})},t}(ur);var e_=function(){function e(r){this.options=re({},r.defaultOptions,r.options),this.mutationId=r.mutationId,this.mutationCache=r.mutationCache,this.observers=[],this.state=r.state||Mh()}var t=e.prototype;return t.setState=function(n){this.dispatch({type:"setState",state:n})},t.addObserver=function(n){this.observers.indexOf(n)===-1&&this.observers.push(n)},t.removeObserver=function(n){this.observers=this.observers.filter(function(o){return o!==n})},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(qe).catch(qe)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var n=this,o,i=this.state.status==="loading",u=Promise.resolve();return i||(this.dispatch({type:"loading",variables:this.options.variables}),u=u.then(function(){return n.options.onMutate==null?void 0:n.options.onMutate(n.state.variables)}).then(function(s){s!==n.state.context&&n.dispatch({type:"loading",context:s,variables:n.state.variables})})),u.then(function(){return n.executeMutation()}).then(function(s){o=s}).then(function(){return n.options.onSuccess==null?void 0:n.options.onSuccess(o,n.state.variables,n.state.context)}).then(function(){return n.options.onSettled==null?void 0:n.options.onSettled(o,null,n.state.variables,n.state.context)}).then(function(){return n.dispatch({type:"success",data:o}),o}).catch(function(s){return n.mutationCache.config.onError&&n.mutationCache.config.onError(s,n.state.variables,n.state.context,n),$o().error(s),Promise.resolve().then(function(){return n.options.onError==null?void 0:n.options.onError(s,n.state.variables,n.state.context)}).then(function(){return n.options.onSettled==null?void 0:n.options.onSettled(void 0,s,n.state.variables,n.state.context)}).then(function(){throw n.dispatch({type:"error",error:s}),s})})},t.executeMutation=function(){var n=this,o;return this.retryer=new Ws({fn:function(){return n.options.mutationFn?n.options.mutationFn(n.state.variables):Promise.reject("No mutationFn found")},onFail:function(){n.dispatch({type:"failed"})},onPause:function(){n.dispatch({type:"pause"})},onContinue:function(){n.dispatch({type:"continue"})},retry:(o=this.options.retry)!=null?o:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(n){var o=this;this.state=kb(this.state,n),Te.batch(function(){o.observers.forEach(function(i){i.onMutationUpdate(n)}),o.mutationCache.notify(o)})},e}();function Mh(){return{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0}}function kb(e,t){switch(t.type){case"failed":return re({},e,{failureCount:e.failureCount+1});case"pause":return re({},e,{isPaused:!0});case"continue":return re({},e,{isPaused:!1});case"loading":return re({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return re({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return re({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return re({},e,t.state);default:return e}}var t_=function(e){Re(t,e);function t(n){var o;return o=e.call(this)||this,o.config=n||{},o.mutations=[],o.mutationId=0,o}var r=t.prototype;return r.build=function(o,i,u){var s=new e_({mutationCache:this,mutationId:++this.mutationId,options:o.defaultMutationOptions(i),state:u,defaultOptions:i.mutationKey?o.getMutationDefaults(i.mutationKey):void 0});return this.add(s),s},r.add=function(o){this.mutations.push(o),this.notify(o)},r.remove=function(o){this.mutations=this.mutations.filter(function(i){return i!==o}),o.cancel(),this.notify(o)},r.clear=function(){var o=this;Te.batch(function(){o.mutations.forEach(function(i){o.remove(i)})})},r.getAll=function(){return this.mutations},r.notify=function(o){var i=this;Te.batch(function(){i.listeners.forEach(function(u){u(o)})})},r.onFocus=function(){this.resumePausedMutations()},r.onOnline=function(){this.resumePausedMutations()},r.resumePausedMutations=function(){var o=this.mutations.filter(function(i){return i.state.isPaused});return Te.batch(function(){return o.reduce(function(i,u){return i.then(function(){return u.continue().catch(qe)})},Promise.resolve())})},t}(ur);function n_(){return{onFetch:function(t){t.fetchFn=function(){var r,n,o,i,u=(r=t.fetchOptions)==null||(n=r.meta)==null?void 0:n.fetchMore,s=u==null?void 0:u.pageParam,c=(u==null?void 0:u.direction)==="forward",d=(u==null?void 0:u.direction)==="backward",p=((o=t.state.data)==null?void 0:o.pages)||[],_=((i=t.state.data)==null?void 0:i.pageParams)||[],g=_,T=!1,R=t.options.queryFn||function(){return Promise.reject("Missing queryFn")},U=function(V,K,ne,we){if(T)return Promise.reject("Cancelled");if(typeof ne=="undefined"&&!K&&V.length)return Promise.resolve(V);var Oe={queryKey:t.queryKey,pageParam:ne},Ae=R(Oe),ze=Promise.resolve(Ae).then(function(tt){return g=we?[ne].concat(g):[].concat(g,[ne]),we?[tt].concat(V):[].concat(V,[tt])});if(wa(Ae)){var Ne=ze;Ne.cancel=Ae.cancel}return ze},S;if(!p.length)S=U([]);else if(c){var y=typeof s!="undefined",P=y?s:r_(t.options,p);S=U(p,y,P)}else if(d){var M=typeof s!="undefined",I=M?s:Mb(t.options,p);S=U(p,M,I,!0)}else(function(){g=[];var B=typeof t.options.getNextPageParam=="undefined";S=U([],B,_[0]);for(var V=function(we){S=S.then(function(Oe){var Ae=B?_[we]:r_(t.options,Oe);return U(Oe,B,Ae)})},K=1;K<p.length;K++)V(K)})();var z=S.then(function(B){return{pages:B,pageParams:g}}),H=z;return H.cancel=function(){T=!0,wa(S)&&S.cancel()},z}}}}function r_(e,t){return e.getNextPageParam==null?void 0:e.getNextPageParam(t[t.length-1],t)}function Mb(e,t){return e.getPreviousPageParam==null?void 0:e.getPreviousPageParam(t[0],t)}var o_=function(){function e(r){r===void 0&&(r={}),this.queryCache=r.queryCache||new Zw,this.mutationCache=r.mutationCache||new t_,this.defaultOptions=r.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var n=this;this.unsubscribeFocus=wn.subscribe(function(){wn.isFocused()&&Vo.isOnline()&&(n.mutationCache.onFocus(),n.queryCache.onFocus())}),this.unsubscribeOnline=Vo.subscribe(function(){wn.isFocused()&&Vo.isOnline()&&(n.mutationCache.onOnline(),n.queryCache.onOnline())})},t.unmount=function(){var n,o;(n=this.unsubscribeFocus)==null||n.call(this),(o=this.unsubscribeOnline)==null||o.call(this)},t.isFetching=function(n,o){var i=Cr(n,o),u=i[0];return u.fetching=!0,this.queryCache.findAll(u).length},t.getQueryData=function(n,o){var i;return(i=this.queryCache.find(n,o))==null?void 0:i.state.data},t.setQueryData=function(n,o,i){var u=Qo(n),s=this.defaultQueryOptions(u);return this.queryCache.build(this,s).setData(o,i)},t.getQueryState=function(n,o){var i;return(i=this.queryCache.find(n,o))==null?void 0:i.state},t.removeQueries=function(n,o){var i=Cr(n,o),u=i[0],s=this.queryCache;Te.batch(function(){s.findAll(u).forEach(function(c){s.remove(c)})})},t.resetQueries=function(n,o,i){var u=this,s=Cr(n,o,i),c=s[0],d=s[1],p=this.queryCache,_=re({},c,{active:!0});return Te.batch(function(){return p.findAll(c).forEach(function(g){g.reset()}),u.refetchQueries(_,d)})},t.cancelQueries=function(n,o,i){var u=this,s=Cr(n,o,i),c=s[0],d=s[1],p=d===void 0?{}:d;typeof p.revert=="undefined"&&(p.revert=!0);var _=Te.batch(function(){return u.queryCache.findAll(c).map(function(g){return g.cancel(p)})});return Promise.all(_).then(qe).catch(qe)},t.invalidateQueries=function(n,o,i){var u,s,c=this,d=Cr(n,o,i),p=d[0],_=d[1],g=re({},p,{active:(u=p.refetchActive)!=null?u:!0,inactive:(s=p.refetchInactive)!=null?s:!1});return Te.batch(function(){return c.queryCache.findAll(p).forEach(function(T){T.invalidate()}),c.refetchQueries(g,_)})},t.refetchQueries=function(n,o,i){var u=this,s=Cr(n,o,i),c=s[0],d=s[1],p=Te.batch(function(){return u.queryCache.findAll(c).map(function(g){return g.fetch()})}),_=Promise.all(p).then(qe);return(d==null?void 0:d.throwOnError)||(_=_.catch(qe)),_},t.fetchQuery=function(n,o,i){var u=Qo(n,o,i),s=this.defaultQueryOptions(u);typeof s.retry=="undefined"&&(s.retry=!1);var c=this.queryCache.build(this,s);return c.isStaleByTime(s.staleTime)?c.fetch(s):Promise.resolve(c.state.data)},t.prefetchQuery=function(n,o,i){return this.fetchQuery(n,o,i).then(qe).catch(qe)},t.fetchInfiniteQuery=function(n,o,i){var u=Qo(n,o,i);return u.behavior=n_(),this.fetchQuery(u)},t.prefetchInfiniteQuery=function(n,o,i){return this.fetchInfiniteQuery(n,o,i).then(qe).catch(qe)},t.cancelMutations=function(){var n=this,o=Te.batch(function(){return n.mutationCache.getAll().map(function(i){return i.cancel()})});return Promise.all(o).then(qe).catch(qe)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(n){return this.mutationCache.build(this,n).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(n){this.defaultOptions=n},t.setQueryDefaults=function(n,o){var i=this.queryDefaults.find(function(u){return Bo(n)===Bo(u.queryKey)});i?i.defaultOptions=o:this.queryDefaults.push({queryKey:n,defaultOptions:o})},t.getQueryDefaults=function(n){var o;return n?(o=this.queryDefaults.find(function(i){return js(n,i.queryKey)}))==null?void 0:o.defaultOptions:void 0},t.setMutationDefaults=function(n,o){var i=this.mutationDefaults.find(function(u){return Bo(n)===Bo(u.mutationKey)});i?i.defaultOptions=o:this.mutationDefaults.push({mutationKey:n,defaultOptions:o})},t.getMutationDefaults=function(n){var o;return n?(o=this.mutationDefaults.find(function(i){return js(n,i.mutationKey)}))==null?void 0:o.defaultOptions:void 0},t.defaultQueryOptions=function(n){if(n==null?void 0:n._defaulted)return n;var o=re({},this.defaultOptions.queries,this.getQueryDefaults(n==null?void 0:n.queryKey),n,{_defaulted:!0});return!o.queryHash&&o.queryKey&&(o.queryHash=ya(o.queryKey,o)),o},t.defaultQueryObserverOptions=function(n){return this.defaultQueryOptions(n)},t.defaultMutationOptions=function(n){return(n==null?void 0:n._defaulted)?n:re({},this.defaultOptions.mutations,this.getMutationDefaults(n==null?void 0:n.mutationKey),n,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}();var u_=function(e){Re(t,e);function t(n,o){var i;return i=e.call(this)||this,i.client=n,i.options=o,i.trackedProps=[],i.bindMethods(),i.setOptions(o),i}var r=t.prototype;return r.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},r.onSubscribe=function(){this.listeners.length===1&&(this.currentQuery.addObserver(this),i_(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},r.onUnsubscribe=function(){this.listeners.length||this.destroy()},r.shouldFetchOnReconnect=function(){return Nb(this.currentQuery,this.options)},r.shouldFetchOnWindowFocus=function(){return Rb(this.currentQuery,this.options)},r.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},r.setOptions=function(o,i){var u=this.options,s=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(o),typeof this.options.enabled!="undefined"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=u.queryKey),this.updateQuery();var c=this.hasListeners();c&&a_(this.currentQuery,s,this.options,u)&&this.executeFetch(),this.updateResult(i),c&&(this.currentQuery!==s||this.options.enabled!==u.enabled||this.options.staleTime!==u.staleTime)&&this.updateStaleTimeout(),c&&(this.currentQuery!==s||this.options.enabled!==u.enabled||this.options.refetchInterval!==u.refetchInterval)&&this.updateRefetchInterval()},r.getOptimisticResult=function(o){var i=this.client.defaultQueryObserverOptions(o),u=this.client.getQueryCache().build(this.client,i);return this.createResult(u,i)},r.getCurrentResult=function(){return this.currentResult},r.trackResult=function(o){var i=this,u={};return Object.keys(o).forEach(function(s){Object.defineProperty(u,s,{configurable:!1,enumerable:!0,get:function(){var d=s;return i.trackedProps.includes(d)||i.trackedProps.push(d),o[d]}})}),u},r.getNextResult=function(o){var i=this;return new Promise(function(u,s){var c=i.subscribe(function(d){d.isFetching||(c(),d.isError&&(o==null?void 0:o.throwOnError)?s(d.error):u(d))})})},r.getCurrentQuery=function(){return this.currentQuery},r.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},r.refetch=function(o){return this.fetch(o)},r.fetchOptimistic=function(o){var i=this,u=this.client.defaultQueryObserverOptions(o),s=this.client.getQueryCache().build(this.client,u);return s.fetch().then(function(){return i.createResult(s,u)})},r.fetch=function(o){var i=this;return this.executeFetch(o).then(function(){return i.updateResult(),i.currentResult})},r.executeFetch=function(o){this.updateQuery();var i=this.currentQuery.fetch(this.options,o);return(o==null?void 0:o.throwOnError)||(i=i.catch(qe)),i},r.updateStaleTimeout=function(){var o=this;if(this.clearStaleTimeout(),!(Qn||this.currentResult.isStale||!va(this.options.staleTime))){var i=Fs(this.currentResult.dataUpdatedAt,this.options.staleTime),u=i+1;this.staleTimeoutId=setTimeout(function(){o.currentResult.isStale||o.updateResult()},u)}},r.updateRefetchInterval=function(){var o=this;this.clearRefetchInterval(),!(Qn||this.options.enabled===!1||!va(this.options.refetchInterval))&&(this.refetchIntervalId=setInterval(function(){(o.options.refetchIntervalInBackground||wn.isFocused())&&o.executeFetch()},this.options.refetchInterval))},r.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval()},r.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},r.clearStaleTimeout=function(){clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0},r.clearRefetchInterval=function(){clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0},r.createResult=function(o,i){var u=this.currentQuery,s=this.options,c=this.currentResult,d=this.currentResultState,p=this.currentResultOptions,_=o!==u,g=_?o.state:this.currentQueryInitialState,T=_?this.currentResult:this.previousQueryResult,R=o.state,U=R.dataUpdatedAt,S=R.error,y=R.errorUpdatedAt,P=R.isFetching,M=R.status,I=!1,z=!1,H;if(i.optimisticResults){var B=this.hasListeners(),V=!B&&i_(o,i),K=B&&a_(o,u,i,s);(V||K)&&(P=!0,U||(M="loading"))}if(i.keepPreviousData&&!R.dataUpdateCount&&(T==null?void 0:T.isSuccess)&&M!=="error")H=T.data,U=T.dataUpdatedAt,M=T.status,I=!0;else if(i.select&&typeof R.data!="undefined")if(c&&R.data===(d==null?void 0:d.data)&&i.select===(p==null?void 0:p.select))H=c.data;else try{H=i.select(R.data),i.structuralSharing!==!1&&(H=ga(c==null?void 0:c.data,H))}catch(Oe){$o().error(Oe),S=Oe,y=Date.now(),M="error"}else H=R.data;if(typeof i.placeholderData!="undefined"&&typeof H=="undefined"&&M==="loading"){var ne;(c==null?void 0:c.isPlaceholderData)&&i.placeholderData===(p==null?void 0:p.placeholderData)?ne=c.data:ne=typeof i.placeholderData=="function"?i.placeholderData():i.placeholderData,typeof ne!="undefined"&&(M="success",H=ne,z=!0)}var we={status:M,isLoading:M==="loading",isSuccess:M==="success",isError:M==="error",isIdle:M==="idle",data:H,dataUpdatedAt:U,error:S,errorUpdatedAt:y,failureCount:R.fetchFailureCount,isFetched:R.dataUpdateCount>0||R.errorUpdateCount>0,isFetchedAfterMount:R.dataUpdateCount>g.dataUpdateCount||R.errorUpdateCount>g.errorUpdateCount,isFetching:P,isLoadingError:M==="error"&&R.dataUpdatedAt===0,isPlaceholderData:z,isPreviousData:I,isRefetchError:M==="error"&&R.dataUpdatedAt!==0,isStale:_a(o,i),refetch:this.refetch,remove:this.remove};return we},r.shouldNotifyListeners=function(o,i){if(!i)return!0;if(o===i)return!1;var u=this.options,s=u.notifyOnChangeProps,c=u.notifyOnChangePropsExclusions;if(!s&&!c||s==="tracked"&&!this.trackedProps.length)return!0;var d=s==="tracked"?this.trackedProps:s;return Object.keys(o).some(function(p){var _=p,g=o[_]!==i[_],T=d==null?void 0:d.some(function(U){return U===p}),R=c==null?void 0:c.some(function(U){return U===p});return g&&!R&&(!d||T)})},r.updateResult=function(o){var i=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!zw(this.currentResult,i)){var u={cache:!0};(o==null?void 0:o.listeners)!==!1&&this.shouldNotifyListeners(this.currentResult,i)&&(u.listeners=!0),this.notify(re({},u,o))}},r.updateQuery=function(){var o=this.client.getQueryCache().build(this.client,this.options);if(o!==this.currentQuery){var i=this.currentQuery;this.currentQuery=o,this.currentQueryInitialState=o.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(i==null||i.removeObserver(this),o.addObserver(this))}},r.onQueryUpdate=function(o){var i={};o.type==="success"?i.onSuccess=!0:o.type==="error"&&(i.onError=!0),this.updateResult(i),this.hasListeners()&&this.updateTimers()},r.notify=function(o){var i=this;Te.batch(function(){o.onSuccess?(i.options.onSuccess==null||i.options.onSuccess(i.currentResult.data),i.options.onSettled==null||i.options.onSettled(i.currentResult.data,null)):o.onError&&(i.options.onError==null||i.options.onError(i.currentResult.error),i.options.onSettled==null||i.options.onSettled(void 0,i.currentResult.error)),o.listeners&&i.listeners.forEach(function(u){u(i.currentResult)}),o.cache&&i.client.getQueryCache().notify({query:i.currentQuery,type:"observerResultsUpdated"})})},t}(ur);function qb(e,t){return t.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&t.retryOnMount===!1)}function Ib(e,t){return t.enabled!==!1&&e.state.dataUpdatedAt>0&&(t.refetchOnMount==="always"||t.refetchOnMount!==!1&&_a(e,t))}function i_(e,t){return qb(e,t)||Ib(e,t)}function Nb(e,t){return t.enabled!==!1&&(t.refetchOnReconnect==="always"||t.refetchOnReconnect!==!1&&_a(e,t))}function Rb(e,t){return t.enabled!==!1&&(t.refetchOnWindowFocus==="always"||t.refetchOnWindowFocus!==!1&&_a(e,t))}function a_(e,t,r,n){return r.enabled!==!1&&(e!==t||n.enabled===!1)&&_a(e,r)}function _a(e,t){return e.isStaleByTime(t.staleTime)}var s_=function(e){Re(t,e);function t(n,o){var i;return i=e.call(this)||this,i.client=n,i.setOptions(o),i.bindMethods(),i.updateResult(),i}var r=t.prototype;return r.bindMethods=function(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)},r.setOptions=function(o){this.options=this.client.defaultMutationOptions(o)},r.onUnsubscribe=function(){if(!this.listeners.length){var o;(o=this.currentMutation)==null||o.removeObserver(this)}},r.onMutationUpdate=function(o){this.updateResult();var i={listeners:!0};o.type==="success"?i.onSuccess=!0:o.type==="error"&&(i.onError=!0),this.notify(i)},r.getCurrentResult=function(){return this.currentResult},r.reset=function(){this.currentMutation=void 0,this.updateResult(),this.notify({listeners:!0})},r.mutate=function(o,i){return this.mutateOptions=i,this.currentMutation&&this.currentMutation.removeObserver(this),this.currentMutation=this.client.getMutationCache().build(this.client,re({},this.options,{variables:typeof o!="undefined"?o:this.options.variables})),this.currentMutation.addObserver(this),this.currentMutation.execute()},r.updateResult=function(){var o=this.currentMutation?this.currentMutation.state:Mh();this.currentResult=re({},o,{isLoading:o.status==="loading",isSuccess:o.status==="success",isError:o.status==="error",isIdle:o.status==="idle",mutate:this.mutate,reset:this.reset})},r.notify=function(o){var i=this;Te.batch(function(){i.mutateOptions&&(o.onSuccess?(i.mutateOptions.onSuccess==null||i.mutateOptions.onSuccess(i.currentResult.data,i.currentResult.variables,i.currentResult.context),i.mutateOptions.onSettled==null||i.mutateOptions.onSettled(i.currentResult.data,null,i.currentResult.variables,i.currentResult.context)):o.onError&&(i.mutateOptions.onError==null||i.mutateOptions.onError(i.currentResult.error,i.currentResult.variables,i.currentResult.context),i.mutateOptions.onSettled==null||i.mutateOptions.onSettled(void 0,i.currentResult.error,i.currentResult.variables,i.currentResult.context))),o.listeners&&i.listeners.forEach(function(u){u(i.currentResult)})})},t}(ur);var xa=ge(_e()),l_=xa.default.createContext(void 0);function c_(){return typeof window!="undefined"?(window.ReactQueryClientContext||(window.ReactQueryClientContext=l_),window.ReactQueryClientContext):l_}var pr=function(){var t=xa.default.useContext(c_());if(!t)throw new Error("No QueryClient set, use QueryClientProvider to set one");return t},d_=function(t){var r=t.client,n=t.children;xa.default.useEffect(function(){return r.mount(),function(){r.unmount()}},[r]);var o=c_();return xa.default.createElement(o.Provider,{value:r},n)};var Nh=ge(_e());function Lb(){var e=!1;return{clearReset:function(){e=!1},reset:function(){e=!0},isReset:function(){return e}}}var Ab=Nh.default.createContext(Lb()),f_=function(){return Nh.default.useContext(Ab)};var zo=ge(_e());function Dr(e,t,r){var n=zo.default.useRef(!1),o=zo.default.useState(0),i=o[1],u=Vw(e,t,r),s=pr(),c=zo.default.useRef();c.current?c.current.setOptions(u):c.current=new s_(s,u);var d=c.current.getCurrentResult();zo.default.useEffect(function(){n.current=!0;var _=c.current.subscribe(Te.batchCalls(function(){n.current&&i(function(g){return g+1})}));return function(){n.current=!1,_()}},[]);var p=zo.default.useCallback(function(_,g){c.current.mutate(_,g).catch(qe)},[]);if(d.error&&c.current.options.useErrorBoundary)throw d.error;return re({},d,{mutate:p,mutateAsync:d.mutate})}var Ko=ge(_e());function p_(e,t){var r=Ko.default.useRef(!1),n=Ko.default.useState(0),o=n[1],i=pr(),u=f_(),s=i.defaultQueryObserverOptions(e);s.optimisticResults=!0,s.onError&&(s.onError=Te.batchCalls(s.onError)),s.onSuccess&&(s.onSuccess=Te.batchCalls(s.onSuccess)),s.onSettled&&(s.onSettled=Te.batchCalls(s.onSettled)),s.suspense&&typeof s.staleTime!="number"&&(s.staleTime=1e3),(s.suspense||s.useErrorBoundary)&&(u.isReset()||(s.retryOnMount=!1));var c=Ko.default.useRef();c.current||(c.current=new t(i,s));var d=c.current.getOptimisticResult(s);if(Ko.default.useEffect(function(){r.current=!0,u.clearReset();var p=c.current.subscribe(Te.batchCalls(function(){r.current&&o(function(_){return _+1})}));return c.current.updateResult(),function(){r.current=!1,p()}},[u]),Ko.default.useEffect(function(){c.current.setOptions(s,{listeners:!1})},[s]),s.suspense&&d.isLoading)throw c.current.fetchOptimistic(s).then(function(p){var _=p.data;s.onSuccess==null||s.onSuccess(_),s.onSettled==null||s.onSettled(_,null)}).catch(function(p){u.clearReset(),s.onError==null||s.onError(p),s.onSettled==null||s.onSettled(void 0,p)});if((s.suspense||s.useErrorBoundary)&&d.isError)throw d.error;return s.notifyOnChangeProps==="tracked"&&(d=c.current.trackResult(d)),d}function Go(e,t,r){var n=Qo(e,t,r);return p_(n,u_)}var Rh=ge(_e());function h_(){return Rh.default.createElement("div",null,Rh.default.createElement("img",{src:"/shacal_logo.svg"}))}var m_=ge(_e());function Hs(){return m_.default.createElement("div",null,"NOT FOUND...")}var Wr=ge(_e());var Ye=ge(Wn()),E_=ge(w_()),S_=ge(x_()),Xo=ge(_e()),C_=ge(iu()),Bn={BODY:"bodyAttributes",HTML:"htmlAttributes",TITLE:"titleAttributes"},me={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},Oj=Object.keys(me).map(function(e){return me[e]}),He={CHARSET:"charset",CSS_TEXT:"cssText",HREF:"href",HTTPEQUIV:"http-equiv",INNER_HTML:"innerHTML",ITEM_PROP:"itemprop",NAME:"name",PROPERTY:"property",REL:"rel",SRC:"src",TARGET:"target"},Bs={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},Ea={DEFAULT_TITLE:"defaultTitle",DEFER:"defer",ENCODE_SPECIAL_CHARACTERS:"encodeSpecialCharacters",ON_CHANGE_CLIENT_STATE:"onChangeClientState",TITLE_TEMPLATE:"titleTemplate"},$b=Object.keys(Bs).reduce(function(e,t){return e[Bs[t]]=t,e},{}),zb=[me.NOSCRIPT,me.SCRIPT,me.STYLE],hr="data-react-helmet",Kb=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gb=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Xb=function(){function e(t,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),jt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Jb=function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},D_=function(e,t){var r={};for(var n in e)t.indexOf(n)>=0||!Object.prototype.hasOwnProperty.call(e,n)||(r[n]=e[n]);return r},Zb=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e},qh=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return r===!1?String(t):String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},ek=function(t){var r=Jo(t,me.TITLE),n=Jo(t,Ea.TITLE_TEMPLATE);if(n&&r)return n.replace(/%s/g,function(){return Array.isArray(r)?r.join(""):r});var o=Jo(t,Ea.DEFAULT_TITLE);return r||o||void 0},tk=function(t){return Jo(t,Ea.ON_CHANGE_CLIENT_STATE)||function(){}},Ih=function(t,r){return r.filter(function(n){return typeof n[t]!="undefined"}).map(function(n){return n[t]}).reduce(function(n,o){return jt({},n,o)},{})},rk=function(t,r){return r.filter(function(n){return typeof n[me.BASE]!="undefined"}).map(function(n){return n[me.BASE]}).reverse().reduce(function(n,o){if(!n.length)for(var i=Object.keys(o),u=0;u<i.length;u++){var s=i[u],c=s.toLowerCase();if(t.indexOf(c)!==-1&&o[c])return n.concat(o)}return n},[])},Sa=function(t,r,n){var o={};return n.filter(function(i){return Array.isArray(i[t])?!0:(typeof i[t]!="undefined"&&nk("Helmet: "+t+' should be of type "Array". Instead found type "'+Kb(i[t])+'"'),!1)}).map(function(i){return i[t]}).reverse().reduce(function(i,u){var s={};u.filter(function(g){for(var T=void 0,R=Object.keys(g),U=0;U<R.length;U++){var S=R[U],y=S.toLowerCase();r.indexOf(y)!==-1&&!(T===He.REL&&g[T].toLowerCase()==="canonical")&&!(y===He.REL&&g[y].toLowerCase()==="stylesheet")&&(T=y),r.indexOf(S)!==-1&&(S===He.INNER_HTML||S===He.CSS_TEXT||S===He.ITEM_PROP)&&(T=S)}if(!T||!g[T])return!1;var P=g[T].toLowerCase();return o[T]||(o[T]={}),s[T]||(s[T]={}),o[T][P]?!1:(s[T][P]=!0,!0)}).reverse().forEach(function(g){return i.push(g)});for(var c=Object.keys(s),d=0;d<c.length;d++){var p=c[d],_=C_.default({},o[p],s[p]);o[p]=_}return i},[]).reverse()},Jo=function(t,r){for(var n=t.length-1;n>=0;n--){var o=t[n];if(o.hasOwnProperty(r))return o[r]}return null},ok=function(t){return{baseTag:rk([He.HREF,He.TARGET],t),bodyAttributes:Ih(Bn.BODY,t),defer:Jo(t,Ea.DEFER),encode:Jo(t,Ea.ENCODE_SPECIAL_CHARACTERS),htmlAttributes:Ih(Bn.HTML,t),linkTags:Sa(me.LINK,[He.REL,He.HREF],t),metaTags:Sa(me.META,[He.NAME,He.CHARSET,He.HTTPEQUIV,He.PROPERTY,He.ITEM_PROP],t),noscriptTags:Sa(me.NOSCRIPT,[He.INNER_HTML],t),onChangeClientState:tk(t),scriptTags:Sa(me.SCRIPT,[He.SRC,He.INNER_HTML],t),styleTags:Sa(me.STYLE,[He.CSS_TEXT],t),title:ek(t),titleAttributes:Ih(Bn.TITLE,t)}},Lh=function(){var e=Date.now();return function(t){var r=Date.now();r-e>16?(e=r,t(r)):setTimeout(function(){Lh(t)},0)}}(),P_=function(t){return clearTimeout(t)},ik=typeof window!="undefined"?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||Lh:global.requestAnimationFrame||Lh,ak=typeof window!="undefined"?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||P_:global.cancelAnimationFrame||P_,nk=function(t){return console&&typeof console.warn=="function"&&console.warn(t)},Ca=null,uk=function(t){Ca&&ak(Ca),t.defer?Ca=ik(function(){T_(t,function(){Ca=null})}):(T_(t),Ca=null)},T_=function(t,r){var n=t.baseTag,o=t.bodyAttributes,i=t.htmlAttributes,u=t.linkTags,s=t.metaTags,c=t.noscriptTags,d=t.onChangeClientState,p=t.scriptTags,_=t.styleTags,g=t.title,T=t.titleAttributes;Ah(me.BODY,o),Ah(me.HTML,i),sk(g,T);var R={baseTag:Zo(me.BASE,n),linkTags:Zo(me.LINK,u),metaTags:Zo(me.META,s),noscriptTags:Zo(me.NOSCRIPT,c),scriptTags:Zo(me.SCRIPT,p),styleTags:Zo(me.STYLE,_)},U={},S={};Object.keys(R).forEach(function(y){var P=R[y],M=P.newTags,I=P.oldTags;M.length&&(U[y]=M),I.length&&(S[y]=R[y].oldTags)}),r&&r(),d(t,U,S)},O_=function(t){return Array.isArray(t)?t.join(""):t},sk=function(t,r){typeof t!="undefined"&&document.title!==t&&(document.title=O_(t)),Ah(me.TITLE,r)},Ah=function(t,r){var n=document.getElementsByTagName(t)[0];if(!!n){for(var o=n.getAttribute(hr),i=o?o.split(","):[],u=[].concat(i),s=Object.keys(r),c=0;c<s.length;c++){var d=s[c],p=r[d]||"";n.getAttribute(d)!==p&&n.setAttribute(d,p),i.indexOf(d)===-1&&i.push(d);var _=u.indexOf(d);_!==-1&&u.splice(_,1)}for(var g=u.length-1;g>=0;g--)n.removeAttribute(u[g]);i.length===u.length?n.removeAttribute(hr):n.getAttribute(hr)!==s.join(",")&&n.setAttribute(hr,s.join(","))}},Zo=function(t,r){var n=document.head||document.querySelector(me.HEAD),o=n.querySelectorAll(t+"["+hr+"]"),i=Array.prototype.slice.call(o),u=[],s=void 0;return r&&r.length&&r.forEach(function(c){var d=document.createElement(t);for(var p in c)if(c.hasOwnProperty(p))if(p===He.INNER_HTML)d.innerHTML=c.innerHTML;else if(p===He.CSS_TEXT)d.styleSheet?d.styleSheet.cssText=c.cssText:d.appendChild(document.createTextNode(c.cssText));else{var _=typeof c[p]=="undefined"?"":c[p];d.setAttribute(p,_)}d.setAttribute(hr,"true"),i.some(function(g,T){return s=T,d.isEqualNode(g)})?i.splice(s,1):u.push(d)}),i.forEach(function(c){return c.parentNode.removeChild(c)}),u.forEach(function(c){return n.appendChild(c)}),{oldTags:i,newTags:u}},b_=function(t){return Object.keys(t).reduce(function(r,n){var o=typeof t[n]!="undefined"?n+'="'+t[n]+'"':""+n;return r?r+" "+o:o},"")},lk=function(t,r,n,o){var i=b_(n),u=O_(r);return i?"<"+t+" "+hr+'="true" '+i+">"+qh(u,o)+"</"+t+">":"<"+t+" "+hr+'="true">'+qh(u,o)+"</"+t+">"},ck=function(t,r,n){return r.reduce(function(o,i){var u=Object.keys(i).filter(function(d){return!(d===He.INNER_HTML||d===He.CSS_TEXT)}).reduce(function(d,p){var _=typeof i[p]=="undefined"?p:p+'="'+qh(i[p],n)+'"';return d?d+" "+_:_},""),s=i.innerHTML||i.cssText||"",c=zb.indexOf(t)===-1;return o+"<"+t+" "+hr+'="true" '+u+(c?"/>":">"+s+"</"+t+">")},"")},k_=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return Object.keys(t).reduce(function(n,o){return n[Bs[o]||o]=t[o],n},r)},dk=function(t){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return Object.keys(t).reduce(function(n,o){return n[$b[o]||o]=t[o],n},r)},fk=function(t,r,n){var o,i=(o={key:r},o[hr]=!0,o),u=k_(n,i);return[Xo.default.createElement(me.TITLE,u,r)]},pk=function(t,r){return r.map(function(n,o){var i,u=(i={key:o},i[hr]=!0,i);return Object.keys(n).forEach(function(s){var c=Bs[s]||s;if(c===He.INNER_HTML||c===He.CSS_TEXT){var d=n.innerHTML||n.cssText;u.dangerouslySetInnerHTML={__html:d}}else u[c]=n[s]}),Xo.default.createElement(t,u)})},Yr=function(t,r,n){switch(t){case me.TITLE:return{toComponent:function(){return fk(t,r.title,r.titleAttributes,n)},toString:function(){return lk(t,r.title,r.titleAttributes,n)}};case Bn.BODY:case Bn.HTML:return{toComponent:function(){return k_(r)},toString:function(){return b_(r)}};default:return{toComponent:function(){return pk(t,r)},toString:function(){return ck(t,r,n)}}}},M_=function(t){var r=t.baseTag,n=t.bodyAttributes,o=t.encode,i=t.htmlAttributes,u=t.linkTags,s=t.metaTags,c=t.noscriptTags,d=t.scriptTags,p=t.styleTags,_=t.title,g=_===void 0?"":_,T=t.titleAttributes;return{base:Yr(me.BASE,r,o),bodyAttributes:Yr(Bn.BODY,n,o),htmlAttributes:Yr(Bn.HTML,i,o),link:Yr(me.LINK,u,o),meta:Yr(me.META,s,o),noscript:Yr(me.NOSCRIPT,c,o),script:Yr(me.SCRIPT,d,o),style:Yr(me.STYLE,p,o),title:Yr(me.TITLE,{title:g,titleAttributes:T},o)}},hk=function(t){var r,n;return n=r=function(o){Jb(i,o);function i(){return Gb(this,i),Zb(this,o.apply(this,arguments))}return i.prototype.shouldComponentUpdate=function(s){return!S_.default(this.props,s)},i.prototype.mapNestedChildrenToProps=function(s,c){if(!c)return null;switch(s.type){case me.SCRIPT:case me.NOSCRIPT:return{innerHTML:c};case me.STYLE:return{cssText:c}}throw new Error("<"+s.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},i.prototype.flattenArrayTypeChildren=function(s){var c,d=s.child,p=s.arrayTypeChildren,_=s.newChildProps,g=s.nestedChildren;return jt({},p,(c={},c[d.type]=[].concat(p[d.type]||[],[jt({},_,this.mapNestedChildrenToProps(d,g))]),c))},i.prototype.mapObjectTypeChildren=function(s){var c,d,p=s.child,_=s.newProps,g=s.newChildProps,T=s.nestedChildren;switch(p.type){case me.TITLE:return jt({},_,(c={},c[p.type]=T,c.titleAttributes=jt({},g),c));case me.BODY:return jt({},_,{bodyAttributes:jt({},g)});case me.HTML:return jt({},_,{htmlAttributes:jt({},g)})}return jt({},_,(d={},d[p.type]=jt({},g),d))},i.prototype.mapArrayTypeChildrenToProps=function(s,c){var d=jt({},c);return Object.keys(s).forEach(function(p){var _;d=jt({},d,(_={},_[p]=s[p],_))}),d},i.prototype.warnOnInvalidChildren=function(s,c){return!0},i.prototype.mapChildrenToProps=function(s,c){var d=this,p={};return Xo.default.Children.forEach(s,function(_){if(!(!_||!_.props)){var g=_.props,T=g.children,R=D_(g,["children"]),U=dk(R);switch(d.warnOnInvalidChildren(_,T),_.type){case me.LINK:case me.META:case me.NOSCRIPT:case me.SCRIPT:case me.STYLE:p=d.flattenArrayTypeChildren({child:_,arrayTypeChildren:p,newChildProps:U,nestedChildren:T});break;default:c=d.mapObjectTypeChildren({child:_,newProps:c,newChildProps:U,nestedChildren:T});break}}}),c=this.mapArrayTypeChildrenToProps(p,c),c},i.prototype.render=function(){var s=this.props,c=s.children,d=D_(s,["children"]),p=jt({},d);return c&&(p=this.mapChildrenToProps(c,p)),Xo.default.createElement(t,p)},Xb(i,null,[{key:"canUseDOM",set:function(s){t.canUseDOM=s}}]),i}(Xo.default.Component),r.propTypes={base:Ye.default.object,bodyAttributes:Ye.default.object,children:Ye.default.oneOfType([Ye.default.arrayOf(Ye.default.node),Ye.default.node]),defaultTitle:Ye.default.string,defer:Ye.default.bool,encodeSpecialCharacters:Ye.default.bool,htmlAttributes:Ye.default.object,link:Ye.default.arrayOf(Ye.default.object),meta:Ye.default.arrayOf(Ye.default.object),noscript:Ye.default.arrayOf(Ye.default.object),onChangeClientState:Ye.default.func,script:Ye.default.arrayOf(Ye.default.object),style:Ye.default.arrayOf(Ye.default.object),title:Ye.default.string,titleAttributes:Ye.default.object,titleTemplate:Ye.default.string},r.defaultProps={defer:!0,encodeSpecialCharacters:!0},r.peek=t.peek,r.rewind=function(){var o=t.rewind();return o||(o=M_({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),o},n},mk=function(){return null},vk=E_.default(ok,uk,M_)(mk),Vs=hk(vk);Vs.renderStatic=Vs.rewind;var N_=ge(_e());function R_(){return N_.default.createElement("div",null,"LOADING...")}var ei=ge(_e());function yk(){let{pathname:e,search:t}=window.location;return e+t}function gk(){return encodeURIComponent(yk())}function q_(){let e=`/auth/google?r=${gk()}`;return ei.default.createElement("div",null,ei.default.createElement("p",null,"Welcome to ",ei.default.createElement("b",null,"SHA"),"red ",ei.default.createElement("b",null,"CAL"),"endar"),ei.default.createElement("a",{href:e},"[GOOGLE] Start"))}function _n({title:e,loading:t,showAuth:r=!1,show404:n=!1,children:o}){return Wr.default.createElement(Wr.Fragment,null,Wr.default.createElement(Vs,null,Wr.default.createElement("title",null,"ShaCal: ",e)),(()=>t?Wr.default.createElement(R_,null):r?Wr.default.createElement(q_,null):n?Wr.default.createElement(Hs,null):o())())}function $t(e){try{return JSON.parse(e).message}catch(t){return e}}var wk=new Intl.DateTimeFormat(["ru"],{weekday:"long",day:"2-digit",month:"long",year:"numeric",hour:"2-digit",minute:"2-digit"});function $s(e){return wk.format(e)}var Fh=60*1e3;function zs({start:e,end:t}){return(new Date(t).getTime()-new Date(e).getTime())/Fh}function _k(e,t){let r=`${t}=`;return e.find(o=>o.startsWith(r))?.replace(r,"")??null}function I_(){let e=document.cookie.split(";").map(i=>i.trim()),t=_k(e,"emails")??"",[r,n,o]=t.split(".");try{return JSON.parse(atob(n??"")).emails}catch(i){return[]}}async function L_({shacalPublicId:e,event:t}){let r=await fetch(`/api/c/s/${e}/e`,{method:"POST",body:JSON.stringify(t)});if(r.status===200)return(await r.json()).value;throw new Error(r.status===400?$t(await r.text()):r.status.toString())}async function A_(e){let t=await fetch(`/api/e/${e}`);if(t.status===200)return await t.json();throw new Error(t.status===400?$t(await t.text()):t.status.toString())}async function F_({publicId:e,event:t}){let r=await fetch(`/api/e/${e}`,{method:"PUT",body:JSON.stringify(t)});if(r.status===200)return(await r.json()).value;throw new Error(r.status===400?$t(await r.text()):r.status.toString())}async function U_({publicId:e,email:t}){let r=await fetch(`/api/e/${e}/join`,{method:"POST",body:JSON.stringify({email:t})});if(r.status!==200)throw new Error(r.status===400?$t(await r.text()):r.status.toString())}async function j_(){let e=await fetch("/api/c/list");if(e.status===200)return await e.json();throw new Error(e.status===400?$t(await e.text()):e.status.toString())}async function Y_(e){let t=await fetch(`/api/c/s/${e}`);if(t.status===200)return await t.json();throw new Error(t.status===400?$t(await t.text()):t.status.toString())}async function W_({publicId:e,addPermissionGrantedTo:t}){let r=await fetch(`/api/c/s/${e}/p`,{method:"PUT",body:JSON.stringify({addPermissionGrantedTo:t})});if(r.status!==200)throw new Error(r.status===400?$t(await r.text()):r.status.toString())}async function H_(e){let t=await fetch(`/api/c/s/${encodeURIComponent(e)}`,{method:"POST"});if(t.status===200)return(await t.json()).publicId;throw new Error(t.status===400?$t(await t.text()):t.status.toString())}var Q_=ge(_e());var B_="CALENDAR_LIST";function V_(){return Go(B_,j_,{retry(e,t){return t.message!=="401"&&e<3}})}function $_(){let e=pr();return Q_.useCallback(()=>{e.invalidateQueries(B_)},[e])}var Uh=ge(_e());var jh="EVENT";function z_(e){return Go([jh,e],()=>A_(e),{retry(t,r){return r.message!=="401"&&r.message!=="404"&&t<3}})}function K_(){let e=pr();return Uh.useCallback(t=>{e.invalidateQueries([jh,t])},[e])}function Ks(){let e=pr();return Uh.useCallback(t=>{e.setQueryData([jh,t.publicId],t)},[e])}function G_(){let e=Ks();return Dr(L_,{onSuccess(r){e(r)}})}function X_(){let e=K_();return Dr(U_,{onSuccess(r,{publicId:n}){e(n)}})}var J_=ge(_e());var Z_="CALENDAR";function ex(e){return Go([Z_,e],()=>Y_(e),{retry(t,r){return r.message!=="401"&&r.message!=="404"&&t<3}})}function tx(){let e=pr();return J_.useCallback(t=>{e.invalidateQueries([Z_,t])},[e])}function rx(){let e=$_();return Dr(H_,{onMutate(r){return r},onSuccess(){e()}})}function nx(){let e=Ks();return Dr(F_,{onSuccess(r){e(r)}})}var Yt=ge(_e());function xk({color:e}){return Yt.default.createElement("span",{style:{color:e}},"\u2B24")}function Ek({id:e,publicId:t,sharingId:r,isSharing:n,onShare:o}){return t!=null?Yt.default.createElement(Sr,{to:`/calendar/${t}`},"Go"):n&&e===r?Yt.default.createElement("span",null,"SHARING..."):Yt.default.createElement("button",{onClick:()=>o(e),disabled:n},"Share")}function ox(){let{isLoading:e,error:t,data:r}=V_(),n=rx();return Yt.default.createElement(_n,{title:"Google Calendars",loading:e,showAuth:t?.message==="401"},()=>Yt.default.createElement(Yt.Fragment,null,n.isSuccess?Yt.default.createElement(qs,{to:`/calendar/${n.data}`,push:!0}):null,Yt.default.createElement("ul",null,r?.map(({id:o,summary:i,color:u,publicId:s})=>Yt.default.createElement("li",{key:o},Yt.default.createElement(xk,{color:u}),i,Yt.default.createElement(Ek,{id:o,publicId:s,isSharing:n.isLoading,sharingId:n.context,onShare:n.mutate}))))))}var zt=ge(_e());function ix(){let e=tx();return Dr(W_,{onSuccess(r,{publicId:n}){e(n)}})}var Vn=ge(_e());function ax({addPermissionGrantedTo:e,publicId:t,isFetching:r}){let[n,o]=Vn.useState([...e,""]),i=ix(),u=c=>d=>{let p=[...n];p[c]=d.target.value,p[p.length-1]!==""&&p.push(""),o(p)},s=()=>{i.mutate({publicId:t,addPermissionGrantedTo:n.map(c=>c.trim()).filter(c=>c!=="")})};return Vn.default.createElement("details",null,Vn.default.createElement("summary",null,"Granted add permission"),n.map((c,d)=>Vn.default.createElement("input",{key:d,type:"text",value:c,onChange:u(d),disabled:r||i.isLoading,style:{display:"block"}})),Vn.default.createElement("button",{type:"button",disabled:r||i.isLoading,onClick:s},"Save"))}function Sk({publicId:e}){return zt.default.createElement(Sr,{to:`/calendar/${e}/new-event`},"+ Add event")}function Ck({event:e}){let t=new Date(e.start);return zt.default.createElement("div",null,zt.default.createElement(Sr,{to:`/event/${e.publicId}`},e.summary),zt.default.createElement("div",null,$s(t)))}function ux(){let{publicId:e}=Hn(),t=ex(e);return zt.default.createElement(_n,{loading:t.isLoading,title:"Calendar",showAuth:t.error?.message==="401",show404:t.error?.message==="404"},()=>zt.default.createElement(zt.Fragment,null,t.data?.owned?zt.default.createElement(ax,{publicId:e,isFetching:t.isFetching,addPermissionGrantedTo:t.data.addPermissionGrantedTo??[]}):null,t.data?.canAdd?zt.default.createElement(Sk,{publicId:e}):null,zt.default.createElement("ul",null,t.data?.events.map(r=>zt.default.createElement(Ck,{key:r.publicId,event:r})))))}var Xn=ge(_e());var bt=ge(_e()),oD=ge(nD());var k2=60;function md({event:e,isSaving:t,onSave:r}){let[n,o]=bt.useState(e.start===""?null:new Date(e.start)),[i]=bt.useState(()=>zs(e)??k2);return bt.default.createElement("form",{onSubmit:s=>{s.preventDefault();let c=s.target,d=["summary","description","start","duration","location"].map(R=>[R,c.elements.namedItem(R).value??""]),p=Object.fromEntries(d),_=new Date(p.start),g=parseInt(p.duration),T=new Date(_.getTime()+g*Fh);r({summary:p.summary,description:p.description,location:p.location,start:_.toISOString(),end:T.toISOString()})}},bt.default.createElement("label",{style:{display:"block"}},"Summary",bt.default.createElement("input",{type:"text",name:"summary",defaultValue:e.summary,required:!0,disabled:t})),bt.default.createElement("label",{style:{display:"block"}},"Start",bt.default.createElement(oD.default,{onChange:s=>o(s),required:!0,dateFormat:"Pp",showTimeSelect:!0,timeIntervals:15,selected:n,name:"start",disabled:t})),bt.default.createElement("label",{style:{display:"block"}},"Duration (minutes)",bt.default.createElement("input",{type:"number",name:"duration",defaultValue:i,required:!0,disabled:t,step:15,min:15})),bt.default.createElement("label",{style:{display:"block"}},"Location",bt.default.createElement("input",{type:"text",name:"location",defaultValue:e.location,disabled:t})),bt.default.createElement("label",{style:{display:"block"}},"Description",bt.default.createElement("textarea",{name:"description",defaultValue:e.description,required:!0,disabled:t})),bt.default.createElement("button",{type:"submit",disabled:t},"Save"))}var M2={summary:"",description:"",start:"",end:"",location:""};function iD(){let{publicId:e}=Hn(),t=G_();return Xn.default.createElement(_n,{loading:!1,title:"New Event"},()=>Xn.default.createElement(Xn.Fragment,null,t.isSuccess?Xn.default.createElement(qs,{to:`/event/${t.data?.publicId}`}):null,Xn.default.createElement(md,{event:M2,isSaving:t.isLoading,onSave:r=>t.mutate({shacalPublicId:e,event:r})})))}var Ze=ge(_e());var Ga=ge(_e()),N2={declined:"\u274C",tentative:"\u2754",accepted:"\u2714\uFE0F"};function aD({attendees:e}){return e===void 0?null:Ga.default.createElement("details",null,Ga.default.createElement("summary",null,"Attendees"),e.map(({email:t,status:r},n)=>Ga.default.createElement("p",{key:n},N2[r],"\xA0",t)),e.length===0?Ga.default.createElement("p",null,"No Attendees"):null)}var Jn=ge(_e());var R2=I_();function uD({publicId:e}){let t=X_();return Jn.default.createElement(Jn.Fragment,null,t.isError?Jn.default.createElement("p",null,t.error?.message):null,t.isSuccess?Jn.default.createElement("p",null,"You have successfully joined"):R2.map((r,n)=>Jn.default.createElement("button",{key:n,type:"button",onClick:()=>t.mutate({publicId:e,email:r}),disabled:t.isLoading},"Join as ",r)))}function q2({event:e}){return Ze.default.createElement(Ze.Fragment,null,Ze.default.createElement("label",{style:{display:"block"}},"Summary",Ze.default.createElement("span",null,e.summary)),Ze.default.createElement("label",{style:{display:"block"}},"Start",Ze.default.createElement("span",null,$s(new Date(e.start)))),Ze.default.createElement("label",{style:{display:"block"}},"Duration (minutes)",Ze.default.createElement("span",null,zs(e))),Ze.default.createElement("label",{style:{display:"block"}},"Location",Ze.default.createElement("a",{href:e.location},e.location)),Ze.default.createElement("label",{style:{display:"block"}},"Description",Ze.default.createElement("span",null,e.description)))}function sD(){let{publicId:e}=Hn(),t=z_(e),r=nx();return Ze.default.createElement(_n,{loading:t.isLoading,title:t.data?.summary??"Event"},()=>Ze.default.createElement(Ze.Fragment,null,t.data?.owned?Ze.default.createElement(md,{event:t.data,isSaving:r.isLoading,onSave:n=>r.mutate({publicId:e,event:n})}):Ze.default.createElement(q2,{event:t.data}),Ze.default.createElement(uD,{publicId:e}),Ze.default.createElement(aD,{attendees:t.data?.attendees})))}function I2(){return et.default.createElement(jw,null,et.default.createElement(Sr,{to:"/"},"Home"),et.default.createElement(Sr,{to:"/calendar/qqqqqqqqq"},"Calendar"),et.default.createElement(Sr,{to:"/event/eeeeeeeeee"},"Event"),et.default.createElement(Uw,null,et.default.createElement(Wo,{exact:!0,path:"/"},et.default.createElement(ox,null)),et.default.createElement(Wo,{exact:!0,path:"/calendar/:publicId"},et.default.createElement(ux,null)),et.default.createElement(Wo,{exact:!0,path:"/calendar/:publicId/new-event"},et.default.createElement(iD,null)),et.default.createElement(Wo,{exact:!0,path:"/event/:publicId"},et.default.createElement(sD,null)),et.default.createElement(Wo,{path:"*"},et.default.createElement(Hs,null))))}var L2=new o_;function cD(){return et.default.createElement(d_,{client:L2},et.default.createElement(lD.ReactQueryDevtools,{initialIsOpen:!1}),et.default.createElement(h_,null),et.default.createElement(I2,null))}dD.default.render(vd.default.createElement(vd.default.StrictMode,null,vd.default.createElement(cD,null)),document.getElementById("root"));
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2RldnRvb2xzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtc2lkZS1lZmZlY3QvbGliL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNEYXRlL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNWYWxpZC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9mb3JtYXQvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9hZGRNaW51dGVzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkSG91cnMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9hZGREYXlzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkV2Vla3MvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9hZGRNb250aHMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9hZGRZZWFycy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N1Yk1pbnV0ZXMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdWJIb3Vycy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N1YkRheXMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdWJXZWVrcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N1Yk1vbnRocy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N1YlllYXJzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0U2Vjb25kcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldE1pbnV0ZXMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRIb3Vycy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldERheS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldERhdGUvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vlay9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0SVNPV2Vla1llYXIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mSVNPV2Vla1llYXIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0TW9udGgvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRRdWFydGVyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0WWVhci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldFRpbWUvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zZXRTZWNvbmRzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc2V0TWludXRlcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3NldEhvdXJzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0RGF5c0luTW9udGgvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zZXRNb250aC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3NldFF1YXJ0ZXIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zZXRZZWFyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbWluL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbWF4L2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZkRheS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnMvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mTW9udGgvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mUXVhcnRlci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZZZWFyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZW5kT2ZEYXkvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9lbmRPZldlZWsvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9lbmRPZk1vbnRoL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNFcXVhbC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzU2FtZURheS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzU2FtZU1vbnRoL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNTYW1lWWVhci9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzU2FtZVF1YXJ0ZXIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc0FmdGVyL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNCZWZvcmUvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1dpdGhpbkludGVydmFsL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9hc3NpZ24vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3NldFVUQ0RheS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvc2V0VVRDSVNPRGF5L2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9zZXRVVENJU09XZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9zZXRVVENXZWVrL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvcGFyc2UvX2xpYi9wYXJzZXJzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvcGFyc2UvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9kYXRlLWZucy9wYXJzZUlTTy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LW9uY2xpY2tvdXRzaWRlL2Rpc3QvcmVhY3Qtb25jbGlja291dHNpZGUuY2pzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNCcm93c2VyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9kZWJvdW5jZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNGdW5jdGlvbi5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRQYXJlbnROb2RlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFJlZmVyZW5jZU5vZGUuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2lzSUUuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNPZmZzZXRDb250YWluZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFJvb3QuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2ZpbmRDb21tb25PZmZzZXRQYXJlbnQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFNjcm9sbC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaW5jbHVkZVNjcm9sbC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0Qm9yZGVyc1NpemUuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFdpbmRvd1NpemVzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRDbGllbnRSZWN0LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9pc0ZpeGVkLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRCb3VuZGFyaWVzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0T3V0ZXJTaXplcy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFBvcHBlck9mZnNldHMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2ZpbmQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2ZpbmRJbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvcnVuTW9kaWZpZXJzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9tZXRob2RzL3VwZGF0ZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNNb2RpZmllckVuYWJsZWQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvbWV0aG9kcy9kZXN0cm95LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRXaW5kb3cuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL3NldHVwRXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL3JlbW92ZUV2ZW50TGlzdGVuZXJzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9tZXRob2RzL2Rpc2FibGVFdmVudExpc3RlbmVycy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNOdW1lcmljLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9zZXRTdHlsZXMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL3NldEF0dHJpYnV0ZXMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9hcHBseVN0eWxlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy91dGlscy9nZXRSb3VuZGVkT2Zmc2V0cy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvdXRpbHMvaXNNb2RpZmllclJlcXVpcmVkLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9tb2RpZmllcnMvYXJyb3cuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9tZXRob2RzL3BsYWNlbWVudHMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL3V0aWxzL2Nsb2Nrd2lzZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvbW9kaWZpZXJzL2ZsaXAuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9rZWVwVG9nZXRoZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9vZmZzZXQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9zaGlmdC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvbW9kaWZpZXJzL2hpZGUuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9wb3BwZXIuanMvc3JjL21vZGlmaWVycy9pbm5lci5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9zcmMvbW9kaWZpZXJzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9tZXRob2RzL2RlZmF1bHRzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL3NyYy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BoeXBub3NwaGkvY3JlYXRlLXJlYWN0LWNvbnRleHQvbGliL2ltcGxlbWVudGF0aW9uLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvQGh5cG5vc3BoaS9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL2Nqcy9NYW5hZ2VyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9janMvdXRpbHMuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL2Nqcy9Qb3BwZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL2Nqcy9SZWZlcmVuY2UuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL2Nqcy9pbmRleC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVwaWNrZXIvZGlzdC9yZWFjdC1kYXRlcGlja2VyLm1pbi5qcyIsICIuLi9jbGllbnQvc3JjL2VudHJ5LnRzeCIsICIuLi9jbGllbnQvc3JjL2FwcC50c3giLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UvX2luZGV4Lm1qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy9faW5kZXgubWpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UvX2luZGV4Lm1qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL2NyZWF0ZU5hbWVDb250ZXh0LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvSGlzdG9yeUNvbnRleHQuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9Sb3V0ZXJDb250ZXh0LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvUm91dGVyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvTWVtb3J5Um91dGVyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvTGlmZWN5Y2xlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvUHJvbXB0LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvZ2VuZXJhdGVQYXRoLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL21vZHVsZXMvUmVkaXJlY3QuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9tYXRjaFBhdGguanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9Sb3V0ZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL1N0YXRpY1JvdXRlci5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL1N3aXRjaC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL3dpdGhSb3V0ZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbW9kdWxlcy9ob29rcy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9tb2R1bGVzL2luZGV4LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9tb2R1bGVzL0Jyb3dzZXJSb3V0ZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL21vZHVsZXMvSGFzaFJvdXRlci5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vbW9kdWxlcy91dGlscy9sb2NhdGlvblV0aWxzLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9tb2R1bGVzL0xpbmsuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL21vZHVsZXMvTmF2TGluay5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvc3Vic2NyaWJhYmxlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS91dGlscy5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvZm9jdXNNYW5hZ2VyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9vbmxpbmVNYW5hZ2VyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9yZXRyeWVyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9ub3RpZnlNYW5hZ2VyLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9sb2dnZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3F1ZXJ5LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeUNhY2hlLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9tdXRhdGlvbi5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbXV0YXRpb25DYWNoZS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvaW5maW5pdGVRdWVyeUJlaGF2aW9yLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeUNsaWVudC5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlPYnNlcnZlci5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbXV0YXRpb25PYnNlcnZlci5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L1F1ZXJ5Q2xpZW50UHJvdmlkZXIuanMiLCAiLi4vY2xpZW50L25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5qcyIsICIuLi9jbGllbnQvbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3VzZU11dGF0aW9uLmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvdXNlQmFzZVF1ZXJ5LmpzIiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvdXNlUXVlcnkuanMiLCAiLi4vY2xpZW50L3NyYy9jb21wb25lbnRzL2FwcC1oZWFkZXIudHN4IiwgIi4uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ub3QtZm91bmQtcGFnZS50c3giLCAiLi4vY2xpZW50L3NyYy9jb21wb25lbnRzL3BhZ2UudHN4IiwgIi4uL2NsaWVudC9ub2RlX21vZHVsZXMvcmVhY3QtaGVsbWV0L2VzL0hlbG1ldC5qcyIsICIuLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvYXBwLWxvYWRlci50c3giLCAiLi4vY2xpZW50L3NyYy9jb21wb25lbnRzL2F1dGgtcGFnZS50c3giLCAiLi4vY2xpZW50L3NyYy91dGlscy50cyIsICIuLi9jbGllbnQvc3JjL2RhdGEtYWNjZXNzL2V2ZW50LnRzIiwgIi4uL2NsaWVudC9zcmMvZGF0YS1hY2Nlc3MvbG9hZENhbGVuZGFyc0xpc3QudHMiLCAiLi4vY2xpZW50L3NyYy9kYXRhLWFjY2Vzcy9sb2FkU2hhY2FsLnRzIiwgIi4uL2NsaWVudC9zcmMvZGF0YS1hY2Nlc3Mvc2F2ZVNoYWNhbFBlcm1pc3Npb25zLnRzIiwgIi4uL2NsaWVudC9zcmMvZGF0YS1hY2Nlc3Mvc2hhcmVDYWxlbmRhci50cyIsICIuLi9jbGllbnQvc3JjL2hvb2tzL3VzZUNhbGVuZGFyc0xpc3QudHMiLCAiLi4vY2xpZW50L3NyYy9ob29rcy91c2VFdmVudC50cyIsICIuLi9jbGllbnQvc3JjL2hvb2tzL3VzZUNyZWF0ZUV2ZW50LnRzIiwgIi4uL2NsaWVudC9zcmMvaG9va3MvdXNlSm9pbkV2ZW50LnRzIiwgIi4uL2NsaWVudC9zcmMvaG9va3MvdXNlU2hhY2FsLnRzIiwgIi4uL2NsaWVudC9zcmMvaG9va3MvdXNlU2hhcmVDYWxlbmRhci50cyIsICIuLi9jbGllbnQvc3JjL2hvb2tzL3VzZVVwZGF0ZUV2ZW50LnRzIiwgIi4uL2NsaWVudC9zcmMvcGFnZXMvY2FsZW5kYXJzL2NhbGVuZGFycy1saXN0LXBhZ2UudHN4IiwgIi4uL2NsaWVudC9zcmMvcGFnZXMvY2FsZW5kYXJzL2NhbGVuZGFyLXBhZ2UudHN4IiwgIi4uL2NsaWVudC9zcmMvaG9va3MvdXNlU2F2ZVNoYWNhbFBlcm1pc3Npb25zLnRzIiwgIi4uL2NsaWVudC9zcmMvcGFnZXMvY2FsZW5kYXJzL3Blcm1pc3Npb25zLnRzeCIsICIuLi9jbGllbnQvc3JjL3BhZ2VzL2V2ZW50cy9uZXctZXZlbnQtcGFnZS50c3giLCAiLi4vY2xpZW50L3NyYy9wYWdlcy9ldmVudHMvZXZlbnQtZm9ybS50c3giLCAiLi4vY2xpZW50L3NyYy9wYWdlcy9ldmVudHMvZXZlbnQtcGFnZS50c3giLCAiLi4vY2xpZW50L3NyYy9wYWdlcy9ldmVudHMvYXR0ZW5kZWVzLnRzeCIsICIuLi9jbGllbnQvc3JjL3BhZ2VzL2V2ZW50cy9qb2luLWV2ZW50LnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCAiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwgIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsICJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwgIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCAiaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmVhY3RRdWVyeURldnRvb2xzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgUmVhY3RRdWVyeURldnRvb2xzUGFuZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgfVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RldmVsb3BtZW50Jylcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0X19kZWZhdWx0ID0gX2ludGVyb3BEZWZhdWx0KFJlYWN0KTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiB3aXRoU2lkZUVmZmVjdChyZWR1Y2VQcm9wc1RvU3RhdGUsIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQsIG1hcFN0YXRlT25TZXJ2ZXIpIHtcbiAgaWYgKHR5cGVvZiByZWR1Y2VQcm9wc1RvU3RhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHJlZHVjZVByb3BzVG9TdGF0ZSB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50IHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG1hcFN0YXRlT25TZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtYXBTdGF0ZU9uU2VydmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBtYXBTdGF0ZU9uU2VydmVyIHRvIGVpdGhlciBiZSB1bmRlZmluZWQgb3IgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICByZXR1cm4gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIFdyYXBwZWRDb21wb25lbnQgdG8gYmUgYSBSZWFjdCBjb21wb25lbnQuJyk7XG4gICAgfVxuXG4gICAgdmFyIG1vdW50ZWRJbnN0YW5jZXMgPSBbXTtcbiAgICB2YXIgc3RhdGU7XG5cbiAgICBmdW5jdGlvbiBlbWl0Q2hhbmdlKCkge1xuICAgICAgc3RhdGUgPSByZWR1Y2VQcm9wc1RvU3RhdGUobW91bnRlZEluc3RhbmNlcy5tYXAoZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcztcbiAgICAgIH0pKTtcblxuICAgICAgaWYgKFNpZGVFZmZlY3QuY2FuVXNlRE9NKSB7XG4gICAgICAgIGhhbmRsZVN0YXRlQ2hhbmdlT25DbGllbnQoc3RhdGUpO1xuICAgICAgfSBlbHNlIGlmIChtYXBTdGF0ZU9uU2VydmVyKSB7XG4gICAgICAgIHN0YXRlID0gbWFwU3RhdGVPblNlcnZlcihzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFNpZGVFZmZlY3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShTaWRlRWZmZWN0LCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFNpZGVFZmZlY3QoKSB7XG4gICAgICAgIHJldHVybiBfUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byB1c2UgZGlzcGxheU5hbWUgb2Ygd3JhcHBlZCBjb21wb25lbnRcbiAgICAgIC8vIEV4cG9zZSBjYW5Vc2VET00gc28gdGVzdHMgY2FuIG1vbmtleXBhdGNoIGl0XG4gICAgICBTaWRlRWZmZWN0LnBlZWsgPSBmdW5jdGlvbiBwZWVrKCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9O1xuXG4gICAgICBTaWRlRWZmZWN0LnJld2luZCA9IGZ1bmN0aW9uIHJld2luZCgpIHtcbiAgICAgICAgaWYgKFNpZGVFZmZlY3QuY2FuVXNlRE9NKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG9ubHkgY2FsbCByZXdpbmQoKSBvbiB0aGUgc2VydmVyLiBDYWxsIHBlZWsoKSB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29yZGVkU3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1vdW50ZWRJbnN0YW5jZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIHJlY29yZGVkU3RhdGU7XG4gICAgICB9O1xuXG4gICAgICB2YXIgX3Byb3RvID0gU2lkZUVmZmVjdC5wcm90b3R5cGU7XG5cbiAgICAgIF9wcm90by5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgbW91bnRlZEluc3RhbmNlcy5wdXNoKHRoaXMpO1xuICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBlbWl0Q2hhbmdlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbW91bnRlZEluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICAgICAgICBtb3VudGVkSW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGVtaXRDaGFuZ2UoKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCB0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBTaWRlRWZmZWN0O1xuICAgIH0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoU2lkZUVmZmVjdCwgXCJkaXNwbGF5TmFtZVwiLCBcIlNpZGVFZmZlY3QoXCIgKyBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSArIFwiKVwiKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShTaWRlRWZmZWN0LCBcImNhblVzZURPTVwiLCBjYW5Vc2VET00pO1xuXG4gICAgcmV0dXJuIFNpZGVFZmZlY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFNpZGVFZmZlY3Q7XG4iLCAiLyogZ2xvYmFsIE1hcDpyZWFkb25seSwgU2V0OnJlYWRvbmx5LCBBcnJheUJ1ZmZlcjpyZWFkb25seSAqL1xuXG52YXIgaGFzRWxlbWVudFR5cGUgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJztcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nO1xudmFyIGhhc0FycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmICEhQXJyYXlCdWZmZXIuaXNWaWV3O1xuXG4vLyBOb3RlOiBXZSAqKmRvbid0KiogbmVlZCBgZW52SGFzQmlnSW50NjRBcnJheWAgaW4gZmRlIGVzNi9pbmRleC5qc1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWwgZXM2L2luZGV4LmpzIDMuMS4xXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTVEFSVDogTW9kaWZpY2F0aW9uczpcbiAgICAvLyAxLiBFeHRyYSBgaGFzPFR5cGU+ICYmYCBoZWxwZXJzIGluIGluaXRpYWwgY29uZGl0aW9uIGFsbG93IGVzNiBjb2RlXG4gICAgLy8gICAgdG8gY28tZXhpc3Qgd2l0aCBlczUuXG4gICAgLy8gMi4gUmVwbGFjZSBgZm9yIG9mYCB3aXRoIGVzNSBjb21wbGlhbnQgaXRlcmF0aW9uIHVzaW5nIGBmb3JgLlxuICAgIC8vICAgIEJhc2ljYWxseSwgdGFrZTpcbiAgICAvL1xuICAgIC8vICAgIGBgYGpzXG4gICAgLy8gICAgZm9yIChpIG9mIGEuZW50cmllcygpKVxuICAgIC8vICAgICAgaWYgKCFiLmhhcyhpWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vICAgIGBgYFxuICAgIC8vXG4gICAgLy8gICAgLi4uIGFuZCBjb252ZXJ0IHRvOlxuICAgIC8vXG4gICAgLy8gICAgYGBganNcbiAgICAvLyAgICBpdCA9IGEuZW50cmllcygpO1xuICAgIC8vICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgLy8gICAgICBpZiAoIWIuaGFzKGkudmFsdWVbMF0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gICAgYGBgXG4gICAgLy9cbiAgICAvLyAgICAqKk5vdGUqKjogYGlgIGFjY2VzcyBzd2l0Y2hlcyB0byBgaS52YWx1ZWAuXG4gICAgdmFyIGl0O1xuICAgIGlmIChoYXNNYXAgJiYgKGEgaW5zdGFuY2VvZiBNYXApICYmIChiIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSByZXR1cm4gZmFsc2U7XG4gICAgICBpdCA9IGEuZW50cmllcygpO1xuICAgICAgd2hpbGUgKCEoaSA9IGl0Lm5leHQoKSkuZG9uZSlcbiAgICAgICAgaWYgKCFiLmhhcyhpLnZhbHVlWzBdKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghZXF1YWwoaS52YWx1ZVsxXSwgYi5nZXQoaS52YWx1ZVswXSkpKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU2V0ICYmIChhIGluc3RhbmNlb2YgU2V0KSAmJiAoYiBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaXQgPSBhLmVudHJpZXMoKTtcbiAgICAgIHdoaWxlICghKGkgPSBpdC5uZXh0KCkpLmRvbmUpXG4gICAgICAgIGlmICghYi5oYXMoaS52YWx1ZVswXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBFTkQ6IE1vZGlmaWNhdGlvbnNcblxuICAgIGlmIChoYXNBcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcoYSkgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KGIpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gRU5EOiBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIFNUQVJUOiByZWFjdC1mYXN0LWNvbXBhcmVcbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIERPTSBlbGVtZW50c1xuICAgIGlmIChoYXNFbGVtZW50VHlwZSAmJiBhIGluc3RhbmNlb2YgRWxlbWVudCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBSZWFjdC9QcmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGlmICgoa2V5c1tpXSA9PT0gJ19vd25lcicgfHwga2V5c1tpXSA9PT0gJ19fdicgfHwga2V5c1tpXSA9PT0gJ19fbycpICYmIGEuJCR0eXBlb2YpIHtcbiAgICAgICAgLy8gUmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUmVhY3QgZWxlbWVudHMnIF9vd25lclxuICAgICAgICAvLyBQcmVhY3Qtc3BlY2lmaWM6IGF2b2lkIHRyYXZlcnNpbmcgUHJlYWN0IGVsZW1lbnRzJyBfX3YgYW5kIF9fb1xuICAgICAgICAvLyAgICBfX3YgPSAkX29yaWdpbmFsIC8gJF92bm9kZVxuICAgICAgICAvLyAgICBfX28gPSAkX293bmVyXG4gICAgICAgIC8vIFRoZXNlIHByb3BlcnRpZXMgY29udGFpbiBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCBhcmUgbm90IG5lZWRlZCB3aGVuXG4gICAgICAgIC8vIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGVsZW1lbnRzXG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgIGlmICghZXF1YWwoYVtrZXlzW2ldXSwgYltrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gRU5EOiByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIFNUQVJUOiBmYXN0LWRlZXAtZXF1YWxcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhICE9PSBhICYmIGIgIT09IGI7XG59XG4vLyBlbmQgZmFzdC1kZWVwLWVxdWFsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVxdWFsKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICgoKGVycm9yLm1lc3NhZ2UgfHwgJycpLm1hdGNoKC9zdGFja3xyZWN1cnNpb24vaSkpKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ3JlYWN0LWZhc3QtY29tcGFyZSBjYW5ub3QgaGFuZGxlIGNpcmN1bGFyIHJlZnMnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwgIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVpcmVkQXJncztcblxuZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRGF0ZTtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogdmFyIHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiB2YXIgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgKDAsIF9pbmRleC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0RhdGU7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5mdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgKDAsIF9pbmRleC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNWYWxpZDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIE5vdyBgaXNWYWxpZGAgZG9lc24ndCB0aHJvdyBhbiBleGNlcHRpb25cbiAqICAgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICogICBJbnN0ZWFkLCBhcmd1bWVudCBpcyBjb252ZXJ0ZWQgYmVmb3JlaGFuZCB1c2luZyBgdG9EYXRlYC5cbiAqXG4gKiAgIEV4YW1wbGVzOlxuICpcbiAqICAgfCBgaXNWYWxpZGAgYXJndW1lbnQgICAgICAgIHwgQmVmb3JlIHYyLjAuMCB8IHYyLjAuMCBvbndhcmQgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgYG5ldyBEYXRlKClgICAgICAgICAgICAgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJzIwMTYtMDEtMDEnKWAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnJylgICAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKDE0ODgzNzA4MzUwODEpYCB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoTmFOKWAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnMjAxNi0wMS0wMSdgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcnYCAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgMTQ4ODM3MDgzNTA4MWAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBOYU5gICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKlxuICogICBXZSBpbnRyb2R1Y2UgdGhpcyBjaGFuZ2UgdG8gbWFrZSAqZGF0ZS1mbnMqIGNvbnNpc3RlbnQgd2l0aCBFQ01BU2NyaXB0IGJlaGF2aW9yXG4gKiAgIHRoYXQgdHJ5IHRvIGNvZXJjZSBhcmd1bWVudHMgdG8gdGhlIGV4cGVjdGVkIHR5cGVcbiAqICAgKHdoaWNoIGlzIGFsc28gdGhlIGNhc2Ugd2l0aCBvdGhlciAqZGF0ZS1mbnMqIGZ1bmN0aW9ucykuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKGRhdGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXREaXN0YW5jZTtcbnZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZEZvcm1hdExvbmdGbjtcblxuZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbnZhciBfZGVmYXVsdCA9IGZvcm1hdExvbmc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1hdFJlbGF0aXZlO1xudmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRMb2NhbGl6ZUZuO1xuXG5mdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddIC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuICAvLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbiAgLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4gIC8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YDpcbiAgLy9cbiAgLy8gICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fVxuICAvLyAgIHZhciB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdClcbiAgLy9cbiAgLy8gd2hlcmUgYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCdcblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogKDAsIF9pbmRleC5kZWZhdWx0KSh7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiAoMCwgX2luZGV4LmRlZmF1bHQpKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbnZhciBfZGVmYXVsdCA9IGxvY2FsaXplO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZE1hdGNoUGF0dGVybkZuO1xuXG5mdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcblxuICAgIGlmICghcGFyc2VSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKVxuICAgIH07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJ1aWxkTWF0Y2hGbjtcblxuZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6ICgwLCBfaW5kZXguZGVmYXVsdCkoe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6ICgwLCBfaW5kZXgyLmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6ICgwLCBfaW5kZXgyLmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6ICgwLCBfaW5kZXgyLmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6ICgwLCBfaW5kZXgyLmRlZmF1bHQpKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogKDAsIF9pbmRleDIuZGVmYXVsdCkoe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xudmFyIF9kZWZhdWx0ID0gbWF0Y2g7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IF9pbmRleC5kZWZhdWx0LFxuICBmb3JtYXRMb25nOiBfaW5kZXgyLmRlZmF1bHQsXG4gIGZvcm1hdFJlbGF0aXZlOiBfaW5kZXgzLmRlZmF1bHQsXG4gIGxvY2FsaXplOiBfaW5kZXg0LmRlZmF1bHQsXG4gIG1hdGNoOiBfaW5kZXg1LmRlZmF1bHQsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBsb2NhbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvSW50ZWdlcjtcblxuZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTWlsbGlzZWNvbmRzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5mdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN1Yk1pbGxpc2Vjb25kcztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cbmZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZExlYWRpbmdaZXJvcztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguZGVmYXVsdCkodG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiAoMCwgX2luZGV4LmRlZmF1bHQpKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5kZWZhdWx0KShkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5kZWZhdWx0KShkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiAoMCwgX2luZGV4LmRlZmF1bHQpKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gZm9ybWF0dGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0VVRDRGF5T2ZZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZlVUQ0lTT1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENJU09XZWVrWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcbmZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFVUQ0lTT1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKSAtICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZlVUQ1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4LmRlZmF1bHQpKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6ICgwLCBfaW5kZXguZGVmYXVsdCkob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENXZWVrWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6ICgwLCBfaW5kZXguZGVmYXVsdCkobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogKDAsIF9pbmRleC5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdGFydE9mVVRDV2Vla1llYXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgKDAsIF9pbmRleDQuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogKDAsIF9pbmRleC5kZWZhdWx0KShsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiAoMCwgX2luZGV4LmRlZmF1bHQpKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4My5kZWZhdWx0KShmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENXZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5mdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSAoMCwgX2luZGV4My5kZWZhdWx0KShkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbiAgLypcbiAgICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAgICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICAgKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gICAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gICAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gICAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAgICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gICAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAgICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gICAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAgICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICAgKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAgICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gICAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAgICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICAgKlxuICAgKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gICAqXG4gICAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICAgKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICAgKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gICAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICAgKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gICAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICAgKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAgICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gICAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICAgKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gICAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gICAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gICAqL1xuXG59O1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbmRleC5kZWZhdWx0LnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSAoMCwgX2luZGV4Ni5kZWZhdWx0KShkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkodHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSAoMCwgX2luZGV4NC5kZWZhdWx0KShkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gX2luZGV4LmRlZmF1bHQuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSAoMCwgX2luZGV4NS5kZWZhdWx0KShkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX2luZGV4Ny5kZWZhdWx0KSh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luZGV4LmRlZmF1bHQuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfaW5kZXguZGVmYXVsdC5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbmRleC5kZWZhdWx0LkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9pbmRleC5kZWZhdWx0Lm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfaW5kZXguZGVmYXVsdC5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBfaW5kZXguZGVmYXVsdC5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiAoMCwgX2luZGV4Ny5kZWZhdWx0KSh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyAoMCwgX2luZGV4Ny5kZWZhdWx0KShtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgKDAsIF9pbmRleDcuZGVmYXVsdCkoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9ICgwLCBfaW5kZXg3LmRlZmF1bHQpKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSAoMCwgX2luZGV4Ny5kZWZhdWx0KShhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG52YXIgX2RlZmF1bHQgPSBmb3JtYXR0ZXJzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/Lyk7XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG52YXIgX2RlZmF1bHQgPSBsb25nRm9ybWF0dGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcztcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG5cbmZ1bmN0aW9uIGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURTtcbn1cbi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGlydHlEYXRlKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoZGlydHlEYXRlLmdldFRpbWUoKSk7XG4gIHZhciBiYXNlVGltZXpvbmVPZmZzZXQgPSBNYXRoLmNlaWwoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgZGF0ZS5zZXRTZWNvbmRzKDAsIDApO1xuICB2YXIgaGFzTmVnYXRpdmVVVENPZmZzZXQgPSBiYXNlVGltZXpvbmVPZmZzZXQgPiAwO1xuICB2YXIgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQgPSBoYXNOZWdhdGl2ZVVUQ09mZnNldCA/IChNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSkpICUgTUlMTElTRUNPTkRTX0lOX01JTlVURSA6IGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpO1xuICByZXR1cm4gYmFzZVRpbWV6b25lT2Zmc2V0ICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4gPSBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuO1xuZXhwb3J0cy5pc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4gPSBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW47XG5leHBvcnRzLnRocm93UHJvdGVjdGVkRXJyb3IgPSB0aHJvd1Byb3RlY3RlZEVycm9yO1xudmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5cbmZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXQ7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDggPSByZXF1aXJlKFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIik7XG5cbnZhciBfaW5kZXg5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiBcdTI2QTBcdUZFMEYgUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0aGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgKDAsIF9pbmRleDEwLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IF9pbmRleDIuZGVmYXVsdDtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4OS5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4OS5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSAoMCwgX2luZGV4NC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuXG4gIGlmICghKDAsIF9pbmRleC5kZWZhdWx0KShvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9ICgwLCBfaW5kZXg3LmRlZmF1bHQpKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gKDAsIF9pbmRleDMuZGVmYXVsdCkob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gX2luZGV4Ni5kZWZhdWx0W2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gX2luZGV4NS5kZWZhdWx0W2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgKDAsIF9pbmRleDguaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKShzdWJzdHJpbmcpKSB7XG4gICAgICAgICgwLCBfaW5kZXg4LnRocm93UHJvdGVjdGVkRXJyb3IpKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmICgwLCBfaW5kZXg4LmlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4pKHN1YnN0cmluZykpIHtcbiAgICAgICAgKDAsIF9pbmRleDgudGhyb3dQcm90ZWN0ZWRFcnJvcikoc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZE1pbnV0ZXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG4vKipcbiAqIEBuYW1lIGFkZE1pbnV0ZXNcbiAqIEBjYXRlZ29yeSBNaW51dGUgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbnV0ZXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWludXRlcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaW51dGVzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbnV0ZXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDMwIG1pbnV0ZXMgdG8gMTAgSnVseSAyMDE0IDEyOjAwOjAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWludXRlcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDApLCAzMClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjMwOjAwXG4gKi9cblxuZnVuY3Rpb24gYWRkTWludXRlcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgYW1vdW50ICogTUlMTElTRUNPTkRTX0lOX01JTlVURSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZEhvdXJzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAzNjAwMDAwO1xuLyoqXG4gKiBAbmFtZSBhZGRIb3Vyc1xuICogQGNhdGVnb3J5IEhvdXIgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGhvdXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGhvdXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGhvdXJzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGhvdXJzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAyIGhvdXJzIHRvIDEwIEp1bHkgMjAxNCAyMzowMDowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZEhvdXJzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAyMywgMCksIDIpXG4gKiAvLz0+IEZyaSBKdWwgMTEgMjAxNCAwMTowMDowMFxuICovXG5cbmZ1bmN0aW9uIGFkZEhvdXJzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlBbW91bnQpO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlLCBhbW91bnQgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZERheXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgYWRkRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBhZGREYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZFdlZWtzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2FkZERheXMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBhZGRXZWVrc1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHdlZWtzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHdlZWsgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2Ygd2Vla3MgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgd2Vla3MgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDQgd2Vla3MgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZFdlZWtzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCA0KVxuICogLy89PiBNb24gU2VwIDI5IDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gYWRkV2Vla3MoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG4gIHZhciBkYXlzID0gYW1vdW50ICogNztcbiAgcmV0dXJuICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgZGF5cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZE1vbnRocztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBhZGRNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtb250aHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbW9udGhzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA1IG1vbnRocyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkTW9udGhzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCA1KVxuICogLy89PiBTdW4gRmViIDAxIDIwMTUgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gYWRkTW9udGhzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBtb250aHMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICB2YXIgZGF5T2ZNb250aCA9IGRhdGUuZ2V0RGF0ZSgpOyAvLyBUaGUgSlMgRGF0ZSBvYmplY3Qgc3VwcG9ydHMgZGF0ZSBtYXRoIGJ5IGFjY2VwdGluZyBvdXQtb2YtYm91bmRzIHZhbHVlcyBmb3JcbiAgLy8gbW9udGgsIGRheSwgZXRjLiBGb3IgZXhhbXBsZSwgbmV3IERhdGUoMjAyMCwgMSwgMCkgcmV0dXJucyAzMSBEZWMgMjAxOSBhbmRcbiAgLy8gbmV3IERhdGUoMjAyMCwgMTMsIDEpIHJldHVybnMgMSBGZWIgMjAyMS4gIFRoaXMgaXMgKmFsbW9zdCogdGhlIGJlaGF2aW9yIHdlXG4gIC8vIHdhbnQgZXhjZXB0IHRoYXQgZGF0ZXMgd2lsbCB3cmFwIGFyb3VuZCB0aGUgZW5kIG9mIGEgbW9udGgsIG1lYW5pbmcgdGhhdFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMzEpIHdpbGwgcmV0dXJuIDMgTWFyIDIwMjEgbm90IDI4IEZlYiAyMDIxIGFzIGRlc2lyZWQuIFNvXG4gIC8vIHdlJ2xsIGRlZmF1bHQgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZCBtb250aCBieSBhZGRpbmcgMSB0byB0aGUgZGVzaXJlZFxuICAvLyBtb250aCBhbmQgdXNpbmcgYSBkYXRlIG9mIDAgdG8gYmFjayB1cCBvbmUgZGF5IHRvIHRoZSBlbmQgb2YgdGhlIGRlc2lyZWRcbiAgLy8gbW9udGguXG5cbiAgdmFyIGVuZE9mRGVzaXJlZE1vbnRoID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBlbmRPZkRlc2lyZWRNb250aC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBhbW91bnQgKyAxLCAwKTtcbiAgdmFyIGRheXNJbk1vbnRoID0gZW5kT2ZEZXNpcmVkTW9udGguZ2V0RGF0ZSgpO1xuXG4gIGlmIChkYXlPZk1vbnRoID49IGRheXNJbk1vbnRoKSB7XG4gICAgLy8gSWYgd2UncmUgYWxyZWFkeSBhdCB0aGUgZW5kIG9mIHRoZSBtb250aCwgdGhlbiB0aGlzIGlzIHRoZSBjb3JyZWN0IGRhdGVcbiAgICAvLyBhbmQgd2UncmUgZG9uZS5cbiAgICByZXR1cm4gZW5kT2ZEZXNpcmVkTW9udGg7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCB3ZSBub3cga25vdyB0aGF0IHNldHRpbmcgdGhlIG9yaWdpbmFsIGRheS1vZi1tb250aCB2YWx1ZSB3b24ndFxuICAgIC8vIGNhdXNlIGFuIG92ZXJmbG93LCBzbyBzZXQgdGhlIGRlc2lyZWQgZGF5LW9mLW1vbnRoLiBOb3RlIHRoYXQgd2UgY2FuJ3RcbiAgICAvLyBqdXN0IHNldCB0aGUgZGF0ZSBvZiBgZW5kT2ZEZXNpcmVkTW9udGhgIGJlY2F1c2UgdGhhdCBvYmplY3QgbWF5IGhhdmUgaGFkXG4gICAgLy8gaXRzIHRpbWUgY2hhbmdlZCBpbiB0aGUgdW51c3VhbCBjYXNlIHdoZXJlIHdoZXJlIGEgRFNUIHRyYW5zaXRpb24gd2FzIG9uXG4gICAgLy8gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aCBhbmQgaXRzIGxvY2FsIHRpbWUgd2FzIGluIHRoZSBob3VyIHNraXBwZWQgb3JcbiAgICAvLyByZXBlYXRlZCBuZXh0IHRvIGEgRFNUIHRyYW5zaXRpb24uICBTbyB3ZSB1c2UgYGRhdGVgIGluc3RlYWQgd2hpY2ggaXNcbiAgICAvLyBndWFyYW50ZWVkIHRvIHN0aWxsIGhhdmUgdGhlIG9yaWdpbmFsIHRpbWUuXG4gICAgZGF0ZS5zZXRGdWxsWWVhcihlbmRPZkRlc2lyZWRNb250aC5nZXRGdWxsWWVhcigpLCBlbmRPZkRlc2lyZWRNb250aC5nZXRNb250aCgpLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRZZWFycztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hZGRNb250aHMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBhZGRZZWFyc1xuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHllYXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHllYXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIHllYXJzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHllYXJzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA1IHllYXJzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRZZWFycyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgNSlcbiAqIC8vPT4gU3VuIFNlcCAwMSAyMDE5IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIGFkZFllYXJzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlBbW91bnQpO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlLCBhbW91bnQgKiAxMik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN1Yk1pbnV0ZXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYWRkTWludXRlcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1Yk1pbnV0ZXNcbiAqIEBjYXRlZ29yeSBNaW51dGUgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWludXRlcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWludXRlcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbnV0ZXMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaW51dGVzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgMzAgbWludXRlcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjowMDowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbnV0ZXMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCAwKSwgMzApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMTozMDowMFxuICovXG5mdW5jdGlvbiBzdWJNaW51dGVzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlBbW91bnQpO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlLCAtYW1vdW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3ViSG91cnM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYWRkSG91cnMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzdWJIb3Vyc1xuICogQGNhdGVnb3J5IEhvdXIgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgaG91cnMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGhvdXJzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgaG91cnMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBob3VycyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDIgaG91cnMgZnJvbSAxMSBKdWx5IDIwMTQgMDE6MDA6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJIb3VycyhuZXcgRGF0ZSgyMDE0LCA2LCAxMSwgMSwgMCksIDIpXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAyMzowMDowMFxuICovXG5mdW5jdGlvbiBzdWJIb3VycyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN1YkRheXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1YkRheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgMTAgZGF5cyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJEYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gRnJpIEF1ZyAyMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN1YkRheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG4gIHJldHVybiAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUsIC1hbW91bnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdWJXZWVrcztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hZGRXZWVrcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1YldlZWtzXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB3ZWVrcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygd2Vla3MgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiB3ZWVrcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHdlZWtzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNCB3ZWVrcyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJXZWVrcyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgNClcbiAqIC8vPT4gTW9uIEF1ZyAwNCAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN1YldlZWtzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlBbW91bnQpO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlLCAtYW1vdW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3ViTW9udGhzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2FkZE1vbnRocy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1Yk1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbW9udGhzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbW9udGhzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNSBtb250aHMgZnJvbSAxIEZlYnJ1YXJ5IDIwMTU6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNb250aHMobmV3IERhdGUoMjAxNSwgMSwgMSksIDUpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdWJNb250aHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG4gIHJldHVybiAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUsIC1hbW91bnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdWJZZWFycztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9hZGRZZWFycy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1YlllYXJzXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB5ZWFycyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgeWVhcnMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiB5ZWFycyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHllYXJzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNSB5ZWFycyBmcm9tIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJZZWFycyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgNSlcbiAqIC8vPT4gVHVlIFNlcCAwMSAyMDA5IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN1YlllYXJzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlBbW91bnQpO1xuICByZXR1cm4gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlLCAtYW1vdW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0U2Vjb25kcztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGdldFNlY29uZHNcbiAqIEBjYXRlZ29yeSBTZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBzZWNvbmRzIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBzZWNvbmRzIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgc2Vjb25kc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEdldCB0aGUgc2Vjb25kcyBvZiAyOSBGZWJydWFyeSAyMDEyIDExOjQ1OjA1LjEyMzpcbiAqIGNvbnN0IHJlc3VsdCA9IGdldFNlY29uZHMobmV3IERhdGUoMjAxMiwgMSwgMjksIDExLCA0NSwgNSwgMTIzKSlcbiAqIC8vPT4gNVxuICovXG5mdW5jdGlvbiBnZXRTZWNvbmRzKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHNlY29uZHMgPSBkYXRlLmdldFNlY29uZHMoKTtcbiAgcmV0dXJuIHNlY29uZHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldE1pbnV0ZXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXRNaW51dGVzXG4gKiBAY2F0ZWdvcnkgTWludXRlIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbWludXRlcyBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbWludXRlcyBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG1pbnV0ZXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBHZXQgdGhlIG1pbnV0ZXMgb2YgMjkgRmVicnVhcnkgMjAxMiAxMTo0NTowNTpcbiAqIGNvbnN0IHJlc3VsdCA9IGdldE1pbnV0ZXMobmV3IERhdGUoMjAxMiwgMSwgMjksIDExLCA0NSwgNSkpXG4gKiAvLz0+IDQ1XG4gKi9cbmZ1bmN0aW9uIGdldE1pbnV0ZXMoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xuICByZXR1cm4gbWludXRlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0SG91cnM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXRIb3Vyc1xuICogQGNhdGVnb3J5IEhvdXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBob3VycyBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgaG91cnMgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBob3Vyc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEdldCB0aGUgaG91cnMgb2YgMjkgRmVicnVhcnkgMjAxMiAxMTo0NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGdldEhvdXJzKG5ldyBEYXRlKDIwMTIsIDEsIDI5LCAxMSwgNDUpKVxuICogLy89PiAxMVxuICovXG5mdW5jdGlvbiBnZXRIb3VycyhkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgcmV0dXJuIGhvdXJzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXREYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXREYXlcbiAqIEBjYXRlZ29yeSBXZWVrZGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHswfDF8MnwzfDR8NXw2fSB0aGUgZGF5IG9mIHdlZWssIDAgcmVwcmVzZW50cyBTdW5kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHdlZWsgaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldERheShuZXcgRGF0ZSgyMDEyLCAxLCAyOSkpXG4gKiAvLz0+IDNcbiAqL1xuZnVuY3Rpb24gZ2V0RGF5KGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldERhdGU7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXREYXRlXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIGRheSBvZiBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIGRheSBvZiB0aGUgbW9udGggaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldERhdGUobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAyOVxuICovXG5mdW5jdGlvbiBnZXREYXRlKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGRheU9mTW9udGggPSBkYXRlLmdldERhdGUoKTtcbiAgcmV0dXJuIGRheU9mTW9udGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZXZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIHZhciByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBTdW4gQXVnIDMxIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4Mi5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4Mi5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldERheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZklTT1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZJU09XZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlLCB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRJU09XZWVrWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZklTT1dlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXRJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgZnJvbSBgZ2V0SVNPWWVhcmAgdG8gYGdldElTT1dlZWtZZWFyYC5cbiAqICAgXCJJU08gd2VlayB5ZWFyXCIgaXMgc2hvcnQgZm9yIFtJU08gd2Vlay1udW1iZXJpbmcgeWVhcl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSkuXG4gKiAgIFRoaXMgY2hhbmdlIG1ha2VzIHRoZSBuYW1lIGNvbnNpc3RlbnQgd2l0aFxuICogICBsb2NhbGUtZGVwZW5kZW50IHdlZWstbnVtYmVyaW5nIHllYXIgaGVscGVycywgZS5nLiwgYGdldFdlZWtZZWFyYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2Vla1llYXIobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDIwMDRcbiAqL1xuZnVuY3Rpb24gZ2V0SVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZ2V0SVNPV2Vla1llYXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZJU09XZWVrL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZklTT1dlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDU6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mSVNPV2Vla1llYXIobmV3IERhdGUoMjAwNSwgNiwgMikpXG4gKiAvLz0+IE1vbiBKYW4gMDMgMjAwNSAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRJU09XZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZklTT1dlZWtZZWFyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIElTTyB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRJU09XZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiA1M1xuICovXG5cbmZ1bmN0aW9uIGdldElTT1dlZWsoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKSAtICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0TW9udGg7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXRNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbW9udGggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBtb250aCBpcyAyOSBGZWJydWFyeSAyMDEyP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0TW9udGgobmV3IERhdGUoMjAxMiwgMSwgMjkpKVxuICogLy89PiAxXG4gKi9cbmZ1bmN0aW9uIGdldE1vbnRoKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICByZXR1cm4gbW9udGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFF1YXJ0ZXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXRRdWFydGVyXG4gKiBAY2F0ZWdvcnkgUXVhcnRlciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIHllYXIgcXVhcnRlciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgeWVhciBxdWFydGVyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgcXVhcnRlclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHF1YXJ0ZXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRRdWFydGVyKG5ldyBEYXRlKDIwMTQsIDYsIDIpKVxuICogLy89PiAzXG4gKi9cbmZ1bmN0aW9uIGdldFF1YXJ0ZXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgcXVhcnRlciA9IE1hdGguZmxvb3IoZGF0ZS5nZXRNb250aCgpIC8gMykgKyAxO1xuICByZXR1cm4gcXVhcnRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0WWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGdldFllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIHllYXJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB5ZWFyIGlzIDIgSnVseSAyMDE0P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0WWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMjAxNFxuICovXG5mdW5jdGlvbiBnZXRZZWFyKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIHJldHVybiB5ZWFyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRUaW1lO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgZ2V0VGltZVxuICogQGNhdGVnb3J5IFRpbWVzdGFtcCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSB0aW1lc3RhbXBcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBHZXQgdGhlIHRpbWVzdGFtcCBvZiAyOSBGZWJydWFyeSAyMDEyIDExOjQ1OjA1LjEyMzpcbiAqIGNvbnN0IHJlc3VsdCA9IGdldFRpbWUobmV3IERhdGUoMjAxMiwgMSwgMjksIDExLCA0NSwgNSwgMTIzKSlcbiAqIC8vPT4gMTMzMDUxNTkwNTEyM1xuICovXG5mdW5jdGlvbiBnZXRUaW1lKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICByZXR1cm4gdGltZXN0YW1wO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRTZWNvbmRzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHNldFNlY29uZHNcbiAqIEBjYXRlZ29yeSBTZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU2V0IHRoZSBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IHRoZSBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzZWNvbmRzIC0gdGhlIHNlY29uZHMgb2YgdGhlIG5ldyBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHNlY29uZHMgc2V0XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFNldCA0NSBzZWNvbmRzIHRvIDEgU2VwdGVtYmVyIDIwMTQgMTE6MzA6NDA6XG4gKiB2YXIgcmVzdWx0ID0gc2V0U2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA4LCAxLCAxMSwgMzAsIDQwKSwgNDUpXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAxMTozMDo0NVxuICovXG5mdW5jdGlvbiBzZXRTZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlTZWNvbmRzKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHNlY29uZHMgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5U2Vjb25kcyk7XG4gIGRhdGUuc2V0U2Vjb25kcyhzZWNvbmRzKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldE1pbnV0ZXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgc2V0TWludXRlc1xuICogQGNhdGVnb3J5IE1pbnV0ZSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTZXQgdGhlIG1pbnV0ZXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXQgdGhlIG1pbnV0ZXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbnV0ZXMgLSB0aGUgbWludXRlcyBvZiB0aGUgbmV3IGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWludXRlcyBzZXRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU2V0IDQ1IG1pbnV0ZXMgdG8gMSBTZXB0ZW1iZXIgMjAxNCAxMTozMDo0MDpcbiAqIHZhciByZXN1bHQgPSBzZXRNaW51dGVzKG5ldyBEYXRlKDIwMTQsIDgsIDEsIDExLCAzMCwgNDApLCA0NSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDExOjQ1OjQwXG4gKi9cbmZ1bmN0aW9uIHNldE1pbnV0ZXMoZGlydHlEYXRlLCBkaXJ0eU1pbnV0ZXMpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgbWludXRlcyA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlNaW51dGVzKTtcbiAgZGF0ZS5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2V0SG91cnM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgc2V0SG91cnNcbiAqIEBjYXRlZ29yeSBIb3VyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFNldCB0aGUgaG91cnMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXQgdGhlIGhvdXJzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBob3VycyAtIHRoZSBob3VycyBvZiB0aGUgbmV3IGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgaG91cnMgc2V0XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFNldCA0IGhvdXJzIHRvIDEgU2VwdGVtYmVyIDIwMTQgMTE6MzA6MDA6XG4gKiB2YXIgcmVzdWx0ID0gc2V0SG91cnMobmV3IERhdGUoMjAxNCwgOCwgMSwgMTEsIDMwKSwgNClcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDA0OjMwOjAwXG4gKi9cbmZ1bmN0aW9uIHNldEhvdXJzKGRpcnR5RGF0ZSwgZGlydHlIb3Vycykge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBob3VycyA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlIb3Vycyk7XG4gIGRhdGUuc2V0SG91cnMoaG91cnMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0RGF5c0luTW9udGg7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBnZXREYXlzSW5Nb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBkYXlzIGluIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBkYXlzIGFyZSBpbiBGZWJydWFyeSAyMDAwP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0RGF5c0luTW9udGgobmV3IERhdGUoMjAwMCwgMSkpXG4gKiAvLz0+IDI5XG4gKi9cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIHZhciBtb250aEluZGV4ID0gZGF0ZS5nZXRNb250aCgpO1xuICB2YXIgbGFzdERheU9mTW9udGggPSBuZXcgRGF0ZSgwKTtcbiAgbGFzdERheU9mTW9udGguc2V0RnVsbFllYXIoeWVhciwgbW9udGhJbmRleCArIDEsIDApO1xuICBsYXN0RGF5T2ZNb250aC5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGxhc3REYXlPZk1vbnRoLmdldERhdGUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2V0TW9udGg7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9nZXREYXlzSW5Nb250aC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHNldE1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgU2V0IHRoZSBtb250aCB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCB0aGUgbW9udGggdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG1vbnRoIC0gdGhlIG1vbnRoIG9mIHRoZSBuZXcgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtb250aCBzZXRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU2V0IEZlYnJ1YXJ5IHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiB2YXIgcmVzdWx0ID0gc2V0TW9udGgobmV3IERhdGUoMjAxNCwgOCwgMSksIDEpXG4gKiAvLz0+IFNhdCBGZWIgMDEgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzZXRNb250aChkaXJ0eURhdGUsIGRpcnR5TW9udGgpIHtcbiAgKDAsIF9pbmRleDQuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgbW9udGggPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5TW9udGgpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICB2YXIgZGF0ZVdpdGhEZXNpcmVkTW9udGggPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZVdpdGhEZXNpcmVkTW9udGguc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIDE1KTtcbiAgZGF0ZVdpdGhEZXNpcmVkTW9udGguc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXlzSW5Nb250aCA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGVXaXRoRGVzaXJlZE1vbnRoKTsgLy8gU2V0IHRoZSBsYXN0IGRheSBvZiB0aGUgbmV3IG1vbnRoXG4gIC8vIGlmIHRoZSBvcmlnaW5hbCBkYXRlIHdhcyB0aGUgbGFzdCBkYXkgb2YgdGhlIGxvbmdlciBtb250aFxuXG4gIGRhdGUuc2V0TW9udGgobW9udGgsIE1hdGgubWluKGRheSwgZGF5c0luTW9udGgpKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldFF1YXJ0ZXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zZXRNb250aC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHNldFF1YXJ0ZXJcbiAqIEBjYXRlZ29yeSBRdWFydGVyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFNldCB0aGUgeWVhciBxdWFydGVyIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IHRoZSB5ZWFyIHF1YXJ0ZXIgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IHF1YXJ0ZXIgLSB0aGUgcXVhcnRlciBvZiB0aGUgbmV3IGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgcXVhcnRlciBzZXRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU2V0IHRoZSAybmQgcXVhcnRlciB0byAyIEp1bHkgMjAxNDpcbiAqIHZhciByZXN1bHQgPSBzZXRRdWFydGVyKG5ldyBEYXRlKDIwMTQsIDYsIDIpLCAyKVxuICogLy89PiBXZWQgQXByIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc2V0UXVhcnRlcihkaXJ0eURhdGUsIGRpcnR5UXVhcnRlcikge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBxdWFydGVyID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eVF1YXJ0ZXIpO1xuICB2YXIgb2xkUXVhcnRlciA9IE1hdGguZmxvb3IoZGF0ZS5nZXRNb250aCgpIC8gMykgKyAxO1xuICB2YXIgZGlmZiA9IHF1YXJ0ZXIgLSBvbGRRdWFydGVyO1xuICByZXR1cm4gKDAsIF9pbmRleDMuZGVmYXVsdCkoZGF0ZSwgZGF0ZS5nZXRNb250aCgpICsgZGlmZiAqIDMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHNldFllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFNldCB0aGUgeWVhciB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCB0aGUgeWVhciB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0geWVhciAtIHRoZSB5ZWFyIG9mIHRoZSBuZXcgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSB5ZWFyIHNldFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTZXQgeWVhciAyMDEzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiB2YXIgcmVzdWx0ID0gc2V0WWVhcihuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMjAxMylcbiAqIC8vPT4gU3VuIFNlcCAwMSAyMDEzIDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHNldFllYXIoZGlydHlEYXRlLCBkaXJ0eVllYXIpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlZZWFyKTsgLy8gQ2hlY2sgaWYgZGF0ZSBpcyBJbnZhbGlkIERhdGUgYmVjYXVzZSBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhciBpZ25vcmVzIHRoZSB2YWx1ZSBvZiBJbnZhbGlkIERhdGVcblxuICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtaW47XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBtaW5cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlYXJsaWVzdCBvZiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGVhcmxpZXN0IG9mIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gYG1pbmAgZnVuY3Rpb24gbm93IGFjY2VwdHMgYW4gYXJyYXkgb2YgZGF0ZXMgcmF0aGVyIHRoYW4gc3ByZWFkIGFyZ3VtZW50cy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxOTg5LCA2LCAxMClcbiAqICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTk4NywgMSwgMTEpXG4gKiAgIHZhciBtaW5EYXRlID0gbWluKGRhdGUxLCBkYXRlMilcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmQ6XG4gKiAgIHZhciBkYXRlcyA9IFtuZXcgRGF0ZSgxOTg5LCA2LCAxMCksIG5ldyBEYXRlKDE5ODcsIDEsIDExKV1cbiAqICAgdmFyIG1pbkRhdGUgPSBtaW4oZGF0ZXMpXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZVtdfE51bWJlcltdfSBkYXRlc0FycmF5IC0gdGhlIGRhdGVzIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZWFybGllc3Qgb2YgdGhlIGRhdGVzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggb2YgdGhlc2UgZGF0ZXMgaXMgdGhlIGVhcmxpZXN0P1xuICogdmFyIHJlc3VsdCA9IG1pbihbXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKSxcbiAqICAgbmV3IERhdGUoMTk4NywgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgxOTk1LCA2LCAyKSxcbiAqICAgbmV3IERhdGUoMTk5MCwgMCwgMSlcbiAqIF0pXG4gKiAvLz0+IFdlZCBGZWIgMTEgMTk4NyAwMDowMDowMFxuICovXG5mdW5jdGlvbiBtaW4oZGlydHlEYXRlc0FycmF5KSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlc0FycmF5OyAvLyBgZGlydHlEYXRlc0FycmF5YCBpcyBBcnJheSwgU2V0IG9yIE1hcCwgb3Igb2JqZWN0IHdpdGggY3VzdG9tIGBmb3JFYWNoYCBtZXRob2RcblxuICBpZiAoZGlydHlEYXRlc0FycmF5ICYmIHR5cGVvZiBkaXJ0eURhdGVzQXJyYXkuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRhdGVzQXJyYXkgPSBkaXJ0eURhdGVzQXJyYXk7IC8vIElmIGBkaXJ0eURhdGVzQXJyYXlgIGlzIEFycmF5LWxpa2UgT2JqZWN0LCBjb252ZXJ0IHRvIEFycmF5LlxuICB9IGVsc2UgaWYgKHR5cGVvZiBkaXJ0eURhdGVzQXJyYXkgPT09ICdvYmplY3QnICYmIGRpcnR5RGF0ZXNBcnJheSAhPT0gbnVsbCkge1xuICAgIGRhdGVzQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkaXJ0eURhdGVzQXJyYXkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGBkaXJ0eURhdGVzQXJyYXlgIGlzIG5vbi1pdGVyYWJsZSwgcmV0dXJuIEludmFsaWQgRGF0ZVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIHJlc3VsdDtcbiAgZGF0ZXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChkaXJ0eURhdGUpIHtcbiAgICB2YXIgY3VycmVudERhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID4gY3VycmVudERhdGUgfHwgaXNOYU4oY3VycmVudERhdGUpKSB7XG4gICAgICByZXN1bHQgPSBjdXJyZW50RGF0ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0IHx8IG5ldyBEYXRlKE5hTik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1heDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIG1heFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGxhdGVzdCBvZiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGxhdGVzdCBvZiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIGBtYXhgIGZ1bmN0aW9uIG5vdyBhY2NlcHRzIGFuIGFycmF5IG9mIGRhdGVzIHJhdGhlciB0aGFuIHNwcmVhZCBhcmd1bWVudHMuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgdmFyIGRhdGUxID0gbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiAgIHZhciBkYXRlMiA9IG5ldyBEYXRlKDE5ODcsIDEsIDExKVxuICogICB2YXIgbWF4RGF0ZSA9IG1heChkYXRlMSwgZGF0ZTIpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkOlxuICogICB2YXIgZGF0ZXMgPSBbbmV3IERhdGUoMTk4OSwgNiwgMTApLCBuZXcgRGF0ZSgxOTg3LCAxLCAxMSldXG4gKiAgIHZhciBtYXhEYXRlID0gbWF4KGRhdGVzKVxuICogICBgYGBcbiAqXG4gKiBAcGFyYW0ge0RhdGVbXXxOdW1iZXJbXX0gZGF0ZXNBcnJheSAtIHRoZSBkYXRlcyB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIGxhdGVzdCBvZiB0aGUgZGF0ZXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBvZiB0aGVzZSBkYXRlcyBpcyB0aGUgbGF0ZXN0P1xuICogdmFyIHJlc3VsdCA9IG1heChbXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKSxcbiAqICAgbmV3IERhdGUoMTk4NywgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgxOTk1LCA2LCAyKSxcbiAqICAgbmV3IERhdGUoMTk5MCwgMCwgMSlcbiAqIF0pXG4gKiAvLz0+IFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICovXG5mdW5jdGlvbiBtYXgoZGlydHlEYXRlc0FycmF5KSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlc0FycmF5OyAvLyBgZGlydHlEYXRlc0FycmF5YCBpcyBBcnJheSwgU2V0IG9yIE1hcCwgb3Igb2JqZWN0IHdpdGggY3VzdG9tIGBmb3JFYWNoYCBtZXRob2RcblxuICBpZiAoZGlydHlEYXRlc0FycmF5ICYmIHR5cGVvZiBkaXJ0eURhdGVzQXJyYXkuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRhdGVzQXJyYXkgPSBkaXJ0eURhdGVzQXJyYXk7IC8vIElmIGBkaXJ0eURhdGVzQXJyYXlgIGlzIEFycmF5LWxpa2UgT2JqZWN0LCBjb252ZXJ0IHRvIEFycmF5LlxuICB9IGVsc2UgaWYgKHR5cGVvZiBkaXJ0eURhdGVzQXJyYXkgPT09ICdvYmplY3QnICYmIGRpcnR5RGF0ZXNBcnJheSAhPT0gbnVsbCkge1xuICAgIGRhdGVzQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkaXJ0eURhdGVzQXJyYXkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGBkaXJ0eURhdGVzQXJyYXlgIGlzIG5vbi1pdGVyYWJsZSwgcmV0dXJuIEludmFsaWQgRGF0ZVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIHJlc3VsdDtcbiAgZGF0ZXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChkaXJ0eURhdGUpIHtcbiAgICB2YXIgY3VycmVudERhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0IDwgY3VycmVudERhdGUgfHwgaXNOYU4oY3VycmVudERhdGUpKSB7XG4gICAgICByZXN1bHQgPSBjdXJyZW50RGF0ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0IHx8IG5ldyBEYXRlKE5hTik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZEYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXM7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuXG5mdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgKDAsIF9pbmRleDMuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHN0YXJ0T2ZEYXlMZWZ0ID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBzdGFydE9mRGF5UmlnaHQgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZkRheUxlZnQuZ2V0VGltZSgpIC0gKDAsIF9pbmRleC5kZWZhdWx0KShzdGFydE9mRGF5TGVmdCk7XG4gIHZhciB0aW1lc3RhbXBSaWdodCA9IHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLSAoMCwgX2luZGV4LmRlZmF1bHQpKHN0YXJ0T2ZEYXlSaWdodCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSBkYXkgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSBkYXkgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIG1vbnRoc1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBtb250aHMgYXJlIGJldHdlZW4gMzEgSmFudWFyeSAyMDE0IGFuZCAxIFNlcHRlbWJlciAyMDE0P1xuICogdmFyIHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA4LCAxKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgMCwgMzEpXG4gKiApXG4gKiAvLz0+IDhcbiAqL1xuZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgeWVhckRpZmYgPSBkYXRlTGVmdC5nZXRGdWxsWWVhcigpIC0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCk7XG4gIHZhciBtb250aERpZmYgPSBkYXRlTGVmdC5nZXRNb250aCgpIC0gZGF0ZVJpZ2h0LmdldE1vbnRoKCk7XG4gIHJldHVybiB5ZWFyRGlmZiAqIDEyICsgbW9udGhEaWZmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZldlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3NcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIHdlZWtzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgd2Vla3MgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgd2Vla3NcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgd2Vla3MgYXJlIGJldHdlZW4gNSBKdWx5IDIwMTQgYW5kIDIwIEp1bHkgMjAxND9cbiAqIHZhciByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDUpXG4gKiApXG4gKiAvLz0+IDNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSxcbiAqIC8vIGhvdyBtYW55IGNhbGVuZGFyIHdlZWtzIGFyZSBiZXR3ZWVuIDUgSnVseSAyMDE0IGFuZCAyMCBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMjApLFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCA1KSxcbiAqICAgeyB3ZWVrU3RhcnRzT246IDEgfVxuICogKVxuICogLy89PiAyXG4gKi9cblxuZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrcyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCwgZGlydHlPcHRpb25zKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBzdGFydE9mV2Vla0xlZnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBzdGFydE9mV2Vla1JpZ2h0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCwgZGlydHlPcHRpb25zKTtcbiAgdmFyIHRpbWVzdGFtcExlZnQgPSBzdGFydE9mV2Vla0xlZnQuZ2V0VGltZSgpIC0gKDAsIF9pbmRleDIuZGVmYXVsdCkoc3RhcnRPZldlZWtMZWZ0KTtcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZldlZWtSaWdodC5nZXRUaW1lKCkgLSAoMCwgX2luZGV4Mi5kZWZhdWx0KShzdGFydE9mV2Vla1JpZ2h0KTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZCgodGltZXN0YW1wTGVmdCAtIHRpbWVzdGFtcFJpZ2h0KSAvIE1JTExJU0VDT05EU19JTl9XRUVLKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyWWVhcnNcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIHllYXJzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgeWVhcnMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIHllYXJzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIHllYXJzIGFyZSBiZXR3ZWVuIDMxIERlY2VtYmVyIDIwMTMgYW5kIDExIEZlYnJ1YXJ5IDIwMTU/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyhcbiAqICAgbmV3IERhdGUoMjAxNSwgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgyMDEzLCAxMSwgMzEpXG4gKiApXG4gKiAvLz0+IDJcbiAqL1xuZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdC5nZXRGdWxsWWVhcigpIC0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZNb250aDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIG1vbnRoXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgbW9udGggZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0T2ZNb250aChkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZRdWFydGVyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlF1YXJ0ZXJcbiAqIEBjYXRlZ29yeSBRdWFydGVyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIHF1YXJ0ZXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgcXVhcnRlciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgcXVhcnRlclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHF1YXJ0ZXIgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mUXVhcnRlcihuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgSnVsIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZlF1YXJ0ZXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgY3VycmVudE1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICB2YXIgbW9udGggPSBjdXJyZW50TW9udGggLSBjdXJyZW50TW9udGggJSAzO1xuICBkYXRlLnNldE1vbnRoKG1vbnRoLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZZZWFyO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB5ZWFyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMDApKVxuICogLy89PiBXZWQgSmFuIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZlllYXIoZGlydHlEYXRlKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBjbGVhbkRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoMCk7XG4gIGRhdGUuc2V0RnVsbFllYXIoY2xlYW5EYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZW5kT2ZEYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBlbmRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGVuZCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIGVuZCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBlbmRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMjM6NTk6NTkuOTk5XG4gKi9cbmZ1bmN0aW9uIGVuZE9mRGF5KGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZW5kT2ZXZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGVuZE9mV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZW5kIG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZW5kIG9mIGEgd2Vla1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFNhdCBTZXAgMDYgMjAxNCAyMzo1OTo1OS45OTlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIGVuZCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBTdW4gU2VwIDA3IDIwMTQgMjM6NTk6NTkuOTk5XG4gKi9cbmZ1bmN0aW9uIGVuZE9mV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4Mi5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4Mi5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldERheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyAtNyA6IDApICsgNiAtIChkYXkgLSB3ZWVrU3RhcnRzT24pO1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkaWZmKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZW5kT2ZNb250aDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGVuZE9mTW9udGhcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZW5kIG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBtb250aCBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAzMCAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5mdW5jdGlvbiBlbmRPZk1vbnRoKGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggKyAxLCAwKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFcXVhbDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGlzRXF1YWxcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBlcXVhbD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgZXF1YWw/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBlcXVhbFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMiBKdWx5IDIwMTQgMDY6MzA6NDUuMDAwIGFuZCAyIEp1bHkgMjAxNCAwNjozMDo0NS41MDAgZXF1YWw/XG4gKiB2YXIgcmVzdWx0ID0gaXNFcXVhbChcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgNiwgMzAsIDQ1LCAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgNiwgMzAsIDQ1LCA1MDApXG4gKiApXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwoZGlydHlMZWZ0RGF0ZSwgZGlydHlSaWdodERhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eUxlZnREYXRlKTtcbiAgdmFyIGRhdGVSaWdodCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlSaWdodERhdGUpO1xuICByZXR1cm4gZGF0ZUxlZnQuZ2V0VGltZSgpID09PSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1NhbWVEYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mRGF5L2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5P1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXk/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1NhbWVEYXkoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZkRheSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mRGF5ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZEYXkuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mRGF5LmdldFRpbWUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNTYW1lTW9udGg7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBpc1NhbWVNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgbW9udGg/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIG1vbnRoP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMiBTZXB0ZW1iZXIgMjAxNCBhbmQgMjUgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgbW9udGg/XG4gKiB2YXIgcmVzdWx0ID0gaXNTYW1lTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiksIG5ldyBEYXRlKDIwMTQsIDgsIDI1KSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1NhbWVNb250aChkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdC5nZXRGdWxsWWVhcigpID09PSBkYXRlUmlnaHQuZ2V0RnVsbFllYXIoKSAmJiBkYXRlTGVmdC5nZXRNb250aCgpID09PSBkYXRlUmlnaHQuZ2V0TW9udGgoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNTYW1lWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGlzU2FtZVllYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgeWVhcj9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgeWVhcj9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgeWVhclxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMiBTZXB0ZW1iZXIgMjAxNCBhbmQgMjUgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgeWVhcj9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIpLCBuZXcgRGF0ZSgyMDE0LCA4LCAyNSkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNTYW1lWWVhcihkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdC5nZXRGdWxsWWVhcigpID09PSBkYXRlUmlnaHQuZ2V0RnVsbFllYXIoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNTYW1lUXVhcnRlcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0YXJ0T2ZRdWFydGVyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQG5hbWUgaXNTYW1lUXVhcnRlclxuICogQGNhdGVnb3J5IFF1YXJ0ZXIgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSB5ZWFyIHF1YXJ0ZXI/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIHllYXIgcXVhcnRlcj9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgcXVhcnRlclxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMSBKYW51YXJ5IDIwMTQgYW5kIDggTWFyY2ggMjAxNCBpbiB0aGUgc2FtZSBxdWFydGVyP1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZVF1YXJ0ZXIobmV3IERhdGUoMjAxNCwgMCwgMSksIG5ldyBEYXRlKDIwMTQsIDIsIDgpKVxuICogLy89PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzU2FtZVF1YXJ0ZXIoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZlF1YXJ0ZXIgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZlF1YXJ0ZXIgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZlF1YXJ0ZXIuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mUXVhcnRlci5nZXRUaW1lKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzQWZ0ZXI7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBpc0FmdGVyXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBmaXJzdCBkYXRlIGFmdGVyIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYWZ0ZXIgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVRvQ29tcGFyZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAxMCBKdWx5IDE5ODkgYWZ0ZXIgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIHZhciByZXN1bHQgPSBpc0FmdGVyKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzQWZ0ZXIoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPiBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCZWZvcmU7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBpc0JlZm9yZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYmVmb3JlIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBiZWZvcmUgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIHZhciByZXN1bHQgPSBpc0JlZm9yZShuZXcgRGF0ZSgxOTg5LCA2LCAxMCksIG5ldyBEYXRlKDE5ODcsIDEsIDExKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCZWZvcmUoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNXaXRoaW5JbnRlcnZhbDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGlzV2l0aGluSW50ZXJ2YWxcbiAqIEBjYXRlZ29yeSBJbnRlcnZhbCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgd2l0aGluIHRoZSBpbnRlcnZhbD8gKEluY2x1ZGluZyBzdGFydCBhbmQgZW5kLilcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIGZ1bmN0aW9uIHdhcyByZW5hbWVkIGZyb20gYGlzV2l0aGluUmFuZ2VgIHRvIGBpc1dpdGhpbkludGVydmFsYC5cbiAqICAgVGhpcyBjaGFuZ2Ugd2FzIG1hZGUgdG8gbWlycm9yIHRoZSB1c2Ugb2YgdGhlIHdvcmQgXCJpbnRlcnZhbFwiIGluIHN0YW5kYXJkIElTTyA4NjAxOjIwMDQgdGVybWlub2xvZ3k6XG4gKlxuICogICBgYGBcbiAqICAgMi4xLjNcbiAqICAgdGltZSBpbnRlcnZhbFxuICogICBwYXJ0IG9mIHRoZSB0aW1lIGF4aXMgbGltaXRlZCBieSB0d28gaW5zdGFudHNcbiAqICAgYGBgXG4gKlxuICogICBBbHNvLCB0aGlzIGZ1bmN0aW9uIG5vdyBhY2NlcHRzIGFuIG9iamVjdCB3aXRoIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXNcbiAqICAgaW5zdGVhZCBvZiB0d28gYXJndW1lbnRzIGFzIGFuIGludGVydmFsLlxuICogICBUaGlzIGZ1bmN0aW9uIG5vdyB0aHJvd3MgYFJhbmdlRXJyb3JgIGlmIHRoZSBzdGFydCBvZiB0aGUgaW50ZXJ2YWwgaXMgYWZ0ZXIgaXRzIGVuZFxuICogICBvciBpZiBhbnkgZGF0ZSBpbiB0aGUgaW50ZXJ2YWwgaXMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGlzV2l0aGluUmFuZ2UoXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMyksXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMSksIG5ldyBEYXRlKDIwMTQsIDAsIDcpXG4gKiAgIClcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGlzV2l0aGluSW50ZXJ2YWwoXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMyksXG4gKiAgICAgeyBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNykgfVxuICogICApXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtJbnRlcnZhbH0gaW50ZXJ2YWwgLSB0aGUgaW50ZXJ2YWwgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB3aXRoaW4gdGhlIGludGVydmFsXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBUaGUgc3RhcnQgb2YgYW4gaW50ZXJ2YWwgY2Fubm90IGJlIGFmdGVyIGl0cyBlbmRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IERhdGUgaW4gaW50ZXJ2YWwgY2Fubm90IGJlIGBJbnZhbGlkIERhdGVgXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAzKSwge1xuICogICBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksXG4gKiAgIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNylcbiAqIH0pXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBkYXRlIG91dHNpZGUgb2YgdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAxMCksIHtcbiAqICAgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEpLFxuICogICBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDcpXG4gKiB9KVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgZGF0ZSBlcXVhbCB0byBpbnRlcnZhbCBzdGFydDpcbiAqIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgeyBzdGFydCwgZW5kOiBkYXRlIH0pIC8vID0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGRhdGUgZXF1YWwgdG8gaW50ZXJ2YWwgZW5kOlxuICogaXNXaXRoaW5JbnRlcnZhbChkYXRlLCB7IHN0YXJ0OiBkYXRlLCBlbmQgfSkgLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1dpdGhpbkludGVydmFsKGRpcnR5RGF0ZSwgZGlydHlJbnRlcnZhbCkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgaW50ZXJ2YWwgPSBkaXJ0eUludGVydmFsIHx8IHt9O1xuICB2YXIgdGltZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBzdGFydFRpbWUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGludGVydmFsLnN0YXJ0KS5nZXRUaW1lKCk7XG4gIHZhciBlbmRUaW1lID0gKDAsIF9pbmRleC5kZWZhdWx0KShpbnRlcnZhbC5lbmQpLmdldFRpbWUoKTsgLy8gVGhyb3cgYW4gZXhjZXB0aW9uIGlmIHN0YXJ0IGRhdGUgaXMgYWZ0ZXIgZW5kIGRhdGUgb3IgaWYgYW55IGRhdGUgaXMgYEludmFsaWQgRGF0ZWBcblxuICBpZiAoIShzdGFydFRpbWUgPD0gZW5kVGltZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBpbnRlcnZhbCcpO1xuICB9XG5cbiAgcmV0dXJuIHRpbWUgPj0gc3RhcnRUaW1lICYmIHRpbWUgPD0gZW5kVGltZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXNzaWduO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBkaXJ0eU9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBkaXJ0eU9iamVjdCA9IGRpcnR5T2JqZWN0IHx8IHt9O1xuXG4gIGZvciAodmFyIHByb3BlcnR5IGluIGRpcnR5T2JqZWN0KSB7XG4gICAgaWYgKGRpcnR5T2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IGRpcnR5T2JqZWN0W3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRVVENEYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzZXRVVENEYXkoZGlydHlEYXRlLCBkaXJ0eURheSwgZGlydHlPcHRpb25zKSB7XG4gICgwLCBfaW5kZXgzLmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6ICgwLCBfaW5kZXguZGVmYXVsdCkobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogKDAsIF9pbmRleC5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURheSk7XG4gIHZhciBjdXJyZW50RGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIHJlbWFpbmRlciA9IGRheSAlIDc7XG4gIHZhciBkYXlJbmRleCA9IChyZW1haW5kZXIgKyA3KSAlIDc7XG4gIHZhciBkaWZmID0gKGRheUluZGV4IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gY3VycmVudERheTtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZik7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRVVENJU09EYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzZXRVVENJU09EYXkoZGlydHlEYXRlLCBkaXJ0eURheSkge1xuICAoMCwgX2luZGV4My5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF5ID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eURheSk7XG5cbiAgaWYgKGRheSAlIDcgPT09IDApIHtcbiAgICBkYXkgPSBkYXkgLSA3O1xuICB9XG5cbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGN1cnJlbnREYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgcmVtYWluZGVyID0gZGF5ICUgNztcbiAgdmFyIGRheUluZGV4ID0gKHJlbWFpbmRlciArIDcpICUgNztcbiAgdmFyIGRpZmYgPSAoZGF5SW5kZXggPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSBjdXJyZW50RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsICJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldFVUQ0lTT1dlZWs7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBzZXRVVENJU09XZWVrKGRpcnR5RGF0ZSwgZGlydHlJU09XZWVrKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgdmFyIGlzb1dlZWsgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5SVNPV2Vlayk7XG4gIHZhciBkaWZmID0gKDAsIF9pbmRleDMuZGVmYXVsdCkoZGF0ZSkgLSBpc29XZWVrO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmICogNyk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzZXRVVENXZWVrO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dldFVUQ1dlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuZnVuY3Rpb24gc2V0VVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5V2Vlaywgb3B0aW9ucykge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIHZhciB3ZWVrID0gKDAsIF9pbmRleC5kZWZhdWx0KShkaXJ0eVdlZWspO1xuICB2YXIgZGlmZiA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUsIG9wdGlvbnMpIC0gd2VlaztcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZiAqIDcpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9zZXRVVENEYXkvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvc2V0VVRDSVNPRGF5L2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi8uLi9fbGliL3NldFVUQ0lTT1dlZWsvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uLy4uL19saWIvc2V0VVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vLi4vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIE1JTExJU0VDT05EU19JTl9TRUNPTkQgPSAxMDAwO1xudmFyIG51bWVyaWNQYXR0ZXJucyA9IHtcbiAgbW9udGg6IC9eKDFbMC0yXXwwP1xcZCkvLFxuICAvLyAwIHRvIDEyXG4gIGRhdGU6IC9eKDNbMC0xXXxbMC0yXT9cXGQpLyxcbiAgLy8gMCB0byAzMVxuICBkYXlPZlllYXI6IC9eKDM2WzAtNl18M1swLTVdXFxkfFswLTJdP1xcZD9cXGQpLyxcbiAgLy8gMCB0byAzNjZcbiAgd2VlazogL14oNVswLTNdfFswLTRdP1xcZCkvLFxuICAvLyAwIHRvIDUzXG4gIGhvdXIyM2g6IC9eKDJbMC0zXXxbMC0xXT9cXGQpLyxcbiAgLy8gMCB0byAyM1xuICBob3VyMjRoOiAvXigyWzAtNF18WzAtMV0/XFxkKS8sXG4gIC8vIDAgdG8gMjRcbiAgaG91cjExaDogL14oMVswLTFdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTFcbiAgaG91cjEyaDogL14oMVswLTJdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTJcbiAgbWludXRlOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2Vjb25kOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2luZ2xlRGlnaXQ6IC9eXFxkLyxcbiAgLy8gMCB0byA5XG4gIHR3b0RpZ2l0czogL15cXGR7MSwyfS8sXG4gIC8vIDAgdG8gOTlcbiAgdGhyZWVEaWdpdHM6IC9eXFxkezEsM30vLFxuICAvLyAwIHRvIDk5OVxuICBmb3VyRGlnaXRzOiAvXlxcZHsxLDR9LyxcbiAgLy8gMCB0byA5OTk5XG4gIGFueURpZ2l0c1NpZ25lZDogL14tP1xcZCsvLFxuICBzaW5nbGVEaWdpdFNpZ25lZDogL14tP1xcZC8sXG4gIC8vIDAgdG8gOSwgLTAgdG8gLTlcbiAgdHdvRGlnaXRzU2lnbmVkOiAvXi0/XFxkezEsMn0vLFxuICAvLyAwIHRvIDk5LCAtMCB0byAtOTlcbiAgdGhyZWVEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSwzfS8sXG4gIC8vIDAgdG8gOTk5LCAtMCB0byAtOTk5XG4gIGZvdXJEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSw0fS8gLy8gMCB0byA5OTk5LCAtMCB0byAtOTk5OVxuXG59O1xudmFyIHRpbWV6b25lUGF0dGVybnMgPSB7XG4gIGJhc2ljT3B0aW9uYWxNaW51dGVzOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSk/fFovLFxuICBiYXNpYzogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pfFovLFxuICBiYXNpY09wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pKChcXGR7Mn0pKT98Wi8sXG4gIGV4dGVuZGVkOiAvXihbKy1dKShcXGR7Mn0pOihcXGR7Mn0pfFovLFxuICBleHRlbmRlZE9wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KTooXFxkezJ9KSg6KFxcZHsyfSkpP3xaL1xufTtcblxuZnVuY3Rpb24gcGFyc2VOdW1lcmljUGF0dGVybihwYXR0ZXJuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKHBhdHRlcm4pO1xuXG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHBhcnNlSW50KG1hdGNoUmVzdWx0WzBdLCAxMCk7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlQ2FsbGJhY2sgPyB2YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlLFxuICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHBhdHRlcm4sIHN0cmluZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gocGF0dGVybik7XG5cbiAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIElucHV0IGlzICdaJ1xuXG5cbiAgaWYgKG1hdGNoUmVzdWx0WzBdID09PSAnWicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UoMSlcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNpZ24gPSBtYXRjaFJlc3VsdFsxXSA9PT0gJysnID8gMSA6IC0xO1xuICB2YXIgaG91cnMgPSBtYXRjaFJlc3VsdFsyXSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0WzJdLCAxMCkgOiAwO1xuICB2YXIgbWludXRlcyA9IG1hdGNoUmVzdWx0WzNdID8gcGFyc2VJbnQobWF0Y2hSZXN1bHRbM10sIDEwKSA6IDA7XG4gIHZhciBzZWNvbmRzID0gbWF0Y2hSZXN1bHRbNV0gPyBwYXJzZUludChtYXRjaFJlc3VsdFs1XSwgMTApIDogMDtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogc2lnbiAqIChob3VycyAqIE1JTExJU0VDT05EU19JTl9IT1VSICsgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBzZWNvbmRzICogTUlMTElTRUNPTkRTX0lOX1NFQ09ORCksXG4gICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5hbnlEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTkRpZ2l0cyhuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgc3dpdGNoIChuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNpbmdsZURpZ2l0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnR3b0RpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5mb3VyRGlnaXRzLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG5ldyBSZWdFeHAoJ15cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZU5EaWdpdHNTaWduZWQobiwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zaW5nbGVEaWdpdFNpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50d29EaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudGhyZWVEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZm91ckRpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihuZXcgUmVnRXhwKCdeLT9cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXlQZXJpb2RFbnVtVG9Ib3VycyhlbnVtVmFsdWUpIHtcbiAgc3dpdGNoIChlbnVtVmFsdWUpIHtcbiAgICBjYXNlICdtb3JuaW5nJzpcbiAgICAgIHJldHVybiA0O1xuXG4gICAgY2FzZSAnZXZlbmluZyc6XG4gICAgICByZXR1cm4gMTc7XG5cbiAgICBjYXNlICdwbSc6XG4gICAgY2FzZSAnbm9vbic6XG4gICAgY2FzZSAnYWZ0ZXJub29uJzpcbiAgICAgIHJldHVybiAxMjtcblxuICAgIGNhc2UgJ2FtJzpcbiAgICBjYXNlICdtaWRuaWdodCc6XG4gICAgY2FzZSAnbmlnaHQnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVUd29EaWdpdFllYXIodHdvRGlnaXRZZWFyLCBjdXJyZW50WWVhcikge1xuICB2YXIgaXNDb21tb25FcmEgPSBjdXJyZW50WWVhciA+IDA7IC8vIEFic29sdXRlIG51bWJlciBvZiB0aGUgY3VycmVudCB5ZWFyOlxuICAvLyAxIC0+IDEgQUNcbiAgLy8gMCAtPiAxIEJDXG4gIC8vIC0xIC0+IDIgQkNcblxuICB2YXIgYWJzQ3VycmVudFllYXIgPSBpc0NvbW1vbkVyYSA/IGN1cnJlbnRZZWFyIDogMSAtIGN1cnJlbnRZZWFyO1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmIChhYnNDdXJyZW50WWVhciA8PSA1MCkge1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciB8fCAxMDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJhbmdlRW5kID0gYWJzQ3VycmVudFllYXIgKyA1MDtcbiAgICB2YXIgcmFuZ2VFbmRDZW50dXJ5ID0gTWF0aC5mbG9vcihyYW5nZUVuZCAvIDEwMCkgKiAxMDA7XG4gICAgdmFyIGlzUHJldmlvdXNDZW50dXJ5ID0gdHdvRGlnaXRZZWFyID49IHJhbmdlRW5kICUgMTAwO1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciArIHJhbmdlRW5kQ2VudHVyeSAtIChpc1ByZXZpb3VzQ2VudHVyeSA/IDEwMCA6IDApO1xuICB9XG5cbiAgcmV0dXJuIGlzQ29tbW9uRXJhID8gcmVzdWx0IDogMSAtIHJlc3VsdDtcbn1cblxudmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG52YXIgREFZU19JTl9NT05USF9MRUFQX1lFQVIgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07IC8vIFVzZXIgZm9yIHZhbGlkYXRpb25cblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn1cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBQICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6KiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYHBhcnNlYCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqL1xuXG5cbnZhciBwYXJzZXJzID0ge1xuICAvLyBFcmFcbiAgRzoge1xuICAgIHByaW9yaXR5OiAxNDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gQUQsIEJDXG4gICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICBjYXNlICdHRyc6XG4gICAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEEsIEJcblxuICAgICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGZsYWdzLmVyYSA9IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnUicsICd1JywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFllYXJcbiAgeToge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfUGF0dGVybnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgcHJpb3JpdHk6IDEzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgaXNUd29EaWdpdFllYXI6IHRva2VuID09PSAneXknXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHMoNCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgICAgICBjYXNlICd5byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAneWVhcicsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlLmlzVHdvRGlnaXRZZWFyIHx8IHZhbHVlLnllYXIgPiAwO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIDEpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHllYXIgPSAhKCdlcmEnIGluIGZsYWdzKSB8fCBmbGFncy5lcmEgPT09IDEgPyB2YWx1ZS55ZWFyIDogMSAtIHZhbHVlLnllYXI7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICd1JywgJ3cnLCAnSScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IHtcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICBpc1R3b0RpZ2l0WWVhcjogdG9rZW4gPT09ICdZWSdcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyg0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgICAgIGNhc2UgJ1lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUuaXNUd29EaWdpdFllYXIgfHwgdmFsdWUueWVhciA+IDA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50WWVhciA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICh2YWx1ZS5pc1R3b0RpZ2l0WWVhcikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFR3b0RpZ2l0WWVhciA9IG5vcm1hbGl6ZVR3b0RpZ2l0WWVhcih2YWx1ZS55ZWFyLCBjdXJyZW50WWVhcik7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIobm9ybWFsaXplZFR3b0RpZ2l0WWVhciwgMCwgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gKDAsIF9pbmRleDcuZGVmYXVsdCkoZGF0ZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB5ZWFyID0gISgnZXJhJyBpbiBmbGFncykgfHwgZmxhZ3MuZXJhID09PSAxID8gdmFsdWUueWVhciA6IDEgLSB2YWx1ZS55ZWFyO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuICgwLCBfaW5kZXg3LmRlZmF1bHQpKGRhdGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ1EnLCAncScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiB7XG4gICAgcHJpb3JpdHk6IDEzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gJ1InKSB7XG4gICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQoNCwgc3RyaW5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChfZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBmaXJzdFdlZWtPZlllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgICAgIGZpcnN0V2Vla09mWWVhci5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgNCk7XG4gICAgICBmaXJzdFdlZWtPZlllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gKDAsIF9pbmRleDYuZGVmYXVsdCkoZmlyc3RXZWVrT2ZZZWFyKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydHJywgJ3knLCAnWScsICd1JywgJ1EnLCAncScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXJcbiAgdToge1xuICAgIHByaW9yaXR5OiAxMzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICd1Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKDQsIHN0cmluZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQodG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0cnLCAneScsICdZJywgJ1InLCAndycsICdJJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUToge1xuICAgIHByaW9yaXR5OiAxMjAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgY2FzZSAnUVEnOlxuICAgICAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgoKHZhbHVlIC0gMSkgKiAzLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdNJywgJ0wnLCAndycsICdJJywgJ2QnLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IHtcbiAgICBwcmlvcml0eTogMTIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgICAgY2FzZSAncSc6XG4gICAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgICBjYXNlICdxbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgICBjYXNlICdxcXEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKCh2YWx1ZSAtIDEpICogMywgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnSScsICdkJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTW9udGhcbiAgTToge1xuICAgIHByaW9yaXR5OiAxMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAtIDE7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1vbnRoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cygyLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgICAgY2FzZSAnTW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21vbnRoJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgICBjYXNlICdNTU1NJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAnTCcsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiB7XG4gICAgcHJpb3JpdHk6IDExMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIC0gMTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMubW9udGgsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKDIsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgICBjYXNlICdMbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbW9udGgnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgICBjYXNlICdMTEwnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTE7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnUScsICdNJywgJ3cnLCAnSScsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiB7XG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMud2Vlaywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd3byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA1MztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAoMCwgX2luZGV4Ny5kZWZhdWx0KSgoMCwgX2luZGV4NS5kZWZhdWx0KShkYXRlLCB2YWx1ZSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IHtcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy53ZWVrLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDUzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuICgwLCBfaW5kZXg2LmRlZmF1bHQpKCgwLCBfaW5kZXg0LmRlZmF1bHQpKGRhdGUsIHZhbHVlLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsneScsICdZJywgJ3UnLCAncScsICdRJywgJ00nLCAnTCcsICd3JywgJ2QnLCAnRCcsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHN1YlByaW9yaXR5OiAxLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5kYXRlLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ2RvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKGRhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKTtcbiAgICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgICAgaWYgKGlzTGVhcFllYXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gREFZU19JTl9NT05USF9MRUFQX1lFQVJbbW9udGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gREFZU19JTl9NT05USFttb250aF07XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKHZhbHVlKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdRJywgJ3cnLCAnSScsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgc3ViUHJpb3JpdHk6IDEsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgIGNhc2UgJ0REJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZGF5T2ZZZWFyLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0RvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKGRhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKTtcblxuICAgICAgaWYgKGlzTGVhcFllYXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gMzY2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gMzY1O1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgdmFsdWUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnSScsICdkJywgJ0UnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyBUdWVcbiAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgIGNhc2UgJ0VFJzpcbiAgICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdlbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5JyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnRScsICdpJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzoge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdjbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5JyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnRScsICdpJywgJ2UnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiA3O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAyXG4gICAgICAgIGNhc2UgJ2knOlxuICAgICAgICBjYXNlICdpaSc6XG4gICAgICAgICAgLy8gMDJcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgICAgLy8gMm5kXG5cbiAgICAgICAgY2FzZSAnaW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA3O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgZGF0ZSA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1knLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ0UnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IHtcbiAgICBwcmlvcml0eTogODAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGRheVBlcmlvZEVudW1Ub0hvdXJzKHZhbHVlKSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydiJywgJ0InLCAnSCcsICdLJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodFxuICBiOiB7XG4gICAgcHJpb3JpdHk6IDgwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2InOlxuICAgICAgICBjYXNlICdiYic6XG4gICAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdiYmJiJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENIb3VycyhkYXlQZXJpb2RFbnVtVG9Ib3Vycyh2YWx1ZSksIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdCJywgJ0gnLCAnSycsICdrJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjoge1xuICAgIHByaW9yaXR5OiA4MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdCJzpcbiAgICAgICAgY2FzZSAnQkInOlxuICAgICAgICBjYXNlICdCQkInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnQkJCQic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnYicsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMTJoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ2hvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDEyO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBpc1BNID0gZGF0ZS5nZXRVVENIb3VycygpID49IDEyO1xuXG4gICAgICBpZiAoaXNQTSAmJiB2YWx1ZSA8IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUgKyAxMiwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1BNICYmIHZhbHVlID09PSAxMikge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0gnLCAnSycsICdrJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IHtcbiAgICBwcmlvcml0eTogNzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmhvdXIyM2gsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnSG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMjM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydhJywgJ2InLCAnaCcsICdLJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdLJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjExaCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdLbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAxMTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgaXNQTSA9IGRhdGUuZ2V0VVRDSG91cnMoKSA+PSAxMjtcblxuICAgICAgaWYgKGlzUE0gJiYgdmFsdWUgPCAxMikge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlICsgMTIsIDAsIDAsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnYicsICdoJywgJ0gnLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2snOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMjRoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ2tvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDI0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBob3VycyA9IHZhbHVlIDw9IDI0ID8gdmFsdWUgJSAyNCA6IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENIb3Vycyhob3VycywgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydhJywgJ2InLCAnaCcsICdIJywgJ0snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IHtcbiAgICBwcmlvcml0eTogNjAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1pbnV0ZSwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdtbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTWludXRlcyh2YWx1ZSwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBTZWNvbmRcbiAgczoge1xuICAgIHByaW9yaXR5OiA1MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuc2Vjb25kLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3NvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNTk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENTZWNvbmRzKHZhbHVlLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiB7XG4gICAgcHJpb3JpdHk6IDMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsdWUgKiBNYXRoLnBvdygxMCwgLXRva2VuLmxlbmd0aCArIDMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTWlsbGlzZWNvbmRzKHZhbHVlKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gKzAwOjAwIGlzIGAnWidgKVxuICBYOiB7XG4gICAgcHJpb3JpdHk6IDEwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsTWludXRlcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbFNlY29uZHMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWCc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWQsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBpZiAoZmxhZ3MudGltZXN0YW1wSXNTZXQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSAtIHZhbHVlKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnLCAneCddXG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMSlcbiAgeDoge1xuICAgIHByaW9yaXR5OiAxMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbE1pbnV0ZXMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZE9wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHgnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZSk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJywgJ1gnXVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiB7XG4gICAgcHJpb3JpdHk6IDQwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCBfdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiBwYXJzZUFueURpZ2l0c1NpZ25lZChzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRlKHZhbHVlICogMTAwMCksIHtcbiAgICAgICAgdGltZXN0YW1wSXNTZXQ6IHRydWVcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiAnKidcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiB7XG4gICAgcHJpb3JpdHk6IDIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCBfdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiBwYXJzZUFueURpZ2l0c1NpZ25lZChzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRlKHZhbHVlKSwge1xuICAgICAgICB0aW1lc3RhbXBJc1NldDogdHJ1ZVxuICAgICAgfV07XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6ICcqJ1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gcGFyc2VycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2U7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL2Fzc2lnbi9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg3ID0gcmVxdWlyZShcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCIpO1xuXG52YXIgX2luZGV4OCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19saWIvcGFyc2Vycy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgxMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFRJTUVaT05FX1VOSVRfUFJJT1JJVFkgPSAxMDsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIG5vdFdoaXRlc3BhY2VSZWdFeHAgPSAvXFxTLztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIHBhcnNlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFBhcnNlIHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkYXRlIHBhcnNlZCBmcm9tIHN0cmluZyB1c2luZyB0aGUgZ2l2ZW4gZm9ybWF0IHN0cmluZy5cbiAqXG4gKiA+IFx1MjZBMFx1RkUwRiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyBpbiB0aGUgZm9ybWF0IHN0cmluZyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqXG4gKiBGb3JtYXQgb2YgdGhlIGZvcm1hdCBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDUgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBOb3QgYWxsIHRva2VucyBhcmUgY29tcGF0aWJsZS4gQ29tYmluYXRpb25zIHRoYXQgZG9uJ3QgbWFrZSBzZW5zZSBvciBjb3VsZCBsZWFkIHRvIGJ1Z3MgYXJlIHByb2hpYml0ZWRcbiAqIGFuZCB3aWxsIHRocm93IGBSYW5nZUVycm9yYC4gRm9yIGV4YW1wbGUgdXNhZ2Ugb2YgMjQtaG91ciBmb3JtYXQgdG9rZW4gd2l0aCBBTS9QTSB0b2tlbiB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwYXJzZSgnMjMgQU0nLCAnSEggYScsIG5ldyBEYXRlKCkpXG4gKiAvLz0+IFJhbmdlRXJyb3I6IFRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgSEhgIGFuZCBgYWAgYXQgdGhlIHNhbWUgdGltZVxuICogYGBgXG4gKlxuICogU2VlIHRoZSBjb21wYXRpYmlsaXR5IHRhYmxlOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2UU9QVTN4VWhwbGxsNmR5b01tVlVYSEtsXzhDUkRzNl91ZUxtZXgzU29xd2h1b2xrdU4zTzA1bDRycXg1aDFkS1g4ZWI0NlVsLUNDU3JxL3B1Ymh0bWw/Z2lkPTAmc2luZ2xlPXRydWVcbiAqXG4gKiBBY2NlcHRlZCBmb3JtYXQgc3RyaW5nIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxQcmlvcnwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAxNDAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCAxMzAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDk5OTkgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCAxMzAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDkwMDAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0LDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQsNiAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCAxMzAgfCBSICAgICAgIHwgLTQzLCAxLCAxOTAwLCAyMDE3LCA5OTk5LCAtOTk5OSAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlIgICAgICB8IC00MywgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDEsIDEyMywgOTk5LCAtOTk5ICAgICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDEsIDIwMTcsIDk5OTksIC05OTk5ICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCw1IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IDEzMCB8IHUgICAgICAgfCAtNDMsIDEsIDE5MDAsIDIwMTcsIDk5OTksIC05OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgOTksIC05OSAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTIzLCA5OTksIC05OTkgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMjAxNywgOTk5OSwgLTk5OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgMTIwIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgMTIwIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgMTEwIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgMTEwIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgMTAwIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgMTAwIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCAgOTAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgIDkwIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8IDUgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8ICA5MCB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCAgOTAgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDgwIHwgYS4uYWFhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgIDgwIHwgYi4uYmJiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgIDgwIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDYwIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDUwIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgIDQwIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCAgMzAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgIDIwIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCAgMTAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8ICAxMCB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgIE5BIHwgUCAgICAgICB8IDA1LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQICAgICAgfCBNYXkgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFAgICAgIHwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUCAgICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICB8IDIsNSw4IHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8ICBOQSB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgIE5BIHwgUHAgICAgICB8IDA1LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQcHAgICAgfCBNYXkgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBwcCAgIHwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUHBwICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICB8IDIsNSw4IHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXIuXG4gKiAgICBJbiBgZm9ybWF0YCBmdW5jdGlvbiwgdGhleSB3aWxsIHByb2R1Y2UgZGlmZmVyZW50IHJlc3VsdDpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogICAgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCBib3RoIGZvcm1hdHRpbmcgYW5kIHN0YW5kLWFsb25lIHVuaXRzIGludGVyY2hhbmdhYmx5LlxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZTpcbiAqICAgIC0gZm9yIG51bWVyaWNhbCB1bml0cyAoYHl5eXl5eXl5YCkgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCBhIG51bWJlclxuICogICAgICBhcyB3aWRlIGFzIHRoZSBzZXF1ZW5jZVxuICogICAgLSBmb3IgdGV4dCB1bml0cyAoYE1NTU1NTU1NYCkgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCB0aGUgd2lkZXN0IHZhcmlhdGlvbiBvZiB0aGUgdW5pdC5cbiAqICAgICAgVGhlc2UgdmFyaWF0aW9ucyBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAzLiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA0LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIHdpbGwgdHJ5IHRvIGd1ZXNzIHRoZSBjZW50dXJ5IG9mIHR3byBkaWdpdCB5ZWFyIGJ5IHByb3hpbWl0eSB3aXRoIGByZWZlcmVuY2VEYXRlYDpcbiAqXG4gKiAgICBgcGFyc2UoJzUwJywgJ3l5JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gU2F0IEphbiAwMSAyMDUwIDAwOjAwOjAwYFxuICpcbiAqICAgIGBwYXJzZSgnNzUnLCAneXknLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBXZWQgSmFuIDAxIDE5NzUgMDA6MDA6MDBgXG4gKlxuICogICAgd2hpbGUgYHV1YCB3aWxsIGp1c3QgYXNzaWduIHRoZSB5ZWFyIGFzIGlzOlxuICpcbiAqICAgIGBwYXJzZSgnNTAnLCAndXUnLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBTYXQgSmFuIDAxIDAwNTAgMDA6MDA6MDBgXG4gKlxuICogICAgYHBhcnNlKCc3NScsICd1dScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFR1ZSBKYW4gMDEgMDA3NSAwMDowMDowMGBcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtzZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9zZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbc2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3Mvc2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA1LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDYuIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDcuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGhlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA4LiBgUCtgIHRva2VucyBkbyBub3QgaGF2ZSBhIGRlZmluZWQgcHJpb3JpdHkgc2luY2UgdGhleSBhcmUgbWVyZWx5IGFsaWFzZXMgdG8gb3RoZXIgdG9rZW5zIGJhc2VkXG4gKiAgICBvbiB0aGUgZ2l2ZW4gbG9jYWxlLlxuICpcbiAqICAgIHVzaW5nIGBlbi1VU2AgbG9jYWxlOiBgUGAgPT4gYE1NL2RkL3l5eXlgXG4gKiAgICB1c2luZyBgZW4tVVNgIGxvY2FsZTogYHBgID0+IGBoaDptbSBhYFxuICogICAgdXNpbmcgYHB0LUJSYCBsb2NhbGU6IGBQYCA9PiBgZGQvTU0veXl5eWBcbiAqICAgIHVzaW5nIGBwdC1CUmAgbG9jYWxlOiBgcGAgPT4gYEhIOm1tYFxuICpcbiAqIFZhbHVlcyB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBkYXRlIGluIHRoZSBkZXNjZW5kaW5nIG9yZGVyIG9mIGl0cyB1bml0J3MgcHJpb3JpdHkuXG4gKiBVbml0cyBvZiBhbiBlcXVhbCBwcmlvcml0eSBvdmVyd3JpdGUgZWFjaCBvdGhlciBpbiB0aGUgb3JkZXIgb2YgYXBwZWFyYW5jZS5cbiAqXG4gKiBJZiBubyB2YWx1ZXMgb2YgaGlnaGVyIHByaW9yaXR5IGFyZSBwYXJzZWQgKGUuZy4gd2hlbiBwYXJzaW5nIHN0cmluZyAnSmFudWFyeSAxc3QnIHdpdGhvdXQgYSB5ZWFyKSxcbiAqIHRoZSB2YWx1ZXMgd2lsbCBiZSB0YWtlbiBmcm9tIDNyZCBhcmd1bWVudCBgcmVmZXJlbmNlRGF0ZWAgd2hpY2ggd29ya3MgYXMgYSBjb250ZXh0IG9mIHBhcnNpbmcuXG4gKlxuICogYHJlZmVyZW5jZURhdGVgIG11c3QgYmUgcGFzc2VkIGZvciBjb3JyZWN0IHdvcmsgb2YgdGhlIGZ1bmN0aW9uLlxuICogSWYgeW91J3JlIG5vdCBzdXJlIHdoaWNoIGByZWZlcmVuY2VEYXRlYCB0byBzdXBwbHksIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBEYXRlOlxuICogYHBhcnNlKCcwMi8xMS8yMDE0JywgJ01NL2RkL3l5eXknLCBuZXcgRGF0ZSgpKWBcbiAqIEluIHRoaXMgY2FzZSBwYXJzaW5nIHdpbGwgYmUgZG9uZSBpbiB0aGUgY29udGV4dCBvZiB0aGUgY3VycmVudCBkYXRlLlxuICogSWYgYHJlZmVyZW5jZURhdGVgIGlzIGBJbnZhbGlkIERhdGVgIG9yIGEgdmFsdWUgbm90IGNvbnZlcnRpYmxlIHRvIHZhbGlkIGBEYXRlYCxcbiAqIHRoZW4gYEludmFsaWQgRGF0ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiBJZiBgZm9ybWF0U3RyaW5nYCBtYXRjaGVzIHdpdGggYGRhdGVTdHJpbmdgIGJ1dCBkb2VzIG5vdCBwcm92aWRlcyB0b2tlbnMsIGByZWZlcmVuY2VEYXRlYCB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIElmIHBhcnNpbmcgZmFpbGVkLCBgSW52YWxpZCBEYXRlYCB3aWxsIGJlIHJldHVybmVkLlxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gT2xkIGBwYXJzZWAgd2FzIHJlbmFtZWQgdG8gYHRvRGF0ZWAuXG4gKiAgIE5vdyBgcGFyc2VgIGlzIGEgbmV3IGZ1bmN0aW9uIHdoaWNoIHBhcnNlcyBhIHN0cmluZyB1c2luZyBhIHByb3ZpZGVkIGZvcm1hdC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBwYXJzZSgnMjAxNi0wMS0wMScpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkICh0b0RhdGUgbm8gbG9uZ2VyIGFjY2VwdHMgYSBzdHJpbmcpXG4gKiAgIHRvRGF0ZSgxMzkyMDk4NDMwMDAwKSAvLyBVbml4IHRvIHRpbWVzdGFtcFxuICogICB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKSAvLyBDbG9uaW5nIHRoZSBkYXRlXG4gKiAgIHBhcnNlKCcyMDE2LTAxLTAxJywgJ3l5eXktTU0tZGQnLCBuZXcgRGF0ZSgpKVxuICogICBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVN0cmluZyAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRTdHJpbmcgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gcmVmZXJlbmNlRGF0ZSAtIGRlZmluZXMgdmFsdWVzIG1pc3NpbmcgZnJvbSB0aGUgcGFyc2VkIGRhdGVTdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHsxfDJ8M3w0fDV8Nnw3fSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhclxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMyBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBtYXRjaGAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUGFyc2UgMTEgRmVicnVhcnkgMjAxNCBmcm9tIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcwMi8xMS8yMDE0JywgJ01NL2RkL3l5eXknLCBuZXcgRGF0ZSgpKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUGFyc2UgMjh0aCBvZiBGZWJydWFyeSBpbiBFc3BlcmFudG8gbG9jYWxlIGluIHRoZSBjb250ZXh0IG9mIDIwMTAgeWVhcjpcbiAqIGltcG9ydCBlbyBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gcGFyc2UoJzI4LWEgZGUgZmVicnVhcm8nLCBcImRvICdkZScgTU1NTVwiLCBuZXcgRGF0ZSgyMDEwLCAwLCAxKSwge1xuICogICBsb2NhbGU6IGVvXG4gKiB9KVxuICogLy89PiBTdW4gRmViIDI4IDIwMTAgMDA6MDA6MDBcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShkaXJ0eURhdGVTdHJpbmcsIGRpcnR5Rm9ybWF0U3RyaW5nLCBkaXJ0eVJlZmVyZW5jZURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4MTAuZGVmYXVsdCkoMywgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVTdHJpbmcgPSBTdHJpbmcoZGlydHlEYXRlU3RyaW5nKTtcbiAgdmFyIGZvcm1hdFN0cmluZyA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cmluZyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgX2luZGV4LmRlZmF1bHQ7XG5cbiAgaWYgKCFsb2NhbGUubWF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBtYXRjaCBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiAoMCwgX2luZGV4OC5kZWZhdWx0KShsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiAoMCwgX2luZGV4OC5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiAoMCwgX2luZGV4OC5kZWZhdWx0KShsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiAoMCwgX2luZGV4OC5kZWZhdWx0KShvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKGZvcm1hdFN0cmluZyA9PT0gJycpIHtcbiAgICBpZiAoZGF0ZVN0cmluZyA9PT0gJycpIHtcbiAgICAgIHJldHVybiAoMCwgX2luZGV4My5kZWZhdWx0KShkaXJ0eVJlZmVyZW5jZURhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3ViRm5PcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlIC8vIElmIHRpbWV6b25lIGlzbid0IHNwZWNpZmllZCwgaXQgd2lsbCBiZSBzZXQgdG8gdGhlIHN5c3RlbSB0aW1lem9uZVxuXG4gIH07XG4gIHZhciBzZXR0ZXJzID0gW3tcbiAgICBwcmlvcml0eTogVElNRVpPTkVfVU5JVF9QUklPUklUWSxcbiAgICBzdWJQcmlvcml0eTogLTEsXG4gICAgc2V0OiBkYXRlVG9TeXN0ZW1UaW1lem9uZSxcbiAgICBpbmRleDogMFxuICB9XTtcbiAgdmFyIGk7XG4gIHZhciB0b2tlbnMgPSBmb3JtYXRTdHJpbmcubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBfaW5kZXg1LmRlZmF1bHRbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgc3ViRm5PcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKTtcbiAgdmFyIHVzZWRUb2tlbnMgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiAoMCwgX2luZGV4Ny5pc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4pKHRva2VuKSkge1xuICAgICAgKDAsIF9pbmRleDcudGhyb3dQcm90ZWN0ZWRFcnJvcikodG9rZW4sIGZvcm1hdFN0cmluZywgZGlydHlEYXRlU3RyaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiAoMCwgX2luZGV4Ny5pc1Byb3RlY3RlZERheU9mWWVhclRva2VuKSh0b2tlbikpIHtcbiAgICAgICgwLCBfaW5kZXg3LnRocm93UHJvdGVjdGVkRXJyb3IpKHRva2VuLCBmb3JtYXRTdHJpbmcsIGRpcnR5RGF0ZVN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gdG9rZW5bMF07XG4gICAgdmFyIHBhcnNlciA9IF9pbmRleDkuZGVmYXVsdFtmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAocGFyc2VyKSB7XG4gICAgICB2YXIgaW5jb21wYXRpYmxlVG9rZW5zID0gcGFyc2VyLmluY29tcGF0aWJsZVRva2VucztcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5jb21wYXRpYmxlVG9rZW5zKSkge1xuICAgICAgICB2YXIgaW5jb21wYXRpYmxlVG9rZW4gPSB2b2lkIDA7XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHVzZWRUb2tlbnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgdmFyIHVzZWRUb2tlbiA9IHVzZWRUb2tlbnNbX2ldLnRva2VuO1xuXG4gICAgICAgICAgaWYgKGluY29tcGF0aWJsZVRva2Vucy5pbmRleE9mKHVzZWRUb2tlbikgIT09IC0xIHx8IHVzZWRUb2tlbiA9PT0gZmlyc3RDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIGluY29tcGF0aWJsZVRva2VuID0gdXNlZFRva2Vuc1tfaV07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5jb21wYXRpYmxlVG9rZW4pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgXCIuY29uY2F0KGluY29tcGF0aWJsZVRva2VuLmZ1bGxUb2tlbiwgXCJgIGFuZCBgXCIpLmNvbmNhdCh0b2tlbiwgXCJgIGF0IHRoZSBzYW1lIHRpbWVcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlci5pbmNvbXBhdGlibGVUb2tlbnMgPT09ICcqJyAmJiB1c2VkVG9rZW5zLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgXCIuY29uY2F0KHRva2VuLCBcImAgYW5kIGFueSBvdGhlciB0b2tlbiBhdCB0aGUgc2FtZSB0aW1lXCIpKTtcbiAgICAgIH1cblxuICAgICAgdXNlZFRva2Vucy5wdXNoKHtcbiAgICAgICAgdG9rZW46IGZpcnN0Q2hhcmFjdGVyLFxuICAgICAgICBmdWxsVG9rZW46IHRva2VuXG4gICAgICB9KTtcbiAgICAgIHZhciBwYXJzZVJlc3VsdCA9IHBhcnNlci5wYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbG9jYWxlLm1hdGNoLCBzdWJGbk9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuXG4gICAgICBzZXR0ZXJzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogcGFyc2VyLnByaW9yaXR5LFxuICAgICAgICBzdWJQcmlvcml0eTogcGFyc2VyLnN1YlByaW9yaXR5IHx8IDAsXG4gICAgICAgIHNldDogcGFyc2VyLnNldCxcbiAgICAgICAgdmFsaWRhdGU6IHBhcnNlci52YWxpZGF0ZSxcbiAgICAgICAgdmFsdWU6IHBhcnNlUmVzdWx0LnZhbHVlLFxuICAgICAgICBpbmRleDogc2V0dGVycy5sZW5ndGhcbiAgICAgIH0pO1xuICAgICAgZGF0ZVN0cmluZyA9IHBhcnNlUmVzdWx0LnJlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICAgIH0gLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuXG5cbiAgICAgIGlmICh0b2tlbiA9PT0gXCInJ1wiKSB7XG4gICAgICAgIHRva2VuID0gXCInXCI7XG4gICAgICB9IGVsc2UgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgICB0b2tlbiA9IGNsZWFuRXNjYXBlZFN0cmluZyh0b2tlbik7XG4gICAgICB9IC8vIEN1dCB0b2tlbiBmcm9tIHN0cmluZywgb3IsIGlmIHN0cmluZyBkb2Vzbid0IG1hdGNoIHRoZSB0b2tlbiwgcmV0dXJuIEludmFsaWQgRGF0ZVxuXG5cbiAgICAgIGlmIChkYXRlU3RyaW5nLmluZGV4T2YodG9rZW4pID09PSAwKSB7XG4gICAgICAgIGRhdGVTdHJpbmcgPSBkYXRlU3RyaW5nLnNsaWNlKHRva2VuLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQ2hlY2sgaWYgdGhlIHJlbWFpbmluZyBpbnB1dCBjb250YWlucyBzb21ldGhpbmcgb3RoZXIgdGhhbiB3aGl0ZXNwYWNlXG5cblxuICBpZiAoZGF0ZVN0cmluZy5sZW5ndGggPiAwICYmIG5vdFdoaXRlc3BhY2VSZWdFeHAudGVzdChkYXRlU3RyaW5nKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIHVuaXF1ZVByaW9yaXR5U2V0dGVycyA9IHNldHRlcnMubWFwKGZ1bmN0aW9uIChzZXR0ZXIpIHtcbiAgICByZXR1cm4gc2V0dGVyLnByaW9yaXR5O1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHByaW9yaXR5LCBpbmRleCwgYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkuaW5kZXhPZihwcmlvcml0eSkgPT09IGluZGV4O1xuICB9KS5tYXAoZnVuY3Rpb24gKHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIHNldHRlcnMuZmlsdGVyKGZ1bmN0aW9uIChzZXR0ZXIpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIucHJpb3JpdHkgPT09IHByaW9yaXR5O1xuICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBiLnN1YlByaW9yaXR5IC0gYS5zdWJQcmlvcml0eTtcbiAgICB9KTtcbiAgfSkubWFwKGZ1bmN0aW9uIChzZXR0ZXJBcnJheSkge1xuICAgIHJldHVybiBzZXR0ZXJBcnJheVswXTtcbiAgfSk7XG4gIHZhciBkYXRlID0gKDAsIF9pbmRleDMuZGVmYXVsdCkoZGlydHlSZWZlcmVuY2VEYXRlKTtcblxuICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzdcblxuXG4gIHZhciB1dGNEYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgKDAsIF9pbmRleDYuZGVmYXVsdCkoZGF0ZSkpO1xuICB2YXIgZmxhZ3MgPSB7fTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdW5pcXVlUHJpb3JpdHlTZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNldHRlciA9IHVuaXF1ZVByaW9yaXR5U2V0dGVyc1tpXTtcblxuICAgIGlmIChzZXR0ZXIudmFsaWRhdGUgJiYgIXNldHRlci52YWxpZGF0ZSh1dGNEYXRlLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBzZXR0ZXIuc2V0KHV0Y0RhdGUsIGZsYWdzLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucyk7IC8vIFJlc3VsdCBpcyB0dXBsZSAoZGF0ZSwgZmxhZ3MpXG5cbiAgICBpZiAocmVzdWx0WzBdKSB7XG4gICAgICB1dGNEYXRlID0gcmVzdWx0WzBdO1xuICAgICAgKDAsIF9pbmRleDQuZGVmYXVsdCkoZmxhZ3MsIHJlc3VsdFsxXSk7IC8vIFJlc3VsdCBpcyBkYXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHV0Y0RhdGUgPSByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHV0Y0RhdGU7XG59XG5cbmZ1bmN0aW9uIGRhdGVUb1N5c3RlbVRpbWV6b25lKGRhdGUsIGZsYWdzKSB7XG4gIGlmIChmbGFncy50aW1lc3RhbXBJc1NldCkge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgdmFyIGNvbnZlcnRlZERhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgY29udmVydGVkRGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCkpO1xuICBjb252ZXJ0ZWREYXRlLnNldEhvdXJzKGRhdGUuZ2V0VVRDSG91cnMoKSwgZGF0ZS5nZXRVVENNaW51dGVzKCksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLCBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgcmV0dXJuIGNvbnZlcnRlZERhdGU7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZUlTTztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIERFRkFVTFRfQURESVRJT05BTF9ESUdJVFMgPSAyO1xudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBwcmV2aW91cyBgcGFyc2VgIGltcGxlbWVudGF0aW9uIHdhcyByZW5hbWVkIHRvIGBwYXJzZUlTT2AuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBwYXJzZUlTTygnMjAxNi0wMS0wMScpXG4gKiAgIGBgYFxuICpcbiAqIC0gYHBhcnNlSVNPYCBub3cgdmFsaWRhdGVzIHNlcGFyYXRlIGRhdGUgYW5kIHRpbWUgdmFsdWVzIGluIElTTy04NjAxIHN0cmluZ3NcbiAqICAgYW5kIHJldHVybnMgYEludmFsaWQgRGF0ZWAgaWYgdGhlIGRhdGUgaXMgaW52YWxpZC5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgcGFyc2VJU08oJzIwMTgtMTMtMzInKVxuICogICAvLz0+IEludmFsaWQgRGF0ZVxuICogICBgYGBcbiAqXG4gKiAtIGBwYXJzZUlTT2Agbm93IGRvZXNuJ3QgZmFsbCBiYWNrIHRvIGBuZXcgRGF0ZWAgY29uc3RydWN0b3JcbiAqICAgaWYgaXQgZmFpbHMgdG8gcGFyc2UgYSBzdHJpbmcgYXJndW1lbnQuIEluc3RlYWQsIGl0IHJldHVybnMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUlTTyhhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gICgwLCBfaW5kZXgyLmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgYWRkaXRpb25hbERpZ2l0cyA9IG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cyA9PSBudWxsID8gREVGQVVMVF9BRERJVElPTkFMX0RJR0lUUyA6ICgwLCBfaW5kZXguZGVmYXVsdCkob3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzKTtcblxuICBpZiAoYWRkaXRpb25hbERpZ2l0cyAhPT0gMiAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAxICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYWRkaXRpb25hbERpZ2l0cyBtdXN0IGJlIDAsIDEgb3IgMicpO1xuICB9XG5cbiAgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBkYXRlO1xuXG4gIGlmIChkYXRlU3RyaW5ncy5kYXRlKSB7XG4gICAgdmFyIHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKTtcbiAgICBkYXRlID0gcGFyc2VEYXRlKHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZywgcGFyc2VZZWFyUmVzdWx0LnllYXIpO1xuICB9XG5cbiAgaWYgKGlzTmFOKGRhdGUpIHx8ICFkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkgfHwgdGltZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG5cbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTsgLy8ganMgcGFyc2VkIHN0cmluZyBhc3N1bWluZyBpdCdzIGluIFVUQyB0aW1lem9uZVxuICAgIC8vIGJ1dCB3ZSBuZWVkIGl0IHRvIGJlIHBhcnNlZCBpbiBvdXIgdGltZXpvbmVcbiAgICAvLyBzbyB3ZSB1c2UgdXRjIHZhbHVlcyB0byBidWlsZCBkYXRlIGluIG91ciB0aW1lem9uZS5cbiAgICAvLyBZZWFyIHZhbHVlcyBmcm9tIDAgdG8gOTkgbWFwIHRvIHRoZSB5ZWFycyAxOTAwIHRvIDE5OTlcbiAgICAvLyBzbyBzZXQgeWVhciBleHBsaWNpdGx5IHdpdGggc2V0RnVsbFllYXIuXG5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoZGlydHlEYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRpcnR5RGF0ZS5nZXRVVENNb250aCgpLCBkaXJ0eURhdGUuZ2V0VVRDRGF0ZSgpLCBkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXN1bHQuc2V0RnVsbFllYXIoZGlydHlEYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9O1xuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgdmFyIHRpbWVTdHJpbmc7IC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cblxuICBpZiAoLzovLnRlc3QoYXJyYXlbMF0pKSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IG51bGw7XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdO1xuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXTtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMV07XG5cbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIpWzBdO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpO1xuXG4gICAgaWYgKHRva2VuKSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZy5yZXBsYWNlKHRva2VuWzFdLCAnJyk7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlU3RyaW5ncy50aW1lID0gdGltZVN0cmluZztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oPzooXFxcXGR7NH18WystXVxcXFxkeycgKyAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pfChcXFxcZHsyfXxbKy1dXFxcXGR7JyArICgyICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSkkKScpO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKHJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfTtcbiAgdmFyIHllYXIgPSBjYXB0dXJlc1sxXSAmJiBwYXJzZUludChjYXB0dXJlc1sxXSk7XG4gIHZhciBjZW50dXJ5ID0gY2FwdHVyZXNbMl0gJiYgcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2goZGF0ZVJlZ2V4KTsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHN0cmluZ1xuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBudWxsO1xuICB2YXIgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIHZhciBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1syXSkgLSAxO1xuICB2YXIgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIHZhciB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIHZhciBkYXlPZldlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzVdKSAtIDE7XG5cbiAgaWYgKGlzV2Vla0RhdGUpIHtcbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheU9mSVNPV2Vla1llYXIoeWVhciwgd2VlaywgZGF5T2ZXZWVrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkgfHwgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VJbnQodmFsdWUpIDogMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgdmFyIGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbnVsbDsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIHNlY29uZHMgKiAxMDAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJywnLCAnLicpKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWV6b25lKHRpbWV6b25lU3RyaW5nKSB7XG4gIGlmICh0aW1lem9uZVN0cmluZyA9PT0gJ1onKSByZXR1cm4gMDtcbiAgdmFyIGNhcHR1cmVzID0gdGltZXpvbmVTdHJpbmcubWF0Y2godGltZXpvbmVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiAwO1xuICB2YXIgc2lnbiA9IGNhcHR1cmVzWzFdID09PSAnKycgPyAtMSA6IDE7XG4gIHZhciBob3VycyA9IHBhcnNlSW50KGNhcHR1cmVzWzJdKTtcbiAgdmFyIG1pbnV0ZXMgPSBjYXB0dXJlc1szXSAmJiBwYXJzZUludChjYXB0dXJlc1szXSkgfHwgMDtcblxuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBzaWduICogKGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSk7XG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgdmFyIGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0gLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbi8vIEZlYnJ1YXJ5IGlzIG51bGwgdG8gaGFuZGxlIHRoZSBsZWFwIHllYXIgKHVzaW5nIHx8KVxuXG5cbnZhciBkYXlzSW5Nb250aHMgPSBbMzEsIG51bGwsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gIHJldHVybiBtb250aCA+PSAwICYmIG1vbnRoIDw9IDExICYmIGRhdGUgPj0gMSAmJiBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpIHtcbiAgcmV0dXJuIGRheU9mWWVhciA+PSAxICYmIGRheU9mWWVhciA8PSAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMzY2IDogMzY1KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVXZWVrRGF0ZShfeWVhciwgd2VlaywgZGF5KSB7XG4gIHJldHVybiB3ZWVrID49IDEgJiYgd2VlayA8PSA1MyAmJiBkYXkgPj0gMCAmJiBkYXkgPD0gNjtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gIGlmIChob3VycyA9PT0gMjQpIHtcbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCAmJiBzZWNvbmRzID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHMgPj0gMCAmJiBzZWNvbmRzIDwgNjAgJiYgbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MCAmJiBob3VycyA+PSAwICYmIGhvdXJzIDwgMjU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwgIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciByZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBzb21lIERPTSBub2RlIGlzIG91ciBDb21wb25lbnQncyBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFNWRyA8dXNlLz4gZWxlbWVudHMgZG8gbm90IHRlY2huaWNhbGx5IHJlc2lkZSBpbiB0aGUgcmVuZGVyZWQgRE9NLCBzb1xuICAvLyB0aGV5IGRvIG5vdCBoYXZlIGNsYXNzTGlzdCBkaXJlY3RseSwgYnV0IHRoZXkgb2ZmZXIgYSBsaW5rIHRvIHRoZWlyXG4gIC8vIGNvcnJlc3BvbmRpbmcgZWxlbWVudCwgd2hpY2ggY2FuIGhhdmUgY2xhc3NMaXN0LiBUaGlzIGV4dHJhIGNoZWNrIGlzIGZvclxuICAvLyB0aGF0IGNhc2UuXG4gIC8vIFNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvc3RydWN0Lmh0bWwjSW50ZXJmYWNlU1ZHVXNlRWxlbWVudFxuICAvLyBEaXNjdXNzaW9uOiBodHRwczovL2dpdGh1Yi5jb20vUG9tYXgvcmVhY3Qtb25jbGlja291dHNpZGUvcHVsbC8xN1xuXG5cbiAgaWYgKGN1cnJlbnQuY29ycmVzcG9uZGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gY3VycmVudC5jb3JyZXNwb25kaW5nRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoaWdub3JlQ2xhc3MpO1xuICB9XG5cbiAgcmV0dXJuIGN1cnJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGlnbm9yZUNsYXNzKTtcbn1cbi8qKlxuICogVHJ5IHRvIGZpbmQgb3VyIG5vZGUgaW4gYSBoaWVyYXJjaHkgb2Ygbm9kZXMsIHJldHVybmluZyB0aGUgZG9jdW1lbnRcbiAqIG5vZGUgYXMgaGlnaGVzdCBub2RlIGlmIG91ciBub2RlIGlzIG5vdCBmb3VuZCBpbiB0aGUgcGF0aCB1cC5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykge1xuICBpZiAoY3VycmVudCA9PT0gY29tcG9uZW50Tm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIHNvdXJjZT1sb2NhbCB0aGVuIHRoaXMgZXZlbnQgY2FtZSBmcm9tICdzb21ld2hlcmUnXG4gIC8vIGluc2lkZSBhbmQgc2hvdWxkIGJlIGlnbm9yZWQuIFdlIGNvdWxkIGhhbmRsZSB0aGlzIHdpdGhcbiAgLy8gYSBsYXllcmVkIGFwcHJvYWNoLCB0b28sIGJ1dCB0aGF0IHJlcXVpcmVzIGdvaW5nIGJhY2sgdG9cbiAgLy8gdGhpbmtpbmcgaW4gdGVybXMgb2YgRG9tIG5vZGUgbmVzdGluZywgcnVubmluZyBjb3VudGVyXG4gIC8vIHRvIFJlYWN0J3MgJ3lvdSBzaG91bGRuJ3QgY2FyZSBhYm91dCB0aGUgRE9NJyBwaGlsb3NvcGh5LlxuXG5cbiAgd2hpbGUgKGN1cnJlbnQucGFyZW50Tm9kZSkge1xuICAgIGlmIChpc05vZGVGb3VuZChjdXJyZW50LCBjb21wb25lbnROb2RlLCBpZ25vcmVDbGFzcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gY3VycmVudDtcbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc2Nyb2xsYmFyIHdhcyBjbGlja2VkXG4gKi9cblxuZnVuY3Rpb24gY2xpY2tlZFNjcm9sbGJhcihldnQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSBldnQuY2xpZW50WCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDw9IGV2dC5jbGllbnRZO1xufVxuXG4vLyBpZGVhbGx5IHdpbGwgZ2V0IHJlcGxhY2VkIHdpdGggZXh0ZXJuYWwgZGVwXG4vLyB3aGVuIHJhZnJleC9kZXRlY3QtcGFzc2l2ZS1ldmVudHMjNCBhbmQgcmFmcmV4L2RldGVjdC1wYXNzaXZlLWV2ZW50cyM1IGdldCBtZXJnZWQgaW5cbnZhciB0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCA9IGZ1bmN0aW9uIHRlc3RQYXNzaXZlRXZlbnRTdXBwb3J0KCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhc3NpdmUgPSBmYWxzZTtcbiAgdmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcGFzc2l2ZSA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVFdmVudFN1cHBvcnQnLCBub29wLCBvcHRpb25zKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0Jywgbm9vcCwgb3B0aW9ucyk7XG4gIHJldHVybiBwYXNzaXZlO1xufTtcblxuZnVuY3Rpb24gYXV0b0luYyhzZWVkKSB7XG4gIGlmIChzZWVkID09PSB2b2lkIDApIHtcbiAgICBzZWVkID0gMDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxudmFyIHVpZCA9IGF1dG9JbmMoKTtcblxudmFyIHBhc3NpdmVFdmVudFN1cHBvcnQ7XG52YXIgaGFuZGxlcnNNYXAgPSB7fTtcbnZhciBlbmFibGVkSW5zdGFuY2VzID0ge307XG52YXIgdG91Y2hFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ107XG52YXIgSUdOT1JFX0NMQVNTX05BTUUgPSAnaWdub3JlLXJlYWN0LW9uY2xpY2tvdXRzaWRlJztcbi8qKlxuICogT3B0aW9ucyBmb3IgYWRkRXZlbnRIYW5kbGVyIGFuZCByZW1vdmVFdmVudEhhbmRsZXJcbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudEhhbmRsZXJPcHRpb25zKGluc3RhbmNlLCBldmVudE5hbWUpIHtcbiAgdmFyIGhhbmRsZXJPcHRpb25zID0gbnVsbDtcbiAgdmFyIGlzVG91Y2hFdmVudCA9IHRvdWNoRXZlbnRzLmluZGV4T2YoZXZlbnROYW1lKSAhPT0gLTE7XG5cbiAgaWYgKGlzVG91Y2hFdmVudCAmJiBwYXNzaXZlRXZlbnRTdXBwb3J0KSB7XG4gICAgaGFuZGxlck9wdGlvbnMgPSB7XG4gICAgICBwYXNzaXZlOiAhaW5zdGFuY2UucHJvcHMucHJldmVudERlZmF1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZXJPcHRpb25zO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyB0aGUgSE9DIGZ1bmN0aW9uIHRoYXQgeW91J2xsIHVzZVxuICogaW4gb3JkZXIgdG8gaW1wYXJ0IG9uT3V0c2lkZUNsaWNrIGxpc3RlbmluZyB0byBhblxuICogYXJiaXRyYXJ5IGNvbXBvbmVudC4gSXQgZ2V0cyBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGVcbiAqIGJvb3RzdHJhcHBpbmcgY29kZSB0byB5aWVsZCBhbiBpbnN0YW5jZSBvZiB0aGVcbiAqIG9uQ2xpY2tPdXRzaWRlSE9DIGZ1bmN0aW9uIGRlZmluZWQgaW5zaWRlIHNldHVwSE9DKCkuXG4gKi9cblxuXG5mdW5jdGlvbiBvbkNsaWNrT3V0c2lkZUhPQyhXcmFwcGVkQ29tcG9uZW50LCBjb25maWcpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKG9uQ2xpY2tPdXRzaWRlLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuXG4gICAgICBfdGhpcy5fX291dHNpZGVDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcChldmVudCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBfdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaW5zdGFuY2UucHJvcHMuaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3RhbmNlLmhhbmRsZUNsaWNrT3V0c2lkZShldmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JhcHBlZENvbXBvbmVudDogXCIgKyBjb21wb25lbnROYW1lICsgXCIgbGFja3MgYSBoYW5kbGVDbGlja091dHNpZGUoZXZlbnQpIGZ1bmN0aW9uIGZvciBwcm9jZXNzaW5nIG91dHNpZGUgY2xpY2sgZXZlbnRzLlwiKTtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9fZ2V0Q29tcG9uZW50Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gX3RoaXMuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICBpZiAoY29uZmlnICYmIHR5cGVvZiBjb25maWcuc2V0Q2xpY2tPdXRzaWRlUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZy5zZXRDbGlja091dHNpZGVSZWYoKShpbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLnNldENsaWNrT3V0c2lkZVJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5zZXRDbGlja091dHNpZGVSZWYoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWFjdERvbS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5lbmFibGVPbkNsaWNrT3V0c2lkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgZW5hYmxlZEluc3RhbmNlc1tfdGhpcy5fdWlkXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFzc2l2ZUV2ZW50U3VwcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXNzaXZlRXZlbnRTdXBwb3J0ID0gdGVzdFBhc3NpdmVFdmVudFN1cHBvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuYWJsZWRJbnN0YW5jZXNbX3RoaXMuX3VpZF0gPSB0cnVlO1xuICAgICAgICB2YXIgZXZlbnRzID0gX3RoaXMucHJvcHMuZXZlbnRUeXBlcztcblxuICAgICAgICBpZiAoIWV2ZW50cy5mb3JFYWNoKSB7XG4gICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVyc01hcFtfdGhpcy5fdWlkXSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpcy5jb21wb25lbnROb2RlID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJvcHMucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLmV4Y2x1ZGVTY3JvbGxiYXIgJiYgY2xpY2tlZFNjcm9sbGJhcihldmVudCkpIHJldHVybjtcbiAgICAgICAgICB2YXIgY3VycmVudCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgIGlmIChmaW5kSGlnaGVzdChjdXJyZW50LCBfdGhpcy5jb21wb25lbnROb2RlLCBfdGhpcy5wcm9wcy5vdXRzaWRlQ2xpY2tJZ25vcmVDbGFzcykgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuX19vdXRzaWRlQ2xpY2tIYW5kbGVyKGV2ZW50KTtcbiAgICAgICAgfTtcblxuICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJzTWFwW190aGlzLl91aWRdLCBnZXRFdmVudEhhbmRsZXJPcHRpb25zKF90aGlzLCBldmVudE5hbWUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5kaXNhYmxlT25DbGlja091dHNpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBlbmFibGVkSW5zdGFuY2VzW190aGlzLl91aWRdO1xuICAgICAgICB2YXIgZm4gPSBoYW5kbGVyc01hcFtfdGhpcy5fdWlkXTtcblxuICAgICAgICBpZiAoZm4gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBldmVudHMgPSBfdGhpcy5wcm9wcy5ldmVudFR5cGVzO1xuXG4gICAgICAgICAgaWYgKCFldmVudHMuZm9yRWFjaCkge1xuICAgICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbiwgZ2V0RXZlbnRIYW5kbGVyT3B0aW9ucyhfdGhpcywgZXZlbnROYW1lKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlIGhhbmRsZXJzTWFwW190aGlzLl91aWRdO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5nZXRSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pbnN0YW5jZVJlZiA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl91aWQgPSB1aWQoKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBXcmFwcGVkQ29tcG9uZW50J3MgaW5zdGFuY2UuXG4gICAgICovXG5cblxuICAgIHZhciBfcHJvdG8gPSBvbkNsaWNrT3V0c2lkZS5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcbiAgICAgIGlmICghV3JhcHBlZENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiA9IHRoaXMuaW5zdGFuY2VSZWY7XG4gICAgICByZXR1cm4gcmVmLmdldEluc3RhbmNlID8gcmVmLmdldEluc3RhbmNlKCkgOiByZWY7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBjbGljayBsaXN0ZW5lcnMgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQsXG4gICAgICogbGlua2VkIHRvIHRoaXMgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAgICovXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgaW4gYW4gZW52aXJvbm1lbnQgd2l0aG91dCBhIERPTSBzdWNoXG4gICAgICAvLyBhcyBzaGFsbG93IHJlbmRlcmluZyBvciBzbmFwc2hvdHMgdGhlbiB3ZSBleGl0XG4gICAgICAvLyBlYXJseSB0byBwcmV2ZW50IGFueSB1bmhhbmRsZWQgZXJyb3JzIGJlaW5nIHRocm93bi5cbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICFkb2N1bWVudC5jcmVhdGVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICBpZiAoY29uZmlnICYmIHR5cGVvZiBjb25maWcuaGFuZGxlQ2xpY2tPdXRzaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX19jbGlja091dHNpZGVIYW5kbGVyUHJvcCA9IGNvbmZpZy5oYW5kbGVDbGlja091dHNpZGUoaW5zdGFuY2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fX2NsaWNrT3V0c2lkZUhhbmRsZXJQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JhcHBlZENvbXBvbmVudDogXCIgKyBjb21wb25lbnROYW1lICsgXCIgbGFja3MgYSBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBvdXRzaWRlIGNsaWNrIGV2ZW50cyBzcGVjaWZpZWQgYnkgdGhlIGhhbmRsZUNsaWNrT3V0c2lkZSBjb25maWcgb3B0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXBvbmVudE5vZGUgPSB0aGlzLl9fZ2V0Q29tcG9uZW50Tm9kZSgpOyAvLyByZXR1cm4gZWFybHkgc28gd2UgZG9udCBpbml0aWF0ZSBvbkNsaWNrT3V0c2lkZVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlT25DbGlja091dHNpZGUpIHJldHVybjtcbiAgICAgIHRoaXMuZW5hYmxlT25DbGlja091dHNpZGUoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50Tm9kZSA9IHRoaXMuX19nZXRDb21wb25lbnROb2RlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGRvY3VtZW50J3MgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAqL1xuXG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuZGlzYWJsZU9uQ2xpY2tPdXRzaWRlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYW4gYmUgY2FsbGVkIHRvIGV4cGxpY2l0bHkgZW5hYmxlIGV2ZW50IGxpc3RlbmluZ1xuICAgICAqIGZvciBjbGlja3MgYW5kIHRvdWNoZXMgb3V0c2lkZSBvZiB0aGlzIGVsZW1lbnQuXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIFBhc3MtdGhyb3VnaCByZW5kZXJcbiAgICAgKi9cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBleGNsdWRlU2Nyb2xsYmFyID0gX3Byb3BzLmV4Y2x1ZGVTY3JvbGxiYXIsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJleGNsdWRlU2Nyb2xsYmFyXCJdKTtcblxuICAgICAgaWYgKFdyYXBwZWRDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICAgICAgcHJvcHMucmVmID0gdGhpcy5nZXRSZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy53cmFwcGVkUmVmID0gdGhpcy5nZXRSZWY7XG4gICAgICB9XG5cbiAgICAgIHByb3BzLmRpc2FibGVPbkNsaWNrT3V0c2lkZSA9IHRoaXMuZGlzYWJsZU9uQ2xpY2tPdXRzaWRlO1xuICAgICAgcHJvcHMuZW5hYmxlT25DbGlja091dHNpZGUgPSB0aGlzLmVuYWJsZU9uQ2xpY2tPdXRzaWRlO1xuICAgICAgcmV0dXJuIHJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgcHJvcHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gb25DbGlja091dHNpZGU7XG4gIH0ocmVhY3QuQ29tcG9uZW50KSwgX2NsYXNzLmRpc3BsYXlOYW1lID0gXCJPbkNsaWNrT3V0c2lkZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIiwgX2NsYXNzLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBldmVudFR5cGVzOiBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sXG4gICAgZXhjbHVkZVNjcm9sbGJhcjogY29uZmlnICYmIGNvbmZpZy5leGNsdWRlU2Nyb2xsYmFyIHx8IGZhbHNlLFxuICAgIG91dHNpZGVDbGlja0lnbm9yZUNsYXNzOiBJR05PUkVfQ0xBU1NfTkFNRSxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmYWxzZVxuICB9LCBfY2xhc3MuZ2V0Q2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZ2V0Q2xhc3MgPyBXcmFwcGVkQ29tcG9uZW50LmdldENsYXNzKCkgOiBXcmFwcGVkQ29tcG9uZW50O1xuICB9LCBfdGVtcDtcbn1cblxuZXhwb3J0cy5JR05PUkVfQ0xBU1NfTkFNRSA9IElHTk9SRV9DTEFTU19OQU1FO1xuZXhwb3J0c1snZGVmYXVsdCddID0gb25DbGlja091dHNpZGVIT0M7XG4iLCAiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsICJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKVtcImRlZmF1bHRcIl07XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsO1xuICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4gIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH07XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJkZWZhdWx0XCI6IG9ialxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTtcblxuICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KG9iaik7XG4gIH1cblxuICB2YXIgbmV3T2JqID0ge307XG4gIHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuXG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwgImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsICJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCAidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsICJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwgImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCAiZXhwb3J0IGRlZmF1bHQgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcbiIsICJpbXBvcnQgaXNCcm93c2VyIGZyb20gJy4vaXNCcm93c2VyJztcblxuY29uc3QgdGltZW91dER1cmF0aW9uID0gKGZ1bmN0aW9uKCl7XG4gIGNvbnN0IGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn0oKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICBsZXQgY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZVxuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlXG4gICAgICBmbigpXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIGxldCBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2VcblxuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xuZXhwb3J0IGRlZmF1bHQgKHN1cHBvcnRzTWljcm9UYXNrc1xuICA/IG1pY3JvdGFza0RlYm91bmNlXG4gIDogdGFza0RlYm91bmNlKTtcbiIsICIvKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIGNvbnN0IGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIChcbiAgICBmdW5jdGlvblRvQ2hlY2sgJiZcbiAgICBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICApO1xufVxuIiwgIi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgY29uc3Qgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cbiIsICIvKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuIiwgImltcG9ydCBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkgZnJvbSAnLi9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keVxuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keVxuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIGNvbnN0IHsgb3ZlcmZsb3csIG92ZXJmbG93WCwgb3ZlcmZsb3dZIH0gPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cbiIsICIvKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBub2RlIG9mIHRoZSByZWZlcmVuY2Ugb2JqZWN0LCBvciB0aGUgcmVmZXJlbmNlIG9iamVjdCBpdHNlbGYuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlID8gcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgOiByZWZlcmVuY2U7XG59XG4iLCAiaW1wb3J0IGlzQnJvd3NlciBmcm9tICcuL2lzQnJvd3Nlcic7XG5cbmNvbnN0IGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbmNvbnN0IGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cbiIsICJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIGNvbnN0IG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBsZXQgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICBjb25zdCBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFxuICAgIFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmXG4gICAgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnXG4gICkge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG4iLCAiaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2dldE9mZnNldFBhcmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgY29uc3QgeyBub2RlTmFtZSB9ID0gZWxlbWVudDtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudFxuICApO1xufVxuIiwgIi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwgImltcG9ydCBpc09mZnNldENvbnRhaW5lciBmcm9tICcuL2lzT2Zmc2V0Q29udGFpbmVyJztcbmltcG9ydCBnZXRSb290IGZyb20gJy4vZ2V0Um9vdCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICBjb25zdCBvcmRlciA9XG4gICAgZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICZcbiAgICBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgY29uc3Qgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIGNvbnN0IGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIGNvbnN0IHsgY29tbW9uQW5jZXN0b3JDb250YWluZXIgfSA9IHJhbmdlO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcbiAgaWYgKFxuICAgIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiZcbiAgICAgIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lcikgfHxcbiAgICBzdGFydC5jb250YWlucyhlbmQpXG4gICkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgY29uc3QgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG4iLCAiLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50LCBzaWRlID0gJ3RvcCcpIHtcbiAgY29uc3QgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgY29uc3Qgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICBjb25zdCBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cbiIsICJpbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50LCBzdWJ0cmFjdCA9IGZhbHNlKSB7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgY29uc3QgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG4iLCAiLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICBjb25zdCBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICBjb25zdCBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIChcbiAgICBwYXJzZUZsb2F0KHN0eWxlc1tgYm9yZGVyJHtzaWRlQX1XaWR0aGBdKSArXG4gICAgcGFyc2VGbG9hdChzdHlsZXNbYGJvcmRlciR7c2lkZUJ9V2lkdGhgXSlcbiAgKTtcbn1cbiIsICJpbXBvcnQgaXNJRSBmcm9tICcuL2lzSUUnO1xuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KFxuICAgIGJvZHlbYG9mZnNldCR7YXhpc31gXSxcbiAgICBib2R5W2BzY3JvbGwke2F4aXN9YF0sXG4gICAgaHRtbFtgY2xpZW50JHtheGlzfWBdLFxuICAgIGh0bWxbYG9mZnNldCR7YXhpc31gXSxcbiAgICBodG1sW2BzY3JvbGwke2F4aXN9YF0sXG4gICAgaXNJRSgxMClcbiAgICAgID8gKHBhcnNlSW50KGh0bWxbYG9mZnNldCR7YXhpc31gXSkgKyBcbiAgICAgIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0J31gXSkgKyBcbiAgICAgIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbYG1hcmdpbiR7YXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCd9YF0pKVxuICAgIDogMCBcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgfTtcbn1cbiIsICIvKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5vZmZzZXRzLFxuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodCxcbiAgfTtcbn1cbiIsICJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBnZXRCb3JkZXJzU2l6ZSBmcm9tICcuL2dldEJvcmRlcnNTaXplJztcbmltcG9ydCBnZXRXaW5kb3dTaXplcyBmcm9tICcuL2dldFdpbmRvd1NpemVzJztcbmltcG9ydCBnZXRTY3JvbGwgZnJvbSAnLi9nZXRTY3JvbGwnO1xuaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgbGV0IHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH1cbiAgY2F0Y2goZSl7fVxuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3AsXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICBjb25zdCBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgY29uc3Qgd2lkdGggPVxuICAgIHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICBjb25zdCBoZWlnaHQgPVxuICAgIHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIGxldCBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgbGV0IHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG4iLCAiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgaW5jbHVkZVNjcm9sbCBmcm9tICcuL2luY2x1ZGVTY3JvbGwnO1xuaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBydW5Jc0lFIGZyb20gJy4vaXNJRSc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuL2dldENsaWVudFJlY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCwgZml4ZWRQb3NpdGlvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGlzSUUxMCA9IHJ1bklzSUUoMTApO1xuICBjb25zdCBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgY29uc3QgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgY29uc3QgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICBjb25zdCBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICBjb25zdCBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoKTtcbiAgY29uc3QgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIGxldCBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodCxcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgY29uc3QgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKTtcbiAgICBjb25zdCBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKFxuICAgIGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvblxuICAgICAgPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KVxuICAgICAgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJ1xuICApIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG4iLCAiaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50LCBleGNsdWRlU2Nyb2xsID0gZmFsc2UpIHtcbiAgY29uc3QgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIGNvbnN0IHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIGNvbnN0IG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG4iLCAiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cbiIsICJpbXBvcnQgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IGZyb20gJy4vZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5JztcbmltcG9ydCBpc0lFIGZyb20gJy4vaXNJRSc7XG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIGxldCBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxufVxuIiwgImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSAnLi9nZXRTY3JvbGxQYXJlbnQnO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSAnLi9nZXRQYXJlbnROb2RlJztcbmltcG9ydCBnZXRSZWZlcmVuY2VOb2RlIGZyb20gJy4vZ2V0UmVmZXJlbmNlTm9kZSc7XG5pbXBvcnQgZmluZENvbW1vbk9mZnNldFBhcmVudCBmcm9tICcuL2ZpbmRDb21tb25PZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIGZyb20gJy4vZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlJztcbmltcG9ydCBnZXRXaW5kb3dTaXplcyBmcm9tICcuL2dldFdpbmRvd1NpemVzJztcbmltcG9ydCBpc0ZpeGVkIGZyb20gJy4vaXNGaXhlZCc7XG5pbXBvcnQgZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCBmcm9tICcuL2dldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQnO1xuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGFyaWVzKFxuICBwb3BwZXIsXG4gIHJlZmVyZW5jZSxcbiAgcGFkZGluZyxcbiAgYm91bmRhcmllc0VsZW1lbnQsXG4gIGZpeGVkUG9zaXRpb24gPSBmYWxzZVxuKSB7XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgbGV0IGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnICkge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfVxuXG4gIGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICBsZXQgYm91bmRhcmllc05vZGU7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKFxuICAgICAgYm91bmRhcmllc05vZGUsXG4gICAgICBvZmZzZXRQYXJlbnQsXG4gICAgICBmaXhlZFBvc2l0aW9uXG4gICAgKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpO1xuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICBjb25zdCBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7IFxuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDsgXG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDsgXG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwOyBcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cbiIsICJpbXBvcnQgZ2V0Qm91bmRhcmllcyBmcm9tICcuLi91dGlscy9nZXRCb3VuZGFyaWVzJztcblxuZnVuY3Rpb24gZ2V0QXJlYSh7IHdpZHRoLCBoZWlnaHQgfSkge1xuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoXG4gIHBsYWNlbWVudCxcbiAgcmVmUmVjdCxcbiAgcG9wcGVyLFxuICByZWZlcmVuY2UsXG4gIGJvdW5kYXJpZXNFbGVtZW50LFxuICBwYWRkaW5nID0gMFxuKSB7XG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBwb3BwZXIsXG4gICAgcmVmZXJlbmNlLFxuICAgIHBhZGRpbmcsXG4gICAgYm91bmRhcmllc0VsZW1lbnRcbiAgKTtcblxuICBjb25zdCByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wLFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tLFxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKVxuICAgIC5tYXAoa2V5ID0+ICh7XG4gICAgICBrZXksXG4gICAgICAuLi5yZWN0c1trZXldLFxuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKSxcbiAgICB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5hcmVhIC0gYS5hcmVhKTtcblxuICBjb25zdCBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKFxuICAgICh7IHdpZHRoLCBoZWlnaHQgfSkgPT5cbiAgICAgIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodFxuICApO1xuXG4gIGNvbnN0IGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwXG4gICAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleVxuICAgIDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIGNvbnN0IHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyBgLSR7dmFyaWF0aW9ufWAgOiAnJyk7XG59XG4iLCAiaW1wb3J0IGZpbmRDb21tb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9maW5kQ29tbW9uT2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUgZnJvbSAnLi9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRSZWZlcmVuY2VOb2RlIGZyb20gJy4vZ2V0UmVmZXJlbmNlTm9kZSc7XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgZml4ZWRQb3NpdGlvbiA9IG51bGwpIHtcbiAgY29uc3QgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cbiIsICIvKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICBjb25zdCB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICBjb25zdCB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICBjb25zdCB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4LFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwgIi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIGNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTtcbn1cbiIsICJpbXBvcnQgZ2V0T3V0ZXJTaXplcyBmcm9tICcuL2dldE91dGVyU2l6ZXMnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4vZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICBjb25zdCBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgY29uc3QgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0LFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgY29uc3QgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIGNvbnN0IG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICBjb25zdCBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIGNvbnN0IHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPVxuICAgIHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICtcbiAgICByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLVxuICAgIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPVxuICAgICAgcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPVxuICAgICAgcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cbiIsICIvKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuIiwgImltcG9ydCBmaW5kIGZyb20gJy4vZmluZCc7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGN1ciA9PiBjdXJbcHJvcF0gPT09IHZhbHVlKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIGNvbnN0IG1hdGNoID0gZmluZChhcnIsIG9iaiA9PiBvYmpbcHJvcF0gPT09IHZhbHVlKTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cbiIsICJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGZpbmRJbmRleCBmcm9tICcuL2ZpbmRJbmRleCc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICBjb25zdCBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZFxuICAgID8gbW9kaWZpZXJzXG4gICAgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChtb2RpZmllciA9PiB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIGNvbnN0IGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgImltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tICcuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudCc7XG5pbXBvcnQgZ2V0UmVmZXJlbmNlT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRSZWZlcmVuY2VPZmZzZXRzJztcbmltcG9ydCBnZXRQb3BwZXJPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFBvcHBlck9mZnNldHMnO1xuaW1wb3J0IHJ1bk1vZGlmaWVycyBmcm9tICcuLi91dGlscy9ydW5Nb2RpZmllcnMnO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fSxcbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHMoXG4gICAgdGhpcy5zdGF0ZSxcbiAgICB0aGlzLnBvcHBlcixcbiAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZFxuICApO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICB0aGlzLnBvcHBlcixcbiAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmdcbiAgKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyhcbiAgICB0aGlzLnBvcHBlcixcbiAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlLFxuICAgIGRhdGEucGxhY2VtZW50XG4gICk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkXG4gICAgPyAnZml4ZWQnXG4gICAgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cbiIsICIvKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKFxuICAgICh7IG5hbWUsIGVuYWJsZWQgfSkgPT4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWVcbiAgKTtcbn1cbiIsICIvKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICBjb25zdCBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICBjb25zdCB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICBjb25zdCB0b0NoZWNrID0gcHJlZml4ID8gYCR7cHJlZml4fSR7dXBwZXJQcm9wfWAgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iLCAiaW1wb3J0IGlzTW9kaWZpZXJFbmFibGVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkJztcbmltcG9ydCBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lJztcblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdGx5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsICIvKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICBjb25zdCBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG4iLCAiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIGNvbnN0IGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICBjb25zdCB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoXG4gICAgICBnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLFxuICAgICAgZXZlbnQsXG4gICAgICBjYWxsYmFjayxcbiAgICAgIHNjcm9sbFBhcmVudHNcbiAgICApO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhcbiAgcmVmZXJlbmNlLFxuICBvcHRpb25zLFxuICBzdGF0ZSxcbiAgdXBkYXRlQm91bmRcbikge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIGNvbnN0IHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKFxuICAgIHNjcm9sbEVsZW1lbnQsXG4gICAgJ3Njcm9sbCcsXG4gICAgc3RhdGUudXBkYXRlQm91bmQsXG4gICAgc3RhdGUuc2Nyb2xsUGFyZW50c1xuICApO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuIiwgImltcG9ydCBzZXR1cEV2ZW50TGlzdGVuZXJzIGZyb20gJy4uL3V0aWxzL3NldHVwRXZlbnRMaXN0ZW5lcnMnO1xuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKFxuICAgICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLnN0YXRlLFxuICAgICAgdGhpcy5zY2hlZHVsZVVwZGF0ZVxuICAgICk7XG4gIH1cbn1cbiIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cbiIsICJpbXBvcnQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlRXZlbnRMaXN0ZW5lcnMnO1xuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuIiwgIi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbiIsICJpbXBvcnQgaXNOdW1lcmljIGZyb20gJy4vaXNOdW1lcmljJztcblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBsZXQgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChcbiAgICAgIFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09XG4gICAgICAgIC0xICYmXG4gICAgICBpc051bWVyaWMoc3R5bGVzW3Byb3BdKVxuICAgICkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cbiIsICIvKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuIiwgImltcG9ydCBzZXRTdHlsZXMgZnJvbSAnLi4vdXRpbHMvc2V0U3R5bGVzJztcbmltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gJy4uL3V0aWxzL3NldEF0dHJpYnV0ZXMnO1xuaW1wb3J0IGdldFJlZmVyZW5jZU9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UmVmZXJlbmNlT2Zmc2V0cyc7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKFxuICByZWZlcmVuY2UsXG4gIHBvcHBlcixcbiAgb3B0aW9ucyxcbiAgbW9kaWZpZXJPcHRpb25zLFxuICBzdGF0ZVxuKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBjb25zdCByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGNvbnN0IHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICAgIG9wdGlvbnMucGxhY2VtZW50LFxuICAgIHJlZmVyZW5jZU9mZnNldHMsXG4gICAgcG9wcGVyLFxuICAgIHJlZmVyZW5jZSxcbiAgICBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZ1xuICApO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuIiwgIi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IHsgcm91bmQsIGZsb29yIH0gPSBNYXRoO1xuICBjb25zdCBub1JvdW5kID0gdiA9PiB2O1xuICBcbiAgY29uc3QgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICBjb25zdCBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG4gIFxuICBjb25zdCBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICBjb25zdCBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIGNvbnN0IHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICBjb25zdCBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIGNvbnN0IGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmRcbiAgICA/IG5vUm91bmRcbiAgICA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5XG4gICAgPyByb3VuZFxuICAgIDogZmxvb3I7XG4gIGNvbnN0IHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihcbiAgICAgIGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmRcbiAgICAgICAgPyBwb3BwZXIubGVmdCAtIDFcbiAgICAgICAgOiBwb3BwZXIubGVmdFxuICAgICksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodCksXG4gIH07XG59XG4iLCAiaW1wb3J0IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9nZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL3V0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0Um91bmRlZE9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0Um91bmRlZE9mZnNldHMnO1xuaW1wb3J0IGlzQnJvd3NlciBmcm9tICcuLi91dGlscy9pc0Jyb3dzZXInO1xuXG5jb25zdCBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHgsIHkgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgcG9wcGVyIH0gPSBkYXRhLm9mZnNldHM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG4gIGNvbnN0IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoXG4gICAgZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsXG4gICAgbW9kaWZpZXIgPT4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnXG4gICkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnXG4gICAgKTtcbiAgfVxuICBjb25zdCBncHVBY2NlbGVyYXRpb24gPVxuICAgIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvblxuICAgICAgOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICBjb25zdCBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uLFxuICB9O1xuXG4gIGNvbnN0IG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhcbiAgICBkYXRhLFxuICAgIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94XG4gICk7XG5cbiAgY29uc3Qgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIGNvbnN0IHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIGNvbnN0IHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIGxldCBsZWZ0LCB0b3A7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSBgdHJhbnNsYXRlM2QoJHtsZWZ0fXB4LCAke3RvcH1weCwgMClgO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICBjb25zdCBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgY29uc3QgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gYCR7c2lkZUF9LCAke3NpZGVCfWA7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnQsXG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IHsgLi4uYXR0cmlidXRlcywgLi4uZGF0YS5hdHRyaWJ1dGVzIH07XG4gIGRhdGEuc3R5bGVzID0geyAuLi5zdHlsZXMsIC4uLmRhdGEuc3R5bGVzIH07XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSB7IC4uLmRhdGEub2Zmc2V0cy5hcnJvdywgLi4uZGF0YS5hcnJvd1N0eWxlcyB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgImltcG9ydCBmaW5kIGZyb20gJy4vZmluZCc7XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChcbiAgbW9kaWZpZXJzLFxuICByZXF1ZXN0aW5nTmFtZSxcbiAgcmVxdWVzdGVkTmFtZVxuKSB7XG4gIGNvbnN0IHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgKHsgbmFtZSB9KSA9PiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZSk7XG5cbiAgY29uc3QgaXNSZXF1aXJlZCA9XG4gICAgISFyZXF1ZXN0aW5nICYmXG4gICAgbW9kaWZpZXJzLnNvbWUobW9kaWZpZXIgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJlxuICAgICAgICBtb2RpZmllci5lbmFibGVkICYmXG4gICAgICAgIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlclxuICAgICAgKTtcbiAgICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICBjb25zdCByZXF1ZXN0aW5nID0gYFxcYCR7cmVxdWVzdGluZ05hbWV9XFxgYDtcbiAgICBjb25zdCByZXF1ZXN0ZWQgPSBgXFxgJHtyZXF1ZXN0ZWROYW1lfVxcYGA7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYCR7cmVxdWVzdGVkfSBtb2RpZmllciBpcyByZXF1aXJlZCBieSAke3JlcXVlc3Rpbmd9IG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJHtyZXF1ZXN0aW5nfSFgXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cbiIsICJpbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4uL3V0aWxzL2dldE91dGVyU2l6ZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJSZXF1aXJlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyUmVxdWlyZWQnO1xuaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuLi91dGlscy9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGxldCBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgY29uc3QgeyBwb3BwZXIsIHJlZmVyZW5jZSB9ID0gZGF0YS5vZmZzZXRzO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICBjb25zdCBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIGNvbnN0IHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgY29uc3Qgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgY29uc3QgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPVxuICAgICAgcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz1cbiAgICAgIHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIGNvbnN0IGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICBjb25zdCBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICBjb25zdCBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbYG1hcmdpbiR7c2lkZUNhcGl0YWxpemVkfWBdKTtcbiAgY29uc3QgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzW2Bib3JkZXIke3NpZGVDYXBpdGFsaXplZH1XaWR0aGBdKTtcbiAgbGV0IHNpZGVWYWx1ZSA9XG4gICAgY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSB7XG4gICAgW3NpZGVdOiBNYXRoLnJvdW5kKHNpZGVWYWx1ZSksXG4gICAgW2FsdFNpZGVdOiAnJywgLy8gbWFrZSBzdXJlIHRvIHVuc2V0IGFueSBldmVudHVhbCBhbHRTaWRlIHZhbHVlIGZyb20gdGhlIERPTSBub2RlXG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cbiIsICIvKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAgJ2F1dG8tc3RhcnQnLFxuICAnYXV0bycsXG4gICdhdXRvLWVuZCcsXG4gICd0b3Atc3RhcnQnLFxuICAndG9wJyxcbiAgJ3RvcC1lbmQnLFxuICAncmlnaHQtc3RhcnQnLFxuICAncmlnaHQnLFxuICAncmlnaHQtZW5kJyxcbiAgJ2JvdHRvbS1lbmQnLFxuICAnYm90dG9tJyxcbiAgJ2JvdHRvbS1zdGFydCcsXG4gICdsZWZ0LWVuZCcsXG4gICdsZWZ0JyxcbiAgJ2xlZnQtc3RhcnQnLFxuXTtcbiIsICJpbXBvcnQgcGxhY2VtZW50cyBmcm9tICcuLi9tZXRob2RzL3BsYWNlbWVudHMnO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbmNvbnN0IHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCwgY291bnRlciA9IGZhbHNlKSB7XG4gIGNvbnN0IGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgY29uc3QgYXJyID0gdmFsaWRQbGFjZW1lbnRzXG4gICAgLnNsaWNlKGluZGV4ICsgMSlcbiAgICAuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG4iLCAiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvbic7XG5pbXBvcnQgZ2V0UG9wcGVyT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRQb3BwZXJPZmZzZXRzJztcbmltcG9ydCBydW5Nb2RpZmllcnMgZnJvbSAnLi4vdXRpbHMvcnVuTW9kaWZpZXJzJztcbmltcG9ydCBnZXRCb3VuZGFyaWVzIGZyb20gJy4uL3V0aWxzL2dldEJvdW5kYXJpZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJFbmFibGVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkJztcbmltcG9ydCBjbG9ja3dpc2UgZnJvbSAnLi4vdXRpbHMvY2xvY2t3aXNlJztcblxuY29uc3QgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJyxcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKFxuICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLFxuICAgIG9wdGlvbnMucGFkZGluZyxcbiAgICBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIGRhdGEucG9zaXRpb25GaXhlZFxuICApO1xuXG4gIGxldCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBsZXQgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBsZXQgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICBsZXQgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaCgoc3RlcCwgaW5kZXgpID0+IHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICBjb25zdCBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICBjb25zdCByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICBjb25zdCBvdmVybGFwc1JlZiA9XG4gICAgICAocGxhY2VtZW50ID09PSAnbGVmdCcgJiZcbiAgICAgICAgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAndG9wJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSkpO1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIGNvbnN0IG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICBjb25zdCBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dzQm90dG9tID1cbiAgICAgIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIGNvbnN0IG92ZXJmbG93c0JvdW5kYXJpZXMgPVxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIGNvbnN0IGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgY29uc3QgZmxpcHBlZFZhcmlhdGlvbkJ5UmVmID1cbiAgICAgICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJlxuICAgICAgKChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0KSB8fFxuICAgICAgICAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCkgfHxcbiAgICAgICAgKCFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICBjb25zdCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50ID1cbiAgICAgICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJlxuICAgICAgKChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NSaWdodCkgfHxcbiAgICAgICAgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0KSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSkgfHxcbiAgICAgICAgKCFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzVG9wKSk7XG5cbiAgICBjb25zdCBmbGlwcGVkVmFyaWF0aW9uID0gZmxpcHBlZFZhcmlhdGlvbkJ5UmVmIHx8IGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQ7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0ge1xuICAgICAgICAuLi5kYXRhLm9mZnNldHMucG9wcGVyLFxuICAgICAgICAuLi5nZXRQb3BwZXJPZmZzZXRzKFxuICAgICAgICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgICAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgICAgZGF0YS5wbGFjZW1lbnRcbiAgICAgICAgKSxcbiAgICAgIH07XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIGNvbnN0IHsgcG9wcGVyLCByZWZlcmVuY2UgfSA9IGRhdGEub2Zmc2V0cztcbiAgY29uc3QgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgY29uc3Qgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIGNvbnN0IG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgY29uc3QgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPVxuICAgICAgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgImltcG9ydCBpc051bWVyaWMgZnJvbSAnLi4vdXRpbHMvaXNOdW1lcmljJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgY29uc3Qgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICBjb25zdCB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgY29uc3QgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICBsZXQgZWxlbWVudDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgbGV0IHNpemU7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IHx8IDBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT2Zmc2V0KFxuICBvZmZzZXQsXG4gIHBvcHBlck9mZnNldHMsXG4gIHJlZmVyZW5jZU9mZnNldHMsXG4gIGJhc2VQbGFjZW1lbnRcbikge1xuICBjb25zdCBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgY29uc3QgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgY29uc3QgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnJhZyA9PiBmcmFnLnRyaW0oKSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIGNvbnN0IGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihcbiAgICBmaW5kKGZyYWdtZW50cywgZnJhZyA9PiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTEpXG4gICk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICBjb25zdCBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgbGV0IG9wcyA9IGRpdmlkZXIgIT09IC0xXG4gICAgPyBbXG4gICAgICAgIGZyYWdtZW50c1xuICAgICAgICAgIC5zbGljZSgwLCBkaXZpZGVyKVxuICAgICAgICAgIC5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLFxuICAgICAgICBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoXG4gICAgICAgICAgZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKVxuICAgICAgICApLFxuICAgICAgXVxuICAgIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcCgob3AsIGluZGV4KSA9PiB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodClcbiAgICAgID8gJ2hlaWdodCdcbiAgICAgIDogJ3dpZHRoJztcbiAgICBsZXQgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gKFxuICAgICAgb3BcbiAgICAgICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAgICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgICAgIC5tYXAoc3RyID0+IHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykpXG4gICAgKTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKChvcCwgaW5kZXgpID0+IHtcbiAgICBvcC5mb3JFYWNoKChmcmFnLCBpbmRleDIpID0+IHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9mZnNldChkYXRhLCB7IG9mZnNldCB9KSB7XG4gIGNvbnN0IHsgcGxhY2VtZW50LCBvZmZzZXRzOiB7IHBvcHBlciwgcmVmZXJlbmNlIH0gfSA9IGRhdGE7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICBsZXQgb2Zmc2V0cztcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi91dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldEJvdW5kYXJpZXMgZnJvbSAnLi4vdXRpbHMvZ2V0Qm91bmRhcmllcyc7XG5pbXBvcnQgZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIGZyb20gJy4uL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSc7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIGxldCBib3VuZGFyaWVzRWxlbWVudCA9XG4gICAgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIGNvbnN0IHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICBjb25zdCBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICBjb25zdCB7IHRvcCwgbGVmdCwgW3RyYW5zZm9ybVByb3BdOiB0cmFuc2Zvcm0gfSA9IHBvcHBlclN0eWxlcztcbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBkYXRhLmluc3RhbmNlLnBvcHBlcixcbiAgICBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSxcbiAgICBvcHRpb25zLnBhZGRpbmcsXG4gICAgYm91bmRhcmllc0VsZW1lbnQsXG4gICAgZGF0YS5wb3NpdGlvbkZpeGVkXG4gICk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIGNvbnN0IG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgbGV0IHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgY29uc3QgY2hlY2sgPSB7XG4gICAgcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKFxuICAgICAgICBwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJlxuICAgICAgICAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFtwbGFjZW1lbnRdOiB2YWx1ZSB9O1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgY29uc3QgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAoXG4gICAgICAgIHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmXG4gICAgICAgICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2VcbiAgICAgICkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKFxuICAgICAgICAgIHBvcHBlclttYWluU2lkZV0sXG4gICAgICAgICAgYm91bmRhcmllc1twbGFjZW1lbnRdIC1cbiAgICAgICAgICAgIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgW21haW5TaWRlXTogdmFsdWUgfTtcbiAgICB9LFxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2gocGxhY2VtZW50ID0+IHtcbiAgICBjb25zdCBzaWRlID1cbiAgICAgIFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0geyAuLi5wb3BwZXIsIC4uLmNoZWNrW3NpZGVdKHBsYWNlbWVudCkgfTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsICIvKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIGNvbnN0IHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIGNvbnN0IHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIGNvbnN0IHsgcmVmZXJlbmNlLCBwb3BwZXIgfSA9IGRhdGEub2Zmc2V0cztcbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgY29uc3Qgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICBjb25zdCBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICBjb25zdCBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogeyBbc2lkZV06IHJlZmVyZW5jZVtzaWRlXSB9LFxuICAgICAgZW5kOiB7XG4gICAgICAgIFtzaWRlXTogcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0geyAuLi5wb3BwZXIsIC4uLnNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0gfTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgImltcG9ydCBpc01vZGlmaWVyUmVxdWlyZWQgZnJvbSAnLi4vdXRpbHMvaXNNb2RpZmllclJlcXVpcmVkJztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgY29uc3QgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIGNvbnN0IGJvdW5kID0gZmluZChcbiAgICBkYXRhLmluc3RhbmNlLm1vZGlmaWVycyxcbiAgICBtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93J1xuICApLmJvdW5kYXJpZXM7XG5cbiAgaWYgKFxuICAgIHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8XG4gICAgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHxcbiAgICByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fFxuICAgIHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0XG4gICkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwgImltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9XG4gICAgcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC1cbiAgICAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiaW1wb3J0IGFwcGx5U3R5bGUsIHsgYXBwbHlTdHlsZU9uTG9hZCB9IGZyb20gJy4vYXBwbHlTdHlsZSc7XG5pbXBvcnQgY29tcHV0ZVN0eWxlIGZyb20gJy4vY29tcHV0ZVN0eWxlJztcbmltcG9ydCBhcnJvdyBmcm9tICcuL2Fycm93JztcbmltcG9ydCBmbGlwIGZyb20gJy4vZmxpcCc7XG5pbXBvcnQga2VlcFRvZ2V0aGVyIGZyb20gJy4va2VlcFRvZ2V0aGVyJztcbmltcG9ydCBvZmZzZXQgZnJvbSAnLi9vZmZzZXQnO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tICcuL3ByZXZlbnRPdmVyZmxvdyc7XG5pbXBvcnQgc2hpZnQgZnJvbSAnLi9zaGlmdCc7XG5pbXBvcnQgaGlkZSBmcm9tICcuL2hpZGUnO1xuaW1wb3J0IGlubmVyIGZyb20gJy4vaW5uZXInO1xuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnQsXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDAsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIgXHUyMDE0IG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXIsXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XScsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2UsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lcixcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlLFxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0JyxcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZCxcbiAgfSxcbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cbiIsICJpbXBvcnQgbW9kaWZpZXJzIGZyb20gJy4uL21vZGlmaWVycy9pbmRleCc7XG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogKCkgPT4ge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6ICgpID0+IHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVycyxcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cbiIsICIvLyBVdGlsc1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi91dGlscy9pc0Z1bmN0aW9uJztcblxuLy8gTWV0aG9kc1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuL21ldGhvZHMvdXBkYXRlJztcbmltcG9ydCBkZXN0cm95IGZyb20gJy4vbWV0aG9kcy9kZXN0cm95JztcbmltcG9ydCBlbmFibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZW5hYmxlRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IGRpc2FibGVFdmVudExpc3RlbmVycyBmcm9tICcuL21ldGhvZHMvZGlzYWJsZUV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBEZWZhdWx0cyBmcm9tICcuL21ldGhvZHMvZGVmYXVsdHMnO1xuaW1wb3J0IHBsYWNlbWVudHMgZnJvbSAnLi9tZXRob2RzL3BsYWNlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3BwZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4uUG9wcGVyLkRlZmF1bHRzLCAuLi5vcHRpb25zIH07XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXSxcbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh7XG4gICAgICAuLi5Qb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLFxuICAgICAgLi4ub3B0aW9ucy5tb2RpZmllcnMsXG4gICAgfSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSB7XG4gICAgICAgIC8vIElmIGl0J3MgYSBidWlsdC1pbiBtb2RpZmllciwgdXNlIGl0IGFzIGJhc2VcbiAgICAgICAgLi4uKFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30pLFxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgY3VzdG9tIG9wdGlvbnMsIG92ZXJyaWRlIGFuZCBtZXJnZSB3aXRoIGRlZmF1bHQgb25lc1xuICAgICAgICAuLi4ob3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpXG4gICAgICAubWFwKG5hbWUgPT4gKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSxcbiAgICAgIH0pKVxuICAgICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2gobW9kaWZpZXJPcHRpb25zID0+IHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoXG4gICAgICAgICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgICAgICAgdGhpcy5wb3BwZXIsXG4gICAgICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgICAgIG1vZGlmaWVyT3B0aW9ucyxcbiAgICAgICAgICB0aGlzLnN0YXRlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgY29uc3QgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcbiAgdXBkYXRlKCkge1xuICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gIH1cbiAgZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gIH1cbiAgZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHNjaGVkdWxlVXBkYXRlID0gKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAqXG4gICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgKiBAbWVtYmVyIFV0aWxzXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHN0YXRpYyBVdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5cbiAgc3RhdGljIHBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gIHN0YXRpYyBEZWZhdWx0cyA9IERlZmF1bHRzO1xufVxuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG4iLCAiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2d1ZCA9IHJlcXVpcmUoJ2d1ZCcpO1xuXG52YXIgX2d1ZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ndWQpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuLy8gSW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArICgwLCBfZ3VkMi5kZWZhdWx0KSgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDsgLy8gTm8gY2hhbmdlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGVtcDIsIF90aGlzMiwgX3JldDI7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25zdW1lcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQyID0gKF90ZW1wMiA9IChfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50Mi5jYWxsLmFwcGx5KF9Db21wb25lbnQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzMiksIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9LCBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90ZW1wMiksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzMiwgX3JldDIpO1xuICAgIH1cblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcblxuXG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWFjdENvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1wbGVtZW50YXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ29udGV4dCB8fCBfaW1wbGVtZW50YXRpb24yLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5NYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQgPSBleHBvcnRzLk1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dCA9IHZvaWQgMDtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVSZWFjdENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAaHlwbm9zcGhpL2NyZWF0ZS1yZWFjdC1jb250ZXh0XCIpKTtcblxudmFyIE1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dCA9ICgwLCBfY3JlYXRlUmVhY3RDb250ZXh0LmRlZmF1bHQpKCk7XG5leHBvcnRzLk1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dCA9IE1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dDtcbnZhciBNYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQgPSAoMCwgX2NyZWF0ZVJlYWN0Q29udGV4dC5kZWZhdWx0KSgpO1xuZXhwb3J0cy5NYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQgPSBNYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQ7XG5cbnZhciBNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoTWFuYWdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWFuYWdlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksIFwicmVmZXJlbmNlTm9kZVwiLCB2b2lkIDApO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJzZXRSZWZlcmVuY2VOb2RlXCIsIGZ1bmN0aW9uIChuZXdSZWZlcmVuY2VOb2RlKSB7XG4gICAgICBpZiAobmV3UmVmZXJlbmNlTm9kZSAmJiBfdGhpcy5yZWZlcmVuY2VOb2RlICE9PSBuZXdSZWZlcmVuY2VOb2RlKSB7XG4gICAgICAgIF90aGlzLnJlZmVyZW5jZU5vZGUgPSBuZXdSZWZlcmVuY2VOb2RlO1xuXG4gICAgICAgIF90aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNYW5hZ2VyUmVmZXJlbmNlTm9kZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnJlZmVyZW5jZU5vZGVcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KE1hbmFnZXJSZWZlcmVuY2VOb2RlU2V0dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc2V0UmVmZXJlbmNlTm9kZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTWFuYWdlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTWFuYWdlcjsiLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNldFJlZiA9IGV4cG9ydHMuc2hhbGxvd0VxdWFsID0gZXhwb3J0cy5zYWZlSW52b2tlID0gZXhwb3J0cy51bndyYXBBcnJheSA9IHZvaWQgMDtcblxuLyoqXG4gKiBUYWtlcyBhbiBhcmd1bWVudCBhbmQgaWYgaXQncyBhbiBhcnJheSwgcmV0dXJucyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXksXG4gKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgYXJndW1lbnQuIFVzZWQgZm9yIFByZWFjdCBjb21wYXRpYmlsaXR5LlxuICovXG52YXIgdW53cmFwQXJyYXkgPSBmdW5jdGlvbiB1bndyYXBBcnJheShhcmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSA/IGFyZ1swXSA6IGFyZztcbn07XG4vKipcbiAqIFRha2VzIGEgbWF5YmUtdW5kZWZpbmVkIGZ1bmN0aW9uIGFuZCBhcmJpdHJhcnkgYXJncyBhbmQgaW52b2tlcyB0aGUgZnVuY3Rpb25cbiAqIG9ubHkgaWYgaXQgaXMgZGVmaW5lZC5cbiAqL1xuXG5cbmV4cG9ydHMudW53cmFwQXJyYXkgPSB1bndyYXBBcnJheTtcblxudmFyIHNhZmVJbnZva2UgPSBmdW5jdGlvbiBzYWZlSW52b2tlKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9XG59O1xuLyoqXG4gKiBEb2VzIGEgc2hhbGxvdyBlcXVhbGl0eSBjaGVjayBvZiB0d28gb2JqZWN0cyBieSBjb21wYXJpbmcgdGhlIHJlZmVyZW5jZVxuICogZXF1YWxpdHkgb2YgZWFjaCB2YWx1ZS5cbiAqL1xuXG5cbmV4cG9ydHMuc2FmZUludm9rZSA9IHNhZmVJbnZva2U7XG5cbnZhciBzaGFsbG93RXF1YWwgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGJLZXlzLmxlbmd0aCAhPT0gYUtleXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBhS2V5c1tpXTtcblxuICAgIGlmIChvYmpBW2tleV0gIT09IG9iakJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogU2V0cyBhIHJlZiB1c2luZyBlaXRoZXIgYSByZWYgY2FsbGJhY2sgb3IgYSByZWYgb2JqZWN0XG4gKi9cblxuXG5leHBvcnRzLnNoYWxsb3dFcXVhbCA9IHNoYWxsb3dFcXVhbDtcblxudmFyIHNldFJlZiA9IGZ1bmN0aW9uIHNldFJlZihyZWYsIG5vZGUpIHtcbiAgLy8gaWYgaXRzIGEgZnVuY3Rpb24gY2FsbCBpdFxuICBpZiAodHlwZW9mIHJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHNhZmVJbnZva2UocmVmLCBub2RlKTtcbiAgfSAvLyBvdGhlcndpc2Ugd2Ugc2hvdWxkIHRyZWF0IGl0IGFzIGEgcmVmIG9iamVjdFxuICBlbHNlIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgcmVmLmN1cnJlbnQgPSBub2RlO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuc2V0UmVmID0gc2V0UmVmOyIsICJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBQb3BwZXI7XG5leHBvcnRzLnBsYWNlbWVudHMgPSBleHBvcnRzLklubmVyUG9wcGVyID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcG9wcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicG9wcGVyLmpzXCIpKTtcblxudmFyIF9NYW5hZ2VyID0gcmVxdWlyZShcIi4vTWFuYWdlclwiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgaW5pdGlhbFN0eWxlID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5OiAwLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn07XG52YXIgaW5pdGlhbEFycm93U3R5bGUgPSB7fTtcblxudmFyIElubmVyUG9wcGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoSW5uZXJQb3BwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyUG9wcGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICBwbGFjZW1lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJwb3BwZXJJbnN0YW5jZVwiLCB2b2lkIDApO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJwb3BwZXJOb2RlXCIsIG51bGwpO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJhcnJvd05vZGVcIiwgbnVsbCk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcInNldFBvcHBlck5vZGVcIiwgZnVuY3Rpb24gKHBvcHBlck5vZGUpIHtcbiAgICAgIGlmICghcG9wcGVyTm9kZSB8fCBfdGhpcy5wb3BwZXJOb2RlID09PSBwb3BwZXJOb2RlKSByZXR1cm47XG4gICAgICAoMCwgX3V0aWxzLnNldFJlZikoX3RoaXMucHJvcHMuaW5uZXJSZWYsIHBvcHBlck5vZGUpO1xuICAgICAgX3RoaXMucG9wcGVyTm9kZSA9IHBvcHBlck5vZGU7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcInNldEFycm93Tm9kZVwiLCBmdW5jdGlvbiAoYXJyb3dOb2RlKSB7XG4gICAgICBfdGhpcy5hcnJvd05vZGUgPSBhcnJvd05vZGU7XG4gICAgfSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcInVwZGF0ZVN0YXRlTW9kaWZpZXJcIiwge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG9yZGVyOiA5MDAsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZGF0YSkge1xuICAgICAgICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcImdldE9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGxhY2VtZW50OiBfdGhpcy5wcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgIGV2ZW50c0VuYWJsZWQ6IF90aGlzLnByb3BzLmV2ZW50c0VuYWJsZWQsXG4gICAgICAgIHBvc2l0aW9uRml4ZWQ6IF90aGlzLnByb3BzLnBvc2l0aW9uRml4ZWQsXG4gICAgICAgIG1vZGlmaWVyczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3RoaXMucHJvcHMubW9kaWZpZXJzLCB7XG4gICAgICAgICAgYXJyb3c6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF90aGlzLnByb3BzLm1vZGlmaWVycyAmJiBfdGhpcy5wcm9wcy5tb2RpZmllcnMuYXJyb3csIHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICEhX3RoaXMuYXJyb3dOb2RlLFxuICAgICAgICAgICAgZWxlbWVudDogX3RoaXMuYXJyb3dOb2RlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYXBwbHlTdHlsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwZGF0ZVN0YXRlTW9kaWZpZXI6IF90aGlzLnVwZGF0ZVN0YXRlTW9kaWZpZXJcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcImdldFBvcHBlclN0eWxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMucG9wcGVyTm9kZSB8fCAhX3RoaXMuc3RhdGUuZGF0YSA/IGluaXRpYWxTdHlsZSA6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBwb3NpdGlvbjogX3RoaXMuc3RhdGUuZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvblxuICAgICAgfSwgX3RoaXMuc3RhdGUuZGF0YS5zdHlsZXMpO1xuICAgIH0pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJnZXRQb3BwZXJQbGFjZW1lbnRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpcy5zdGF0ZS5kYXRhID8gdW5kZWZpbmVkIDogX3RoaXMuc3RhdGUucGxhY2VtZW50O1xuICAgIH0pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJnZXRBcnJvd1N0eWxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuYXJyb3dOb2RlIHx8ICFfdGhpcy5zdGF0ZS5kYXRhID8gaW5pdGlhbEFycm93U3R5bGUgOiBfdGhpcy5zdGF0ZS5kYXRhLmFycm93U3R5bGVzO1xuICAgIH0pO1xuICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgXCJnZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc3RhdGUuZGF0YSA/IF90aGlzLnN0YXRlLmRhdGEuaGlkZSA6IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksIFwiZGVzdHJveVBvcHBlckluc3RhbmNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMucG9wcGVySW5zdGFuY2UpIHJldHVybjtcblxuICAgICAgX3RoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuXG4gICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgfSk7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcInVwZGF0ZVBvcHBlckluc3RhbmNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLFxuICAgICAgICAgIHBvcHBlck5vZGUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUucG9wcGVyTm9kZTtcblxuICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBfdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50O1xuICAgICAgaWYgKCFyZWZlcmVuY2VFbGVtZW50IHx8ICFwb3BwZXJOb2RlKSByZXR1cm47XG4gICAgICBfdGhpcy5wb3BwZXJJbnN0YW5jZSA9IG5ldyBfcG9wcGVyLmRlZmF1bHQocmVmZXJlbmNlRWxlbWVudCwgcG9wcGVyTm9kZSwgX3RoaXMuZ2V0T3B0aW9ucygpKTtcbiAgICB9KTtcbiAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksIFwic2NoZWR1bGVVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElubmVyUG9wcGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgLy8gSWYgdGhlIFBvcHBlci5qcyBvcHRpb25zIGhhdmUgY2hhbmdlZCwgdXBkYXRlIHRoZSBpbnN0YW5jZSAoZGVzdHJveSArIGNyZWF0ZSlcbiAgICBpZiAodGhpcy5wcm9wcy5wbGFjZW1lbnQgIT09IHByZXZQcm9wcy5wbGFjZW1lbnQgfHwgdGhpcy5wcm9wcy5yZWZlcmVuY2VFbGVtZW50ICE9PSBwcmV2UHJvcHMucmVmZXJlbmNlRWxlbWVudCB8fCB0aGlzLnByb3BzLnBvc2l0aW9uRml4ZWQgIT09IHByZXZQcm9wcy5wb3NpdGlvbkZpeGVkIHx8IHRoaXMucHJvcHMubW9kaWZpZXJzICE9PSBwcmV2UHJvcHMubW9kaWZpZXJzKSB7XG4gICAgICAvLyBkZXZlbG9wIG9ubHkgY2hlY2sgdGhhdCBtb2RpZmllcnMgaXNuJ3QgYmVpbmcgdXBkYXRlZCBuZWVkbGVzc2x5XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RpZmllcnMgIT09IHByZXZQcm9wcy5tb2RpZmllcnMgJiYgdGhpcy5wcm9wcy5tb2RpZmllcnMgIT0gbnVsbCAmJiBwcmV2UHJvcHMubW9kaWZpZXJzICE9IG51bGwgJiYgKDAsIF91dGlscy5zaGFsbG93RXF1YWwpKHRoaXMucHJvcHMubW9kaWZpZXJzLCBwcmV2UHJvcHMubW9kaWZpZXJzKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIidtb2RpZmllcnMnIHByb3AgcmVmZXJlbmNlIHVwZGF0ZWQgZXZlbiB0aG91Z2ggYWxsIHZhbHVlcyBhcHBlYXIgdGhlIHNhbWUuXFxuQ29uc2lkZXIgbWVtb2l6aW5nIHRoZSAnbW9kaWZpZXJzJyBvYmplY3QgdG8gYXZvaWQgbmVlZGxlc3MgcmVuZGVyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmV2ZW50c0VuYWJsZWQgIT09IHByZXZQcm9wcy5ldmVudHNFbmFibGVkICYmIHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCA/IHRoaXMucG9wcGVySW5zdGFuY2UuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSA6IHRoaXMucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBBIHBsYWNlbWVudCBkaWZmZXJlbmNlIGluIHN0YXRlIG1lYW5zIHBvcHBlciBkZXRlcm1pbmVkIGEgbmV3IHBsYWNlbWVudFxuICAgIC8vIGFwYXJ0IGZyb20gdGhlIHByb3BzIHZhbHVlLiBCeSB0aGUgdGltZSB0aGUgcG9wcGVyIGVsZW1lbnQgaXMgcmVuZGVyZWQgd2l0aFxuICAgIC8vIHRoZSBuZXcgcG9zaXRpb24gUG9wcGVyIGhhcyBhbHJlYWR5IG1lYXN1cmVkIGl0LCBpZiB0aGUgcGxhY2UgY2hhbmdlIHRyaWdnZXJzXG4gICAgLy8gYSBzaXplIGNoYW5nZSBpdCB3aWxsIHJlc3VsdCBpbiBhIG1pc2FsaWduZWQgcG9wcGVyLiBTbyB3ZSBzY2hlZHVsZSBhbiB1cGRhdGUgdG8gYmUgc3VyZS5cblxuXG4gICAgaWYgKHByZXZTdGF0ZS5wbGFjZW1lbnQgIT09IHRoaXMuc3RhdGUucGxhY2VtZW50KSB7XG4gICAgICB0aGlzLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICgwLCBfdXRpbHMuc2V0UmVmKSh0aGlzLnByb3BzLmlubmVyUmVmLCBudWxsKTtcbiAgICB0aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuICgwLCBfdXRpbHMudW53cmFwQXJyYXkpKHRoaXMucHJvcHMuY2hpbGRyZW4pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRQb3BwZXJOb2RlLFxuICAgICAgc3R5bGU6IHRoaXMuZ2V0UG9wcGVyU3R5bGUoKSxcbiAgICAgIHBsYWNlbWVudDogdGhpcy5nZXRQb3BwZXJQbGFjZW1lbnQoKSxcbiAgICAgIG91dE9mQm91bmRhcmllczogdGhpcy5nZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZSgpLFxuICAgICAgc2NoZWR1bGVVcGRhdGU6IHRoaXMuc2NoZWR1bGVVcGRhdGUsXG4gICAgICBhcnJvd1Byb3BzOiB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRBcnJvd05vZGUsXG4gICAgICAgIHN0eWxlOiB0aGlzLmdldEFycm93U3R5bGUoKVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBJbm5lclBvcHBlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5Jbm5lclBvcHBlciA9IElubmVyUG9wcGVyO1xuKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoSW5uZXJQb3BwZXIsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcbiAgcmVmZXJlbmNlRWxlbWVudDogdW5kZWZpbmVkLFxuICBwb3NpdGlvbkZpeGVkOiBmYWxzZVxufSk7XG52YXIgcGxhY2VtZW50cyA9IF9wb3BwZXIuZGVmYXVsdC5wbGFjZW1lbnRzO1xuZXhwb3J0cy5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuZnVuY3Rpb24gUG9wcGVyKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSBfcmVmLnJlZmVyZW5jZUVsZW1lbnQsXG4gICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgW1wicmVmZXJlbmNlRWxlbWVudFwiXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9NYW5hZ2VyLk1hbmFnZXJSZWZlcmVuY2VOb2RlQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHJlZmVyZW5jZU5vZGUpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbm5lclBvcHBlciwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICByZWZlcmVuY2VFbGVtZW50OiByZWZlcmVuY2VFbGVtZW50ICE9PSB1bmRlZmluZWQgPyByZWZlcmVuY2VFbGVtZW50IDogcmVmZXJlbmNlTm9kZVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufSIsICJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBSZWZlcmVuY2U7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9NYW5hZ2VyID0gcmVxdWlyZShcIi4vTWFuYWdlclwiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgSW5uZXJSZWZlcmVuY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMi5kZWZhdWx0KShJbm5lclJlZmVyZW5jZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5uZXJSZWZlcmVuY2UoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCBcInJlZkhhbmRsZXJcIiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICgwLCBfdXRpbHMuc2V0UmVmKShfdGhpcy5wcm9wcy5pbm5lclJlZiwgbm9kZSk7XG4gICAgICAoMCwgX3V0aWxzLnNhZmVJbnZva2UpKF90aGlzLnByb3BzLnNldFJlZmVyZW5jZU5vZGUsIG5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbm5lclJlZmVyZW5jZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgKDAsIF91dGlscy5zZXRSZWYpKHRoaXMucHJvcHMuaW5uZXJSZWYsIG51bGwpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgKDAsIF93YXJuaW5nLmRlZmF1bHQpKEJvb2xlYW4odGhpcy5wcm9wcy5zZXRSZWZlcmVuY2VOb2RlKSwgJ2BSZWZlcmVuY2VgIHNob3VsZCBub3QgYmUgdXNlZCBvdXRzaWRlIG9mIGEgYE1hbmFnZXJgIGNvbXBvbmVudC4nKTtcbiAgICByZXR1cm4gKDAsIF91dGlscy51bndyYXBBcnJheSkodGhpcy5wcm9wcy5jaGlsZHJlbikoe1xuICAgICAgcmVmOiB0aGlzLnJlZkhhbmRsZXJcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSW5uZXJSZWZlcmVuY2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIFJlZmVyZW5jZShwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfTWFuYWdlci5NYW5hZ2VyUmVmZXJlbmNlTm9kZVNldHRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChzZXRSZWZlcmVuY2VOb2RlKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5uZXJSZWZlcmVuY2UsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgc2V0UmVmZXJlbmNlTm9kZTogc2V0UmVmZXJlbmNlTm9kZVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufSIsICJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQb3BwZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BvcHBlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBsYWNlbWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BvcHBlci5wbGFjZW1lbnRzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hbmFnZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01hbmFnZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWZlcmVuY2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1JlZmVyZW5jZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Qb3BwZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9Qb3BwZXJcIikpO1xuXG52YXIgX01hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01hbmFnZXJcIikpO1xuXG52YXIgX1JlZmVyZW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmVmZXJlbmNlXCIpKTsiLCAiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwicHJvcC10eXBlc1wiKSxyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvaXNEYXRlXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc1ZhbGlkXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9mb3JtYXRcIikscmVxdWlyZShcImRhdGUtZm5zL2FkZE1pbnV0ZXNcIikscmVxdWlyZShcImRhdGUtZm5zL2FkZEhvdXJzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9hZGREYXlzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9hZGRXZWVrc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvYWRkTW9udGhzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9hZGRZZWFyc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc3ViTWludXRlc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc3ViSG91cnNcIikscmVxdWlyZShcImRhdGUtZm5zL3N1YkRheXNcIikscmVxdWlyZShcImRhdGUtZm5zL3N1YldlZWtzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9zdWJNb250aHNcIikscmVxdWlyZShcImRhdGUtZm5zL3N1YlllYXJzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXRTZWNvbmRzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXRNaW51dGVzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXRIb3Vyc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZ2V0RGF5XCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXREYXRlXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXRJU09XZWVrXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9nZXRNb250aFwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZ2V0UXVhcnRlclwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZ2V0WWVhclwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZ2V0VGltZVwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc2V0U2Vjb25kc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc2V0TWludXRlc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc2V0SG91cnNcIikscmVxdWlyZShcImRhdGUtZm5zL3NldE1vbnRoXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9zZXRRdWFydGVyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9zZXRZZWFyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9taW5cIikscmVxdWlyZShcImRhdGUtZm5zL21heFwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRoc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFyc1wiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc3RhcnRPZkRheVwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc3RhcnRPZldlZWtcIikscmVxdWlyZShcImRhdGUtZm5zL3N0YXJ0T2ZNb250aFwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvc3RhcnRPZlF1YXJ0ZXJcIikscmVxdWlyZShcImRhdGUtZm5zL3N0YXJ0T2ZZZWFyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9lbmRPZkRheVwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvZW5kT2ZXZWVrXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9lbmRPZk1vbnRoXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc0VxdWFsXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc1NhbWVEYXlcIikscmVxdWlyZShcImRhdGUtZm5zL2lzU2FtZU1vbnRoXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc1NhbWVZZWFyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc1NhbWVRdWFydGVyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc0FmdGVyXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9pc0JlZm9yZVwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvaXNXaXRoaW5JbnRlcnZhbFwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvdG9EYXRlXCIpLHJlcXVpcmUoXCJkYXRlLWZucy9wYXJzZVwiKSxyZXF1aXJlKFwiZGF0ZS1mbnMvcGFyc2VJU09cIikscmVxdWlyZShcInJlYWN0LW9uY2xpY2tvdXRzaWRlXCIpLHJlcXVpcmUoXCJyZWFjdC1wb3BwZXJcIikscmVxdWlyZShcInJlYWN0LWRvbVwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCIsXCJyZWFjdFwiLFwicHJvcC10eXBlc1wiLFwiY2xhc3NuYW1lc1wiLFwiZGF0ZS1mbnMvaXNEYXRlXCIsXCJkYXRlLWZucy9pc1ZhbGlkXCIsXCJkYXRlLWZucy9mb3JtYXRcIixcImRhdGUtZm5zL2FkZE1pbnV0ZXNcIixcImRhdGUtZm5zL2FkZEhvdXJzXCIsXCJkYXRlLWZucy9hZGREYXlzXCIsXCJkYXRlLWZucy9hZGRXZWVrc1wiLFwiZGF0ZS1mbnMvYWRkTW9udGhzXCIsXCJkYXRlLWZucy9hZGRZZWFyc1wiLFwiZGF0ZS1mbnMvc3ViTWludXRlc1wiLFwiZGF0ZS1mbnMvc3ViSG91cnNcIixcImRhdGUtZm5zL3N1YkRheXNcIixcImRhdGUtZm5zL3N1YldlZWtzXCIsXCJkYXRlLWZucy9zdWJNb250aHNcIixcImRhdGUtZm5zL3N1YlllYXJzXCIsXCJkYXRlLWZucy9nZXRTZWNvbmRzXCIsXCJkYXRlLWZucy9nZXRNaW51dGVzXCIsXCJkYXRlLWZucy9nZXRIb3Vyc1wiLFwiZGF0ZS1mbnMvZ2V0RGF5XCIsXCJkYXRlLWZucy9nZXREYXRlXCIsXCJkYXRlLWZucy9nZXRJU09XZWVrXCIsXCJkYXRlLWZucy9nZXRNb250aFwiLFwiZGF0ZS1mbnMvZ2V0UXVhcnRlclwiLFwiZGF0ZS1mbnMvZ2V0WWVhclwiLFwiZGF0ZS1mbnMvZ2V0VGltZVwiLFwiZGF0ZS1mbnMvc2V0U2Vjb25kc1wiLFwiZGF0ZS1mbnMvc2V0TWludXRlc1wiLFwiZGF0ZS1mbnMvc2V0SG91cnNcIixcImRhdGUtZm5zL3NldE1vbnRoXCIsXCJkYXRlLWZucy9zZXRRdWFydGVyXCIsXCJkYXRlLWZucy9zZXRZZWFyXCIsXCJkYXRlLWZucy9taW5cIixcImRhdGUtZm5zL21heFwiLFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXCIsXCJkYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRoc1wiLFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJXZWVrc1wiLFwiZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFyc1wiLFwiZGF0ZS1mbnMvc3RhcnRPZkRheVwiLFwiZGF0ZS1mbnMvc3RhcnRPZldlZWtcIixcImRhdGUtZm5zL3N0YXJ0T2ZNb250aFwiLFwiZGF0ZS1mbnMvc3RhcnRPZlF1YXJ0ZXJcIixcImRhdGUtZm5zL3N0YXJ0T2ZZZWFyXCIsXCJkYXRlLWZucy9lbmRPZkRheVwiLFwiZGF0ZS1mbnMvZW5kT2ZXZWVrXCIsXCJkYXRlLWZucy9lbmRPZk1vbnRoXCIsXCJkYXRlLWZucy9pc0VxdWFsXCIsXCJkYXRlLWZucy9pc1NhbWVEYXlcIixcImRhdGUtZm5zL2lzU2FtZU1vbnRoXCIsXCJkYXRlLWZucy9pc1NhbWVZZWFyXCIsXCJkYXRlLWZucy9pc1NhbWVRdWFydGVyXCIsXCJkYXRlLWZucy9pc0FmdGVyXCIsXCJkYXRlLWZucy9pc0JlZm9yZVwiLFwiZGF0ZS1mbnMvaXNXaXRoaW5JbnRlcnZhbFwiLFwiZGF0ZS1mbnMvdG9EYXRlXCIsXCJkYXRlLWZucy9wYXJzZVwiLFwiZGF0ZS1mbnMvcGFyc2VJU09cIixcInJlYWN0LW9uY2xpY2tvdXRzaWRlXCIsXCJyZWFjdC1wb3BwZXJcIixcInJlYWN0LWRvbVwiXSx0KTp0KChlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuRGF0ZVBpY2tlcj17fSxlLlJlYWN0LGUuUHJvcFR5cGVzLGUuY2xhc3NOYW1lcyxlLmlzRGF0ZSxlLmlzVmFsaWREYXRlLGUuZm9ybWF0LGUuYWRkTWludXRlcyxlLmFkZEhvdXJzLGUudXRpbHMkMixlLnV0aWxzJDMsZS5hZGRNb250aHMsZS5hZGRZZWFycyxudWxsLG51bGwsZS5zdWJEYXlzLGUuc3ViV2Vla3MsZS5zdWJNb250aHMsZS5zdWJZZWFycyxlLmdldFNlY29uZHMsZS5nZXRNaW51dGVzLGUuZ2V0SG91cnMsZS5nZXREYXksZS5nZXREYXRlLGUuZ2V0SVNPV2VlayxlLmdldE1vbnRoLGUuZ2V0UXVhcnRlcixlLmdldFllYXIsZS5nZXRUaW1lLGUuc2V0U2Vjb25kcyxlLnNldE1pbnV0ZXMsZS5zZXRIb3VycyxlLnV0aWxzLGUudXRpbHMkMSxlLnV0aWxzJDQsZS5taW4sZS5tYXgsZS5kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMsZS5kaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyxudWxsLGUuZGlmZmVyZW5jZUluQ2FsZW5kYXJZZWFycyxlLnN0YXJ0T2ZEYXksZS5zdGFydE9mV2VlayxlLnN0YXJ0T2ZNb250aCxlLnN0YXJ0T2ZRdWFydGVyLGUuc3RhcnRPZlllYXIsZS5lbmRPZkRheSxudWxsLG51bGwsZS5kZklzRXF1YWwsZS5kZklzU2FtZURheSxlLmRmSXNTYW1lTW9udGgsZS5kZklzU2FtZVllYXIsZS5kZklzU2FtZVF1YXJ0ZXIsZS5pc0FmdGVyLGUuaXNCZWZvcmUsZS5pc1dpdGhpbkludGVydmFsLGUudG9EYXRlLGUucGFyc2UsZS5wYXJzZUlTTyxlLm9uQ2xpY2tPdXRzaWRlLGUuUmVhY3RQb3BwZXIsZS5SZWFjdERPTSl9KHRoaXMsKGZ1bmN0aW9uKGUsdCxyLGEsbixvLHMsaSxwLGwsZCxjLHUsZixoLG0seSx2LEQsdyxrLGcsYixDLFMsXyxNLFAsRSxOLE8sWSx4LFQsSSxMLEYsUixxLEEsVyxCLGosSCxLLFEsVixVLCQseixHLEosWCxaLGVlLHRlLHJlLGFlLG5lLG9lLHNlLGllLHBlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBsZShlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiZGVmYXVsdFwiaW4gZT9lOntkZWZhdWx0OmV9fXZhciBkZT1sZSh0KSxjZT1sZShhKSx1ZT1sZShuKSxmZT1sZShvKSxoZT1sZShzKSxtZT1sZShpKSx5ZT1sZShwKSx2ZT1sZShsKSxEZT1sZShkKSx3ZT1sZShjKSxrZT1sZSh1KSxnZT1sZShtKSxiZT1sZSh5KSxDZT1sZSh2KSxTZT1sZShEKSxfZT1sZSh3KSxNZT1sZShrKSxQZT1sZShnKSxFZT1sZShiKSxOZT1sZShDKSxPZT1sZShTKSxZZT1sZShfKSx4ZT1sZShNKSxUZT1sZShQKSxJZT1sZShFKSxMZT1sZShOKSxGZT1sZShPKSxSZT1sZShZKSxxZT1sZSh4KSxBZT1sZShUKSxXZT1sZShJKSxCZT1sZShMKSxqZT1sZShGKSxIZT1sZShSKSxLZT1sZShxKSxRZT1sZShXKSxWZT1sZShCKSxVZT1sZShqKSwkZT1sZShIKSx6ZT1sZShLKSxHZT1sZShRKSxKZT1sZShWKSxYZT1sZSh6KSxaZT1sZShHKSxldD1sZShKKSx0dD1sZShYKSxydD1sZShaKSxhdD1sZShlZSksbnQ9bGUodGUpLG90PWxlKHJlKSxzdD1sZShhZSksaXQ9bGUobmUpLHB0PWxlKG9lKSxsdD1sZShzZSksZHQ9bGUocGUpO2Z1bmN0aW9uIGN0KGUpe3JldHVybihjdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gdXQoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGZ0KGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBhPXRbcl07YS5lbnVtZXJhYmxlPWEuZW51bWVyYWJsZXx8ITEsYS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gYSYmKGEud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGEua2V5LGEpfX1mdW5jdGlvbiBodChlLHQscil7cmV0dXJuIHQmJmZ0KGUucHJvdG90eXBlLHQpLHImJmZ0KGUsciksZX1mdW5jdGlvbiBtdChlLHQscil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9ZnVuY3Rpb24geXQoKXtyZXR1cm4oeXQ9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9YXJndW1lbnRzW3RdO2Zvcih2YXIgYSBpbiByKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGEpJiYoZVthXT1yW2FdKX1yZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiB2dChlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKGE9YS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksci5wdXNoLmFwcGx5KHIsYSl9cmV0dXJuIHJ9ZnVuY3Rpb24gRHQoZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/dnQoT2JqZWN0KHIpLCEwKS5mb3JFYWNoKChmdW5jdGlvbih0KXttdChlLHQsclt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6dnQoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9cmV0dXJuIGV9ZnVuY3Rpb24gd3QoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJmd0KGUsdCl9ZnVuY3Rpb24ga3QoZSl7cmV0dXJuKGt0PU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9KShlKX1mdW5jdGlvbiBndChlLHQpe3JldHVybihndD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZX0pKGUsdCl9ZnVuY3Rpb24gYnQoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9ZnVuY3Rpb24gQ3QoZSx0KXtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/YnQoZSk6dH1mdW5jdGlvbiBTdChlKXt2YXIgdD1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcixhPWt0KGUpO2lmKHQpe3ZhciBuPWt0KHRoaXMpLmNvbnN0cnVjdG9yO3I9UmVmbGVjdC5jb25zdHJ1Y3QoYSxhcmd1bWVudHMsbil9ZWxzZSByPWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBDdCh0aGlzLHIpfX1mdW5jdGlvbiBfdChlKXtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gTXQoZSl9KGUpfHxmdW5jdGlvbihlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiBBcnJheS5mcm9tKGUpfShlKXx8ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIE10KGUsdCk7dmFyIHI9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO1wiT2JqZWN0XCI9PT1yJiZlLmNvbnN0cnVjdG9yJiYocj1lLmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1yfHxcIlNldFwiPT09cilyZXR1cm4gQXJyYXkuZnJvbShlKTtpZihcIkFyZ3VtZW50c1wiPT09cnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QocikpcmV0dXJuIE10KGUsdCl9KGUpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfSgpfWZ1bmN0aW9uIE10KGUsdCl7KG51bGw9PXR8fHQ+ZS5sZW5ndGgpJiYodD1lLmxlbmd0aCk7Zm9yKHZhciByPTAsYT1uZXcgQXJyYXkodCk7cjx0O3IrKylhW3JdPWVbcl07cmV0dXJuIGF9ZnVuY3Rpb24gUHQoZSx0KXtzd2l0Y2goZSl7Y2FzZVwiUFwiOnJldHVybiB0LmRhdGUoe3dpZHRoOlwic2hvcnRcIn0pO2Nhc2VcIlBQXCI6cmV0dXJuIHQuZGF0ZSh7d2lkdGg6XCJtZWRpdW1cIn0pO2Nhc2VcIlBQUFwiOnJldHVybiB0LmRhdGUoe3dpZHRoOlwibG9uZ1wifSk7Y2FzZVwiUFBQUFwiOmRlZmF1bHQ6cmV0dXJuIHQuZGF0ZSh7d2lkdGg6XCJmdWxsXCJ9KX19ZnVuY3Rpb24gRXQoZSx0KXtzd2l0Y2goZSl7Y2FzZVwicFwiOnJldHVybiB0LnRpbWUoe3dpZHRoOlwic2hvcnRcIn0pO2Nhc2VcInBwXCI6cmV0dXJuIHQudGltZSh7d2lkdGg6XCJtZWRpdW1cIn0pO2Nhc2VcInBwcFwiOnJldHVybiB0LnRpbWUoe3dpZHRoOlwibG9uZ1wifSk7Y2FzZVwicHBwcFwiOmRlZmF1bHQ6cmV0dXJuIHQudGltZSh7d2lkdGg6XCJmdWxsXCJ9KX19dmFyIE50PXtwOkV0LFA6ZnVuY3Rpb24oZSx0KXt2YXIgcixhPWUubWF0Y2goLyhQKykocCspPy8pLG49YVsxXSxvPWFbMl07aWYoIW8pcmV0dXJuIFB0KGUsdCk7c3dpdGNoKG4pe2Nhc2VcIlBcIjpyPXQuZGF0ZVRpbWUoe3dpZHRoOlwic2hvcnRcIn0pO2JyZWFrO2Nhc2VcIlBQXCI6cj10LmRhdGVUaW1lKHt3aWR0aDpcIm1lZGl1bVwifSk7YnJlYWs7Y2FzZVwiUFBQXCI6cj10LmRhdGVUaW1lKHt3aWR0aDpcImxvbmdcIn0pO2JyZWFrO2Nhc2VcIlBQUFBcIjpkZWZhdWx0OnI9dC5kYXRlVGltZSh7d2lkdGg6XCJmdWxsXCJ9KX1yZXR1cm4gci5yZXBsYWNlKFwie3tkYXRlfX1cIixQdChuLHQpKS5yZXBsYWNlKFwie3t0aW1lfX1cIixFdChvLHQpKX19LE90PTEyLFl0PS9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO2Z1bmN0aW9uIHh0KGUpe3ZhciB0PWU/XCJzdHJpbmdcIj09dHlwZW9mIGV8fGUgaW5zdGFuY2VvZiBTdHJpbmc/cHQuZGVmYXVsdChlKTpzdC5kZWZhdWx0KGUpOm5ldyBEYXRlO3JldHVybiBJdCh0KT90Om51bGx9ZnVuY3Rpb24gVHQoZSx0LHIsYSl7dmFyIG49bnVsbCxvPUp0KHIpfHxKdChHdCgpKSxzPSEwO3JldHVybiBBcnJheS5pc0FycmF5KHQpPyh0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciByPWl0LmRlZmF1bHQoZSx0LG5ldyBEYXRlLHtsb2NhbGU6b30pO2EmJihzPUl0KHIpJiZlPT09aGUuZGVmYXVsdChyLHQse2F3YXJlT2ZVbmljb2RlVG9rZW5zOiEwfSkpLEl0KHIpJiZzJiYobj1yKX0pKSxuKToobj1pdC5kZWZhdWx0KGUsdCxuZXcgRGF0ZSx7bG9jYWxlOm99KSxhP3M9SXQobikmJmU9PT1oZS5kZWZhdWx0KG4sdCx7YXdhcmVPZlVuaWNvZGVUb2tlbnM6ITB9KTpJdChuKXx8KHQ9dC5tYXRjaChZdCkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1lWzBdO3JldHVyblwicFwiPT09dHx8XCJQXCI9PT10P28/KDAsTnRbdF0pKGUsby5mb3JtYXRMb25nKTp0OmV9KSkuam9pbihcIlwiKSxlLmxlbmd0aD4wJiYobj1pdC5kZWZhdWx0KGUsdC5zbGljZSgwLGUubGVuZ3RoKSxuZXcgRGF0ZSkpLEl0KG4pfHwobj1uZXcgRGF0ZShlKSkpLEl0KG4pJiZzP246bnVsbCl9ZnVuY3Rpb24gSXQoZSl7cmV0dXJuIGZlLmRlZmF1bHQoZSkmJmF0LmRlZmF1bHQoZSxuZXcgRGF0ZShcIjEvMS8xMDAwXCIpKX1mdW5jdGlvbiBMdChlLHQscil7aWYoXCJlblwiPT09cilyZXR1cm4gaGUuZGVmYXVsdChlLHQse2F3YXJlT2ZVbmljb2RlVG9rZW5zOiEwfSk7dmFyIGE9SnQocik7cmV0dXJuIHImJiFhJiZjb25zb2xlLndhcm4oJ0EgbG9jYWxlIG9iamVjdCB3YXMgbm90IGZvdW5kIGZvciB0aGUgcHJvdmlkZWQgc3RyaW5nIFtcIicuY29uY2F0KHIsJ1wiXS4nKSksIWEmJkd0KCkmJkp0KEd0KCkpJiYoYT1KdChHdCgpKSksaGUuZGVmYXVsdChlLHQse2xvY2FsZTphfHxudWxsLGF3YXJlT2ZVbmljb2RlVG9rZW5zOiEwfSl9ZnVuY3Rpb24gRnQoZSx0KXt2YXIgcj10LmhvdXIsYT12b2lkIDA9PT1yPzA6cixuPXQubWludXRlLG89dm9pZCAwPT09bj8wOm4scz10LnNlY29uZCxpPXZvaWQgMD09PXM/MDpzO3JldHVybiBSZS5kZWZhdWx0KEZlLmRlZmF1bHQoTGUuZGVmYXVsdChlLGkpLG8pLGEpfWZ1bmN0aW9uIFJ0KGUsdCl7dmFyIHI9dCYmSnQodCl8fEd0KCkmJkp0KEd0KCkpO3JldHVybiBPZS5kZWZhdWx0KGUscj97bG9jYWxlOnJ9Om51bGwpfWZ1bmN0aW9uIHF0KGUsdCl7cmV0dXJuIEx0KGUsXCJkZGRcIix0KX1mdW5jdGlvbiBBdChlKXtyZXR1cm4gVmUuZGVmYXVsdChlKX1mdW5jdGlvbiBXdChlLHQpe3ZhciByPUp0KHR8fEd0KCkpO3JldHVybiBVZS5kZWZhdWx0KGUse2xvY2FsZTpyfSl9ZnVuY3Rpb24gQnQoZSl7cmV0dXJuICRlLmRlZmF1bHQoZSl9ZnVuY3Rpb24ganQoZSl7cmV0dXJuIEdlLmRlZmF1bHQoZSl9ZnVuY3Rpb24gSHQoZSl7cmV0dXJuIHplLmRlZmF1bHQoZSl9ZnVuY3Rpb24gS3QoZSx0KXtyZXR1cm4gZSYmdD90dC5kZWZhdWx0KGUsdCk6IWUmJiF0fWZ1bmN0aW9uIFF0KGUsdCl7cmV0dXJuIGUmJnQ/ZXQuZGVmYXVsdChlLHQpOiFlJiYhdH1mdW5jdGlvbiBWdChlLHQpe3JldHVybiBlJiZ0P3J0LmRlZmF1bHQoZSx0KTohZSYmIXR9ZnVuY3Rpb24gVXQoZSx0KXtyZXR1cm4gZSYmdD9aZS5kZWZhdWx0KGUsdCk6IWUmJiF0fWZ1bmN0aW9uICR0KGUsdCl7cmV0dXJuIGUmJnQ/WGUuZGVmYXVsdChlLHQpOiFlJiYhdH1mdW5jdGlvbiB6dChlLHQscil7dmFyIGEsbj1WZS5kZWZhdWx0KHQpLG89SmUuZGVmYXVsdChyKTt0cnl7YT1vdC5kZWZhdWx0KGUse3N0YXJ0Om4sZW5kOm99KX1jYXRjaChlKXthPSExfXJldHVybiBhfWZ1bmN0aW9uIEd0KCl7cmV0dXJuKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Omdsb2JhbCkuX19sb2NhbGVJZF9ffWZ1bmN0aW9uIEp0KGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpnbG9iYWw7cmV0dXJuIHQuX19sb2NhbGVEYXRhX18/dC5fX2xvY2FsZURhdGFfX1tlXTpudWxsfXJldHVybiBlfWZ1bmN0aW9uIFh0KGUsdCl7cmV0dXJuIEx0KHFlLmRlZmF1bHQoeHQoKSxlKSxcIkxMTExcIix0KX1mdW5jdGlvbiBadChlLHQpe3JldHVybiBMdChxZS5kZWZhdWx0KHh0KCksZSksXCJMTExcIix0KX1mdW5jdGlvbiBlcihlLHQpe3JldHVybiBMdChBZS5kZWZhdWx0KHh0KCksZSksXCJRUVFcIix0KX1mdW5jdGlvbiB0cihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1pbkRhdGUsYT10Lm1heERhdGUsbj10LmV4Y2x1ZGVEYXRlcyxvPXQuaW5jbHVkZURhdGVzLHM9dC5maWx0ZXJEYXRlO3JldHVybiBwcihlLHttaW5EYXRlOnIsbWF4RGF0ZTphfSl8fG4mJm4uc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIFV0KGUsdCl9KSl8fG8mJiFvLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBVdChlLHQpfSkpfHxzJiYhcyh4dChlKSl8fCExfWZ1bmN0aW9uIHJyKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxyPXQuZXhjbHVkZURhdGVzO3JldHVybiByJiZyLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBVdChlLHQpfSkpfHwhMX1mdW5jdGlvbiBhcihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1pbkRhdGUsYT10Lm1heERhdGUsbj10LmV4Y2x1ZGVEYXRlcyxvPXQuaW5jbHVkZURhdGVzLHM9dC5maWx0ZXJEYXRlO3JldHVybiBwcihlLHttaW5EYXRlOnIsbWF4RGF0ZTphfSl8fG4mJm4uc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIFF0KGUsdCl9KSl8fG8mJiFvLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBRdChlLHQpfSkpfHxzJiYhcyh4dChlKSl8fCExfWZ1bmN0aW9uIG5yKGUsdCxyLGEpe3ZhciBuPVRlLmRlZmF1bHQoZSksbz1ZZS5kZWZhdWx0KGUpLHM9VGUuZGVmYXVsdCh0KSxpPVllLmRlZmF1bHQodCkscD1UZS5kZWZhdWx0KGEpO3JldHVybiBuPT09cyYmbj09PXA/bzw9ciYmcjw9aTpuPHM/cD09PW4mJm88PXJ8fHA9PT1zJiZpPj1yfHxwPHMmJnA+bjp2b2lkIDB9ZnVuY3Rpb24gb3IoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LHI9dC5taW5EYXRlLGE9dC5tYXhEYXRlLG49dC5leGNsdWRlRGF0ZXMsbz10LmluY2x1ZGVEYXRlcyxzPXQuZmlsdGVyRGF0ZTtyZXR1cm4gcHIoZSx7bWluRGF0ZTpyLG1heERhdGU6YX0pfHxuJiZuLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBWdChlLHQpfSkpfHxvJiYhby5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gVnQoZSx0KX0pKXx8cyYmIXMoeHQoZSkpfHwhMX1mdW5jdGlvbiBzcihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1pbkRhdGUsYT10Lm1heERhdGUsbj1uZXcgRGF0ZShlLDAsMSk7cmV0dXJuIHByKG4se21pbkRhdGU6cixtYXhEYXRlOmF9KXx8ITF9ZnVuY3Rpb24gaXIoZSx0LHIsYSl7dmFyIG49VGUuZGVmYXVsdChlKSxvPXhlLmRlZmF1bHQoZSkscz1UZS5kZWZhdWx0KHQpLGk9eGUuZGVmYXVsdCh0KSxwPVRlLmRlZmF1bHQoYSk7cmV0dXJuIG49PT1zJiZuPT09cD9vPD1yJiZyPD1pOm48cz9wPT09biYmbzw9cnx8cD09PXMmJmk+PXJ8fHA8cyYmcD5uOnZvaWQgMH1mdW5jdGlvbiBwcihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1pbkRhdGUsYT10Lm1heERhdGU7cmV0dXJuIHImJkhlLmRlZmF1bHQoZSxyKTwwfHxhJiZIZS5kZWZhdWx0KGUsYSk+MH1mdW5jdGlvbiBscihlLHQpe3JldHVybiB0LnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBQZS5kZWZhdWx0KHQpPT09UGUuZGVmYXVsdChlKSYmTWUuZGVmYXVsdCh0KT09PU1lLmRlZmF1bHQoZSl9KSl9ZnVuY3Rpb24gZHIoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LHI9dC5leGNsdWRlVGltZXMsYT10LmluY2x1ZGVUaW1lcyxuPXQuZmlsdGVyVGltZTtyZXR1cm4gciYmbHIoZSxyKXx8YSYmIWxyKGUsYSl8fG4mJiFuKGUpfHwhMX1mdW5jdGlvbiBjcihlLHQpe3ZhciByPXQubWluVGltZSxhPXQubWF4VGltZTtpZighcnx8IWEpdGhyb3cgbmV3IEVycm9yKFwiQm90aCBtaW5UaW1lIGFuZCBtYXhUaW1lIHByb3BzIHJlcXVpcmVkXCIpO3ZhciBuLG89eHQoKSxzPVJlLmRlZmF1bHQoRmUuZGVmYXVsdChvLE1lLmRlZmF1bHQoZSkpLFBlLmRlZmF1bHQoZSkpLGk9UmUuZGVmYXVsdChGZS5kZWZhdWx0KG8sTWUuZGVmYXVsdChyKSksUGUuZGVmYXVsdChyKSkscD1SZS5kZWZhdWx0KEZlLmRlZmF1bHQobyxNZS5kZWZhdWx0KGEpKSxQZS5kZWZhdWx0KGEpKTt0cnl7bj0hb3QuZGVmYXVsdChzLHtzdGFydDppLGVuZDpwfSl9Y2F0Y2goZSl7bj0hMX1yZXR1cm4gbn1mdW5jdGlvbiB1cihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1pbkRhdGUsYT10LmluY2x1ZGVEYXRlcyxuPUNlLmRlZmF1bHQoZSwxKTtyZXR1cm4gciYmS2UuZGVmYXVsdChyLG4pPjB8fGEmJmEuZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiBLZS5kZWZhdWx0KGUsbik+MH0pKXx8ITF9ZnVuY3Rpb24gZnIoZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LHI9dC5tYXhEYXRlLGE9dC5pbmNsdWRlRGF0ZXMsbj13ZS5kZWZhdWx0KGUsMSk7cmV0dXJuIHImJktlLmRlZmF1bHQobixyKT4wfHxhJiZhLmV2ZXJ5KChmdW5jdGlvbihlKXtyZXR1cm4gS2UuZGVmYXVsdChuLGUpPjB9KSl8fCExfWZ1bmN0aW9uIGhyKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxyPXQubWluRGF0ZSxhPXQuaW5jbHVkZURhdGVzLG49U2UuZGVmYXVsdChlLDEpO3JldHVybiByJiZRZS5kZWZhdWx0KHIsbik+MHx8YSYmYS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuIFFlLmRlZmF1bHQoZSxuKT4wfSkpfHwhMX1mdW5jdGlvbiBtcihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1heERhdGUsYT10LmluY2x1ZGVEYXRlcyxuPWtlLmRlZmF1bHQoZSwxKTtyZXR1cm4gciYmUWUuZGVmYXVsdChuLHIpPjB8fGEmJmEuZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiBRZS5kZWZhdWx0KG4sZSk+MH0pKXx8ITF9ZnVuY3Rpb24geXIoZSl7dmFyIHQ9ZS5taW5EYXRlLHI9ZS5pbmNsdWRlRGF0ZXM7aWYociYmdCl7dmFyIGE9ci5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBIZS5kZWZhdWx0KGUsdCk+PTB9KSk7cmV0dXJuIEJlLmRlZmF1bHQoYSl9cmV0dXJuIHI/QmUuZGVmYXVsdChyKTp0fWZ1bmN0aW9uIHZyKGUpe3ZhciB0PWUubWF4RGF0ZSxyPWUuaW5jbHVkZURhdGVzO2lmKHImJnQpe3ZhciBhPXIuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gSGUuZGVmYXVsdChlLHQpPD0wfSkpO3JldHVybiBqZS5kZWZhdWx0KGEpfXJldHVybiByP2plLmRlZmF1bHQocik6dH1mdW5jdGlvbiBEcigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06W10sdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkXCIscj1uZXcgTWFwLGE9MCxuPWUubGVuZ3RoO2E8bjthKyspe3ZhciBvPWVbYV07aWYodWUuZGVmYXVsdChvKSl7dmFyIHM9THQobyxcIk1NLmRkLnl5eXlcIiksaT1yLmdldChzKXx8W107aS5pbmNsdWRlcyh0KXx8KGkucHVzaCh0KSxyLnNldChzLGkpKX1lbHNlIGlmKFwib2JqZWN0XCI9PT1jdChvKSl7dmFyIHA9T2JqZWN0LmtleXMobyksbD1wWzBdLGQ9b1twWzBdXTtpZihcInN0cmluZ1wiPT10eXBlb2YgbCYmZC5jb25zdHJ1Y3Rvcj09PUFycmF5KWZvcih2YXIgYz0wLHU9ZC5sZW5ndGg7Yzx1O2MrKyl7dmFyIGY9THQoZFtjXSxcIk1NLmRkLnl5eXlcIiksaD1yLmdldChmKXx8W107aC5pbmNsdWRlcyhsKXx8KGgucHVzaChsKSxyLnNldChmLGgpKX19fXJldHVybiByfWZ1bmN0aW9uIHdyKGUsdCxyLGEsbil7Zm9yKHZhciBvPW4ubGVuZ3RoLHM9W10saT0wO2k8bztpKyspe3ZhciBwPW1lLmRlZmF1bHQoeWUuZGVmYXVsdChlLFBlLmRlZmF1bHQobltpXSkpLE1lLmRlZmF1bHQobltpXSkpLGw9bWUuZGVmYXVsdChlLChyKzEpKmEpO2F0LmRlZmF1bHQocCx0KSYmbnQuZGVmYXVsdChwLGwpJiZzLnB1c2gobltpXSl9cmV0dXJuIHN9ZnVuY3Rpb24ga3IoZSl7cmV0dXJuIGU8MTA/XCIwXCIuY29uY2F0KGUpOlwiXCIuY29uY2F0KGUpfWZ1bmN0aW9uIGdyKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpPdCxyPU1hdGguY2VpbChUZS5kZWZhdWx0KGUpL3QpKnQsYT1yLSh0LTEpO3JldHVybntzdGFydFBlcmlvZDphLGVuZFBlcmlvZDpyfX1mdW5jdGlvbiBicihlLHQscixhKXtmb3IodmFyIG49W10sbz0wO288Mip0KzE7bysrKXt2YXIgcz1lK3QtbyxpPSEwO3ImJihpPVRlLmRlZmF1bHQocik8PXMpLGEmJmkmJihpPVRlLmRlZmF1bHQoYSk+PXMpLGkmJm4ucHVzaChzKX1yZXR1cm4gbn12YXIgQ3I9ZnVuY3Rpb24oZSl7d3QocixlKTt2YXIgdD1TdChyKTtmdW5jdGlvbiByKGUpe3ZhciBhO3V0KHRoaXMsciksbXQoYnQoYT10LmNhbGwodGhpcyxlKSksXCJyZW5kZXJPcHRpb25zXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YS5wcm9wcy55ZWFyLHQ9YS5zdGF0ZS55ZWFyc0xpc3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTplPT09dD9cInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLS1zZWxlY3RlZF95ZWFyXCI6XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvblwiLGtleTp0LG9uQ2xpY2s6YS5vbkNoYW5nZS5iaW5kKGJ0KGEpLHQpfSxlPT09dD9kZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItb3B0aW9uLS1zZWxlY3RlZFwifSxcIlx1MjcxM1wiKTpcIlwiLHQpfSkpLHI9YS5wcm9wcy5taW5EYXRlP1RlLmRlZmF1bHQoYS5wcm9wcy5taW5EYXRlKTpudWxsLG49YS5wcm9wcy5tYXhEYXRlP1RlLmRlZmF1bHQoYS5wcm9wcy5tYXhEYXRlKTpudWxsO3JldHVybiBuJiZhLnN0YXRlLnllYXJzTGlzdC5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZT09PW59KSl8fHQudW5zaGlmdChkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1vcHRpb25cIixrZXk6XCJ1cGNvbWluZ1wiLG9uQ2xpY2s6YS5pbmNyZW1lbnRZZWFyc30sZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYVwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzIHJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXllYXJzLXVwY29taW5nXCJ9KSkpLHImJmEuc3RhdGUueWVhcnNMaXN0LmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09cn0pKXx8dC5wdXNoKGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLW9wdGlvblwiLGtleTpcInByZXZpb3VzXCIsb25DbGljazphLmRlY3JlbWVudFllYXJzfSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24gcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMgcmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0teWVhcnMtcHJldmlvdXNcIn0pKSksdH0pKSxtdChidChhKSxcIm9uQ2hhbmdlXCIsKGZ1bmN0aW9uKGUpe2EucHJvcHMub25DaGFuZ2UoZSl9KSksbXQoYnQoYSksXCJoYW5kbGVDbGlja091dHNpZGVcIiwoZnVuY3Rpb24oKXthLnByb3BzLm9uQ2FuY2VsKCl9KSksbXQoYnQoYSksXCJzaGlmdFllYXJzXCIsKGZ1bmN0aW9uKGUpe3ZhciB0PWEuc3RhdGUueWVhcnNMaXN0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQrZX0pKTthLnNldFN0YXRlKHt5ZWFyc0xpc3Q6dH0pfSkpLG10KGJ0KGEpLFwiaW5jcmVtZW50WWVhcnNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gYS5zaGlmdFllYXJzKDEpfSkpLG10KGJ0KGEpLFwiZGVjcmVtZW50WWVhcnNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gYS5zaGlmdFllYXJzKC0xKX0pKTt2YXIgbj1lLnllYXJEcm9wZG93bkl0ZW1OdW1iZXIsbz1lLnNjcm9sbGFibGVZZWFyRHJvcGRvd24scz1ufHwobz8xMDo1KTtyZXR1cm4gYS5zdGF0ZT17eWVhcnNMaXN0OmJyKGEucHJvcHMueWVhcixzLGEucHJvcHMubWluRGF0ZSxhLnByb3BzLm1heERhdGUpfSxhfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1jZS5kZWZhdWx0KHtcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd25cIjohMCxcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tLXNjcm9sbGFibGVcIjp0aGlzLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd259KTtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTplfSx0aGlzLnJlbmRlck9wdGlvbnMoKSl9fV0pLHJ9KGRlLmRlZmF1bHQuQ29tcG9uZW50KSxTcj1sdC5kZWZhdWx0KENyKSxfcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoKXt2YXIgZTt1dCh0aGlzLHIpO2Zvcih2YXIgYT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGEpLG89MDtvPGE7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBtdChidChlPXQuY2FsbC5hcHBseSh0LFt0aGlzXS5jb25jYXQobikpKSxcInN0YXRlXCIse2Ryb3Bkb3duVmlzaWJsZTohMX0pLG10KGJ0KGUpLFwicmVuZGVyU2VsZWN0T3B0aW9uc1wiLChmdW5jdGlvbigpe2Zvcih2YXIgdD1lLnByb3BzLm1pbkRhdGU/VGUuZGVmYXVsdChlLnByb3BzLm1pbkRhdGUpOjE5MDAscj1lLnByb3BzLm1heERhdGU/VGUuZGVmYXVsdChlLnByb3BzLm1heERhdGUpOjIxMDAsYT1bXSxuPXQ7bjw9cjtuKyspYS5wdXNoKGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLHtrZXk6bix2YWx1ZTpufSxuKSk7cmV0dXJuIGF9KSksbXQoYnQoZSksXCJvblNlbGVjdENoYW5nZVwiLChmdW5jdGlvbih0KXtlLm9uQ2hhbmdlKHQudGFyZ2V0LnZhbHVlKX0pKSxtdChidChlKSxcInJlbmRlclNlbGVjdE1vZGVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIse3ZhbHVlOmUucHJvcHMueWVhcixjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXNlbGVjdFwiLG9uQ2hhbmdlOmUub25TZWxlY3RDaGFuZ2V9LGUucmVuZGVyU2VsZWN0T3B0aW9ucygpKX0pKSxtdChidChlKSxcInJlbmRlclJlYWRWaWV3XCIsKGZ1bmN0aW9uKHQpe3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7a2V5OlwicmVhZFwiLHN0eWxlOnt2aXNpYmlsaXR5OnQ/XCJ2aXNpYmxlXCI6XCJoaWRkZW5cIn0sY2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1yZWFkLXZpZXdcIixvbkNsaWNrOmZ1bmN0aW9uKHQpe3JldHVybiBlLnRvZ2dsZURyb3Bkb3duKHQpfX0sZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tZG93bi1hcnJvd1wifSksZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXJlYWQtdmlldy0tc2VsZWN0ZWQteWVhclwifSxlLnByb3BzLnllYXIpKX0pKSxtdChidChlKSxcInJlbmRlckRyb3Bkb3duXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTcix7a2V5OlwiZHJvcGRvd25cIix5ZWFyOmUucHJvcHMueWVhcixvbkNoYW5nZTplLm9uQ2hhbmdlLG9uQ2FuY2VsOmUudG9nZ2xlRHJvcGRvd24sbWluRGF0ZTplLnByb3BzLm1pbkRhdGUsbWF4RGF0ZTplLnByb3BzLm1heERhdGUsc2Nyb2xsYWJsZVllYXJEcm9wZG93bjplLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd24seWVhckRyb3Bkb3duSXRlbU51bWJlcjplLnByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXJ9KX0pKSxtdChidChlKSxcInJlbmRlclNjcm9sbE1vZGVcIiwoZnVuY3Rpb24oKXt2YXIgdD1lLnN0YXRlLmRyb3Bkb3duVmlzaWJsZSxyPVtlLnJlbmRlclJlYWRWaWV3KCF0KV07cmV0dXJuIHQmJnIudW5zaGlmdChlLnJlbmRlckRyb3Bkb3duKCkpLHJ9KSksbXQoYnQoZSksXCJvbkNoYW5nZVwiLChmdW5jdGlvbih0KXtlLnRvZ2dsZURyb3Bkb3duKCksdCE9PWUucHJvcHMueWVhciYmZS5wcm9wcy5vbkNoYW5nZSh0KX0pKSxtdChidChlKSxcInRvZ2dsZURyb3Bkb3duXCIsKGZ1bmN0aW9uKHQpe2Uuc2V0U3RhdGUoe2Ryb3Bkb3duVmlzaWJsZTohZS5zdGF0ZS5kcm9wZG93blZpc2libGV9LChmdW5jdGlvbigpe2UucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlJiZlLmhhbmRsZVllYXJDaGFuZ2UoZS5wcm9wcy5kYXRlLHQpfSkpfSkpLG10KGJ0KGUpLFwiaGFuZGxlWWVhckNoYW5nZVwiLChmdW5jdGlvbih0LHIpe2Uub25TZWxlY3QodCxyKSxlLnNldE9wZW4oKX0pKSxtdChidChlKSxcIm9uU2VsZWN0XCIsKGZ1bmN0aW9uKHQscil7ZS5wcm9wcy5vblNlbGVjdCYmZS5wcm9wcy5vblNlbGVjdCh0LHIpfSkpLG10KGJ0KGUpLFwic2V0T3BlblwiLChmdW5jdGlvbigpe2UucHJvcHMuc2V0T3BlbiYmZS5wcm9wcy5zZXRPcGVuKCEwKX0pKSxlfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZTtzd2l0Y2godGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpe2Nhc2VcInNjcm9sbFwiOmU9dGhpcy5yZW5kZXJTY3JvbGxNb2RlKCk7YnJlYWs7Y2FzZVwic2VsZWN0XCI6ZT10aGlzLnJlbmRlclNlbGVjdE1vZGUoKX1yZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyIHJlYWN0LWRhdGVwaWNrZXJfX3llYXItZHJvcGRvd24tY29udGFpbmVyLS1cIi5jb25jYXQodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpfSxlKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLE1yPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcigpe3ZhciBlO3V0KHRoaXMscik7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYSksbz0wO288YTtvKyspbltvXT1hcmd1bWVudHNbb107cmV0dXJuIG10KGJ0KGU9dC5jYWxsLmFwcGx5KHQsW3RoaXNdLmNvbmNhdChuKSkpLFwicmVuZGVyT3B0aW9uc1wiLChmdW5jdGlvbigpe3JldHVybiBlLnByb3BzLm1vbnRoTmFtZXMubWFwKChmdW5jdGlvbih0LHIpe3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOmUucHJvcHMubW9udGg9PT1yP1wicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtb3B0aW9uIHJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbi0tc2VsZWN0ZWRfbW9udGhcIjpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvblwiLGtleTp0LG9uQ2xpY2s6ZS5vbkNoYW5nZS5iaW5kKGJ0KGUpLHIpfSxlLnByb3BzLm1vbnRoPT09cj9kZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLW9wdGlvbi0tc2VsZWN0ZWRcIn0sXCJcdTI3MTNcIik6XCJcIix0KX0pKX0pKSxtdChidChlKSxcIm9uQ2hhbmdlXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBlLnByb3BzLm9uQ2hhbmdlKHQpfSkpLG10KGJ0KGUpLFwiaGFuZGxlQ2xpY2tPdXRzaWRlXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvcHMub25DYW5jZWwoKX0pKSxlfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLWRyb3Bkb3duXCJ9LHRoaXMucmVuZGVyT3B0aW9ucygpKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLFByPWx0LmRlZmF1bHQoTXIpLEVyPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcigpe3ZhciBlO3V0KHRoaXMscik7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYSksbz0wO288YTtvKyspbltvXT1hcmd1bWVudHNbb107cmV0dXJuIG10KGJ0KGU9dC5jYWxsLmFwcGx5KHQsW3RoaXNdLmNvbmNhdChuKSkpLFwic3RhdGVcIix7ZHJvcGRvd25WaXNpYmxlOiExfSksbXQoYnQoZSksXCJyZW5kZXJTZWxlY3RPcHRpb25zXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIse2tleTp0LHZhbHVlOnR9LGUpfSkpfSkpLG10KGJ0KGUpLFwicmVuZGVyU2VsZWN0TW9kZVwiLChmdW5jdGlvbih0KXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIse3ZhbHVlOmUucHJvcHMubW9udGgsY2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtc2VsZWN0XCIsb25DaGFuZ2U6ZnVuY3Rpb24odCl7cmV0dXJuIGUub25DaGFuZ2UodC50YXJnZXQudmFsdWUpfX0sZS5yZW5kZXJTZWxlY3RPcHRpb25zKHQpKX0pKSxtdChidChlKSxcInJlbmRlclJlYWRWaWV3XCIsKGZ1bmN0aW9uKHQscil7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtrZXk6XCJyZWFkXCIsc3R5bGU6e3Zpc2liaWxpdHk6dD9cInZpc2libGVcIjpcImhpZGRlblwifSxjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1yZWFkLXZpZXdcIixvbkNsaWNrOmUudG9nZ2xlRHJvcGRvd259LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtcmVhZC12aWV3LS1kb3duLWFycm93XCJ9KSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXJlYWQtdmlldy0tc2VsZWN0ZWQtbW9udGhcIn0scltlLnByb3BzLm1vbnRoXSkpfSkpLG10KGJ0KGUpLFwicmVuZGVyRHJvcGRvd25cIiwoZnVuY3Rpb24odCl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChQcix7a2V5OlwiZHJvcGRvd25cIixtb250aDplLnByb3BzLm1vbnRoLG1vbnRoTmFtZXM6dCxvbkNoYW5nZTplLm9uQ2hhbmdlLG9uQ2FuY2VsOmUudG9nZ2xlRHJvcGRvd259KX0pKSxtdChidChlKSxcInJlbmRlclNjcm9sbE1vZGVcIiwoZnVuY3Rpb24odCl7dmFyIHI9ZS5zdGF0ZS5kcm9wZG93blZpc2libGUsYT1bZS5yZW5kZXJSZWFkVmlldyghcix0KV07cmV0dXJuIHImJmEudW5zaGlmdChlLnJlbmRlckRyb3Bkb3duKHQpKSxhfSkpLG10KGJ0KGUpLFwib25DaGFuZ2VcIiwoZnVuY3Rpb24odCl7ZS50b2dnbGVEcm9wZG93bigpLHQhPT1lLnByb3BzLm1vbnRoJiZlLnByb3BzLm9uQ2hhbmdlKHQpfSkpLG10KGJ0KGUpLFwidG9nZ2xlRHJvcGRvd25cIiwoZnVuY3Rpb24oKXtyZXR1cm4gZS5zZXRTdGF0ZSh7ZHJvcGRvd25WaXNpYmxlOiFlLnN0YXRlLmRyb3Bkb3duVmlzaWJsZX0pfSkpLGV9cmV0dXJuIGh0KHIsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxyPVswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExXS5tYXAodGhpcy5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93bj9mdW5jdGlvbihlKXtyZXR1cm4gWnQoZSx0LnByb3BzLmxvY2FsZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBYdChlLHQucHJvcHMubG9jYWxlKX0pO3N3aXRjaCh0aGlzLnByb3BzLmRyb3Bkb3duTW9kZSl7Y2FzZVwic2Nyb2xsXCI6ZT10aGlzLnJlbmRlclNjcm9sbE1vZGUocik7YnJlYWs7Y2FzZVwic2VsZWN0XCI6ZT10aGlzLnJlbmRlclNlbGVjdE1vZGUocil9cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC1kcm9wZG93bi1jb250YWluZXIgcmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtZHJvcGRvd24tY29udGFpbmVyLS1cIi5jb25jYXQodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpfSxlKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpO2Z1bmN0aW9uIE5yKGUsdCl7Zm9yKHZhciByPVtdLGE9QnQoZSksbj1CdCh0KTshYXQuZGVmYXVsdChhLG4pOylyLnB1c2goeHQoYSkpLGE9d2UuZGVmYXVsdChhLDEpO3JldHVybiByfXZhciBPcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoZSl7dmFyIGE7cmV0dXJuIHV0KHRoaXMsciksbXQoYnQoYT10LmNhbGwodGhpcyxlKSksXCJyZW5kZXJPcHRpb25zXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc3RhdGUubW9udGhZZWFyc0xpc3QubWFwKChmdW5jdGlvbihlKXt2YXIgdD1JZS5kZWZhdWx0KGUpLHI9S3QoYS5wcm9wcy5kYXRlLGUpJiZRdChhLnByb3BzLmRhdGUsZSk7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6cj9cInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uIC0tc2VsZWN0ZWRfbW9udGgteWVhclwiOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1vcHRpb25cIixrZXk6dCxvbkNsaWNrOmEub25DaGFuZ2UuYmluZChidChhKSx0KX0scj9kZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItb3B0aW9uLS1zZWxlY3RlZFwifSxcIlx1MjcxM1wiKTpcIlwiLEx0KGUsYS5wcm9wcy5kYXRlRm9ybWF0LGEucHJvcHMubG9jYWxlKSl9KSl9KSksbXQoYnQoYSksXCJvbkNoYW5nZVwiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5wcm9wcy5vbkNoYW5nZShlKX0pKSxtdChidChhKSxcImhhbmRsZUNsaWNrT3V0c2lkZVwiLChmdW5jdGlvbigpe2EucHJvcHMub25DYW5jZWwoKX0pKSxhLnN0YXRlPXttb250aFllYXJzTGlzdDpOcihhLnByb3BzLm1pbkRhdGUsYS5wcm9wcy5tYXhEYXRlKX0sYX1yZXR1cm4gaHQocixbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9Y2UuZGVmYXVsdCh7XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duXCI6ITAsXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC15ZWFyLWRyb3Bkb3duLS1zY3JvbGxhYmxlXCI6dGhpcy5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd259KTtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTplfSx0aGlzLnJlbmRlck9wdGlvbnMoKSl9fV0pLHJ9KGRlLmRlZmF1bHQuQ29tcG9uZW50KSxZcj1sdC5kZWZhdWx0KE9yKSx4cj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoKXt2YXIgZTt1dCh0aGlzLHIpO2Zvcih2YXIgYT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGEpLG89MDtvPGE7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBtdChidChlPXQuY2FsbC5hcHBseSh0LFt0aGlzXS5jb25jYXQobikpKSxcInN0YXRlXCIse2Ryb3Bkb3duVmlzaWJsZTohMX0pLG10KGJ0KGUpLFwicmVuZGVyU2VsZWN0T3B0aW9uc1wiLChmdW5jdGlvbigpe2Zvcih2YXIgdD1CdChlLnByb3BzLm1pbkRhdGUpLHI9QnQoZS5wcm9wcy5tYXhEYXRlKSxhPVtdOyFhdC5kZWZhdWx0KHQscik7KXt2YXIgbj1JZS5kZWZhdWx0KHQpO2EucHVzaChkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIix7a2V5Om4sdmFsdWU6bn0sTHQodCxlLnByb3BzLmRhdGVGb3JtYXQsZS5wcm9wcy5sb2NhbGUpKSksdD13ZS5kZWZhdWx0KHQsMSl9cmV0dXJuIGF9KSksbXQoYnQoZSksXCJvblNlbGVjdENoYW5nZVwiLChmdW5jdGlvbih0KXtlLm9uQ2hhbmdlKHQudGFyZ2V0LnZhbHVlKX0pKSxtdChidChlKSxcInJlbmRlclNlbGVjdE1vZGVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIse3ZhbHVlOkllLmRlZmF1bHQoQnQoZS5wcm9wcy5kYXRlKSksY2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1zZWxlY3RcIixvbkNoYW5nZTplLm9uU2VsZWN0Q2hhbmdlfSxlLnJlbmRlclNlbGVjdE9wdGlvbnMoKSl9KSksbXQoYnQoZSksXCJyZW5kZXJSZWFkVmlld1wiLChmdW5jdGlvbih0KXt2YXIgcj1MdChlLnByb3BzLmRhdGUsZS5wcm9wcy5kYXRlRm9ybWF0LGUucHJvcHMubG9jYWxlKTtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2tleTpcInJlYWRcIixzdHlsZTp7dmlzaWJpbGl0eTp0P1widmlzaWJsZVwiOlwiaGlkZGVuXCJ9LGNsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItcmVhZC12aWV3XCIsb25DbGljazpmdW5jdGlvbih0KXtyZXR1cm4gZS50b2dnbGVEcm9wZG93bih0KX19LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLWRvd24tYXJyb3dcIn0pLGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1yZWFkLXZpZXctLXNlbGVjdGVkLW1vbnRoLXllYXJcIn0scikpfSkpLG10KGJ0KGUpLFwicmVuZGVyRHJvcGRvd25cIiwoZnVuY3Rpb24oKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFlyLHtrZXk6XCJkcm9wZG93blwiLGRhdGU6ZS5wcm9wcy5kYXRlLGRhdGVGb3JtYXQ6ZS5wcm9wcy5kYXRlRm9ybWF0LG9uQ2hhbmdlOmUub25DaGFuZ2Usb25DYW5jZWw6ZS50b2dnbGVEcm9wZG93bixtaW5EYXRlOmUucHJvcHMubWluRGF0ZSxtYXhEYXRlOmUucHJvcHMubWF4RGF0ZSxzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246ZS5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24sbG9jYWxlOmUucHJvcHMubG9jYWxlfSl9KSksbXQoYnQoZSksXCJyZW5kZXJTY3JvbGxNb2RlXCIsKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5zdGF0ZS5kcm9wZG93blZpc2libGUscj1bZS5yZW5kZXJSZWFkVmlldyghdCldO3JldHVybiB0JiZyLnVuc2hpZnQoZS5yZW5kZXJEcm9wZG93bigpKSxyfSkpLG10KGJ0KGUpLFwib25DaGFuZ2VcIiwoZnVuY3Rpb24odCl7ZS50b2dnbGVEcm9wZG93bigpO3ZhciByPXh0KHBhcnNlSW50KHQpKTtLdChlLnByb3BzLmRhdGUscikmJlF0KGUucHJvcHMuZGF0ZSxyKXx8ZS5wcm9wcy5vbkNoYW5nZShyKX0pKSxtdChidChlKSxcInRvZ2dsZURyb3Bkb3duXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuc2V0U3RhdGUoe2Ryb3Bkb3duVmlzaWJsZTohZS5zdGF0ZS5kcm9wZG93blZpc2libGV9KX0pKSxlfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZTtzd2l0Y2godGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpe2Nhc2VcInNjcm9sbFwiOmU9dGhpcy5yZW5kZXJTY3JvbGxNb2RlKCk7YnJlYWs7Y2FzZVwic2VsZWN0XCI6ZT10aGlzLnJlbmRlclNlbGVjdE1vZGUoKX1yZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tY29udGFpbmVyIHJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXllYXItZHJvcGRvd24tY29udGFpbmVyLS1cIi5jb25jYXQodGhpcy5wcm9wcy5kcm9wZG93bk1vZGUpfSxlKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLFRyPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcigpe3ZhciBlO3V0KHRoaXMscik7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYSksbz0wO288YTtvKyspbltvXT1hcmd1bWVudHNbb107cmV0dXJuIG10KGJ0KGU9dC5jYWxsLmFwcGx5KHQsW3RoaXNdLmNvbmNhdChuKSkpLFwiZGF5RWxcIixkZS5kZWZhdWx0LmNyZWF0ZVJlZigpKSxtdChidChlKSxcImhhbmRsZUNsaWNrXCIsKGZ1bmN0aW9uKHQpeyFlLmlzRGlzYWJsZWQoKSYmZS5wcm9wcy5vbkNsaWNrJiZlLnByb3BzLm9uQ2xpY2sodCl9KSksbXQoYnQoZSksXCJoYW5kbGVNb3VzZUVudGVyXCIsKGZ1bmN0aW9uKHQpeyFlLmlzRGlzYWJsZWQoKSYmZS5wcm9wcy5vbk1vdXNlRW50ZXImJmUucHJvcHMub25Nb3VzZUVudGVyKHQpfSkpLG10KGJ0KGUpLFwiaGFuZGxlT25LZXlEb3duXCIsKGZ1bmN0aW9uKHQpe1wiIFwiPT09dC5rZXkmJih0LnByZXZlbnREZWZhdWx0KCksdC5rZXk9XCJFbnRlclwiKSxlLnByb3BzLmhhbmRsZU9uS2V5RG93bih0KX0pKSxtdChidChlKSxcImlzU2FtZURheVwiLChmdW5jdGlvbih0KXtyZXR1cm4gVXQoZS5wcm9wcy5kYXksdCl9KSksbXQoYnQoZSksXCJpc0tleWJvYXJkU2VsZWN0ZWRcIiwoZnVuY3Rpb24oKXtyZXR1cm4hZS5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiYmIWUuaXNTYW1lRGF5KGUucHJvcHMuc2VsZWN0ZWQpJiZlLmlzU2FtZURheShlLnByb3BzLnByZVNlbGVjdGlvbil9KSksbXQoYnQoZSksXCJpc0Rpc2FibGVkXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRyKGUucHJvcHMuZGF5LGUucHJvcHMpfSkpLG10KGJ0KGUpLFwiaXNFeGNsdWRlZFwiLChmdW5jdGlvbigpe3JldHVybiBycihlLnByb3BzLmRheSxlLnByb3BzKX0pKSxtdChidChlKSxcImdldEhpZ2hMaWdodGVkQ2xhc3NcIiwoZnVuY3Rpb24odCl7dmFyIHI9ZS5wcm9wcyxhPXIuZGF5LG49ci5oaWdobGlnaHREYXRlcztpZighbilyZXR1cm4hMTt2YXIgbz1MdChhLFwiTU0uZGQueXl5eVwiKTtyZXR1cm4gbi5nZXQobyl9KSksbXQoYnQoZSksXCJpc0luUmFuZ2VcIiwoZnVuY3Rpb24oKXt2YXIgdD1lLnByb3BzLHI9dC5kYXksYT10LnN0YXJ0RGF0ZSxuPXQuZW5kRGF0ZTtyZXR1cm4hKCFhfHwhbikmJnp0KHIsYSxuKX0pKSxtdChidChlKSxcImlzSW5TZWxlY3RpbmdSYW5nZVwiLChmdW5jdGlvbigpe3ZhciB0PWUucHJvcHMscj10LmRheSxhPXQuc2VsZWN0c1N0YXJ0LG49dC5zZWxlY3RzRW5kLG89dC5zZWxlY3RzUmFuZ2Uscz10LnNlbGVjdGluZ0RhdGUsaT10LnN0YXJ0RGF0ZSxwPXQuZW5kRGF0ZTtyZXR1cm4hKCEoYXx8bnx8byl8fCFzfHxlLmlzRGlzYWJsZWQoKSkmJihhJiZwJiYobnQuZGVmYXVsdChzLHApfHwkdChzLHApKT96dChyLHMscCk6KG4mJmkmJihhdC5kZWZhdWx0KHMsaSl8fCR0KHMsaSkpfHwhKCFvfHwhaXx8cHx8IWF0LmRlZmF1bHQocyxpKSYmISR0KHMsaSkpKSYmenQocixpLHMpKX0pKSxtdChidChlKSxcImlzU2VsZWN0aW5nUmFuZ2VTdGFydFwiLChmdW5jdGlvbigpe2lmKCFlLmlzSW5TZWxlY3RpbmdSYW5nZSgpKXJldHVybiExO3ZhciB0PWUucHJvcHMscj10LmRheSxhPXQuc2VsZWN0aW5nRGF0ZSxuPXQuc3RhcnREYXRlO3JldHVybiBVdChyLHQuc2VsZWN0c1N0YXJ0P2E6bil9KSksbXQoYnQoZSksXCJpc1NlbGVjdGluZ1JhbmdlRW5kXCIsKGZ1bmN0aW9uKCl7aWYoIWUuaXNJblNlbGVjdGluZ1JhbmdlKCkpcmV0dXJuITE7dmFyIHQ9ZS5wcm9wcyxyPXQuZGF5LGE9dC5zZWxlY3RpbmdEYXRlLG49dC5lbmREYXRlO3JldHVybiBVdChyLHQuc2VsZWN0c0VuZD9hOm4pfSkpLG10KGJ0KGUpLFwiaXNSYW5nZVN0YXJ0XCIsKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5wcm9wcyxyPXQuZGF5LGE9dC5zdGFydERhdGUsbj10LmVuZERhdGU7cmV0dXJuISghYXx8IW4pJiZVdChhLHIpfSkpLG10KGJ0KGUpLFwiaXNSYW5nZUVuZFwiLChmdW5jdGlvbigpe3ZhciB0PWUucHJvcHMscj10LmRheSxhPXQuc3RhcnREYXRlLG49dC5lbmREYXRlO3JldHVybiEoIWF8fCFuKSYmVXQobixyKX0pKSxtdChidChlKSxcImlzV2Vla2VuZFwiLChmdW5jdGlvbigpe3ZhciB0PUVlLmRlZmF1bHQoZS5wcm9wcy5kYXkpO3JldHVybiAwPT09dHx8Nj09PXR9KSksbXQoYnQoZSksXCJpc091dHNpZGVNb250aFwiLChmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT1lLnByb3BzLm1vbnRoJiZlLnByb3BzLm1vbnRoIT09WWUuZGVmYXVsdChlLnByb3BzLmRheSl9KSksbXQoYnQoZSksXCJnZXRDbGFzc05hbWVzXCIsKGZ1bmN0aW9uKHQpe3ZhciByPWUucHJvcHMuZGF5Q2xhc3NOYW1lP2UucHJvcHMuZGF5Q2xhc3NOYW1lKHQpOnZvaWQgMDtyZXR1cm4gY2UuZGVmYXVsdChcInJlYWN0LWRhdGVwaWNrZXJfX2RheVwiLHIsXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLVwiK3F0KGUucHJvcHMuZGF5KSx7XCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkKCksXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWV4Y2x1ZGVkXCI6ZS5pc0V4Y2x1ZGVkKCksXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXNlbGVjdGVkXCI6ZS5pc1NhbWVEYXkoZS5wcm9wcy5zZWxlY3RlZCksXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWtleWJvYXJkLXNlbGVjdGVkXCI6ZS5pc0tleWJvYXJkU2VsZWN0ZWQoKSxcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0tcmFuZ2Utc3RhcnRcIjplLmlzUmFuZ2VTdGFydCgpLFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1yYW5nZS1lbmRcIjplLmlzUmFuZ2VFbmQoKSxcInJlYWN0LWRhdGVwaWNrZXJfX2RheS0taW4tcmFuZ2VcIjplLmlzSW5SYW5nZSgpLFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1pbi1zZWxlY3RpbmctcmFuZ2VcIjplLmlzSW5TZWxlY3RpbmdSYW5nZSgpLFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RpbmctcmFuZ2Utc3RhcnRcIjplLmlzU2VsZWN0aW5nUmFuZ2VTdGFydCgpLFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1zZWxlY3RpbmctcmFuZ2UtZW5kXCI6ZS5pc1NlbGVjdGluZ1JhbmdlRW5kKCksXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXRvZGF5XCI6ZS5pc1NhbWVEYXkoeHQoKSksXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLXdlZWtlbmRcIjplLmlzV2Vla2VuZCgpLFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LS1vdXRzaWRlLW1vbnRoXCI6ZS5pc091dHNpZGVNb250aCgpfSxlLmdldEhpZ2hMaWdodGVkQ2xhc3MoXCJyZWFjdC1kYXRlcGlja2VyX19kYXktLWhpZ2hsaWdodGVkXCIpKX0pKSxtdChidChlKSxcImdldEFyaWFMYWJlbFwiLChmdW5jdGlvbigpe3ZhciB0PWUucHJvcHMscj10LmRheSxhPXQuYXJpYUxhYmVsUHJlZml4V2hlbkVuYWJsZWQsbj12b2lkIDA9PT1hP1wiQ2hvb3NlXCI6YSxvPXQuYXJpYUxhYmVsUHJlZml4V2hlbkRpc2FibGVkLHM9dm9pZCAwPT09bz9cIk5vdCBhdmFpbGFibGVcIjpvLGk9ZS5pc0Rpc2FibGVkKCl8fGUuaXNFeGNsdWRlZCgpP3M6bjtyZXR1cm5cIlwiLmNvbmNhdChpLFwiIFwiKS5jb25jYXQoTHQocixcIlBQUFBcIikpfSkpLG10KGJ0KGUpLFwiZ2V0VGFiSW5kZXhcIiwoZnVuY3Rpb24odCxyKXt2YXIgYT10fHxlLnByb3BzLnNlbGVjdGVkLG49cnx8ZS5wcm9wcy5wcmVTZWxlY3Rpb247cmV0dXJuIGUuaXNLZXlib2FyZFNlbGVjdGVkKCl8fGUuaXNTYW1lRGF5KGEpJiZVdChuLGEpPzA6LTF9KSksbXQoYnQoZSksXCJoYW5kbGVGb2N1c0RheVwiLChmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxyPSExOzA9PT1lLmdldFRhYkluZGV4KCkmJiF0LmlzSW5wdXRGb2N1c2VkJiZlLmlzU2FtZURheShlLnByb3BzLnByZVNlbGVjdGlvbikmJihkb2N1bWVudC5hY3RpdmVFbGVtZW50JiZkb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZG9jdW1lbnQuYm9keXx8KHI9ITApLGUucHJvcHMuaW5saW5lJiYhZS5wcm9wcy5zaG91bGRGb2N1c0RheUlubGluZSYmKHI9ITEpLGUucHJvcHMuY29udGFpbmVyUmVmJiZlLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50JiZlLnByb3BzLmNvbnRhaW5lclJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpJiZkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInJlYWN0LWRhdGVwaWNrZXJfX2RheVwiKSYmKHI9ITApKSxyJiZlLmRheUVsLmN1cnJlbnQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6ITB9KX0pKSxtdChidChlKSxcInJlbmRlckRheUNvbnRlbnRzXCIsKGZ1bmN0aW9uKCl7aWYoZS5pc091dHNpZGVNb250aCgpKXtpZihlLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kJiZOZS5kZWZhdWx0KGUucHJvcHMuZGF5KTwxMClyZXR1cm4gbnVsbDtpZihlLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQmJk5lLmRlZmF1bHQoZS5wcm9wcy5kYXkpPjIwKXJldHVybiBudWxsfXJldHVybiBlLnByb3BzLnJlbmRlckRheUNvbnRlbnRzP2UucHJvcHMucmVuZGVyRGF5Q29udGVudHMoTmUuZGVmYXVsdChlLnByb3BzLmRheSksZS5wcm9wcy5kYXkpOk5lLmRlZmF1bHQoZS5wcm9wcy5kYXkpfSkpLG10KGJ0KGUpLFwicmVuZGVyXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyZWY6ZS5kYXlFbCxjbGFzc05hbWU6ZS5nZXRDbGFzc05hbWVzKGUucHJvcHMuZGF5KSxvbktleURvd246ZS5oYW5kbGVPbktleURvd24sb25DbGljazplLmhhbmRsZUNsaWNrLG9uTW91c2VFbnRlcjplLmhhbmRsZU1vdXNlRW50ZXIsdGFiSW5kZXg6ZS5nZXRUYWJJbmRleCgpLFwiYXJpYS1sYWJlbFwiOmUuZ2V0QXJpYUxhYmVsKCkscm9sZTpcImJ1dHRvblwiLFwiYXJpYS1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZCgpfSxlLnJlbmRlckRheUNvbnRlbnRzKCkpfSkpLGV9cmV0dXJuIGh0KHIsW3trZXk6XCJjb21wb25lbnREaWRNb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5oYW5kbGVGb2N1c0RheSgpfX0se2tleTpcImNvbXBvbmVudERpZFVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaGFuZGxlRm9jdXNEYXkoZSl9fV0pLHJ9KGRlLmRlZmF1bHQuQ29tcG9uZW50KSxJcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoKXt2YXIgZTt1dCh0aGlzLHIpO2Zvcih2YXIgYT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGEpLG89MDtvPGE7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBtdChidChlPXQuY2FsbC5hcHBseSh0LFt0aGlzXS5jb25jYXQobikpKSxcImhhbmRsZUNsaWNrXCIsKGZ1bmN0aW9uKHQpe2UucHJvcHMub25DbGljayYmZS5wcm9wcy5vbkNsaWNrKHQpfSkpLGV9cmV0dXJuIGh0KHIsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucHJvcHMsdD1lLndlZWtOdW1iZXIscj1lLmFyaWFMYWJlbFByZWZpeCxhPXZvaWQgMD09PXI/XCJ3ZWVrIFwiOnIsbj17XCJyZWFjdC1kYXRlcGlja2VyX193ZWVrLW51bWJlclwiOiEwLFwicmVhY3QtZGF0ZXBpY2tlcl9fd2Vlay1udW1iZXItLWNsaWNrYWJsZVwiOiEhZS5vbkNsaWNrfTtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpjZS5kZWZhdWx0KG4pLFwiYXJpYS1sYWJlbFwiOlwiXCIuY29uY2F0KGEsXCIgXCIpLmNvbmNhdCh0aGlzLnByb3BzLndlZWtOdW1iZXIpLG9uQ2xpY2s6dGhpcy5oYW5kbGVDbGlja30sdCl9fV0pLHJ9KGRlLmRlZmF1bHQuQ29tcG9uZW50KSxMcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoKXt2YXIgZTt1dCh0aGlzLHIpO2Zvcih2YXIgYT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGEpLG89MDtvPGE7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiBtdChidChlPXQuY2FsbC5hcHBseSh0LFt0aGlzXS5jb25jYXQobikpKSxcImhhbmRsZURheUNsaWNrXCIsKGZ1bmN0aW9uKHQscil7ZS5wcm9wcy5vbkRheUNsaWNrJiZlLnByb3BzLm9uRGF5Q2xpY2sodCxyKX0pKSxtdChidChlKSxcImhhbmRsZURheU1vdXNlRW50ZXJcIiwoZnVuY3Rpb24odCl7ZS5wcm9wcy5vbkRheU1vdXNlRW50ZXImJmUucHJvcHMub25EYXlNb3VzZUVudGVyKHQpfSkpLG10KGJ0KGUpLFwiaGFuZGxlV2Vla0NsaWNrXCIsKGZ1bmN0aW9uKHQscixhKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnByb3BzLm9uV2Vla1NlbGVjdCYmZS5wcm9wcy5vbldlZWtTZWxlY3QodCxyLGEpLGUucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCYmZS5wcm9wcy5zZXRPcGVuKCExKX0pKSxtdChidChlKSxcImZvcm1hdFdlZWtOdW1iZXJcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGUucHJvcHMuZm9ybWF0V2Vla051bWJlcj9lLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIodCk6UnQodCl9KSksbXQoYnQoZSksXCJyZW5kZXJEYXlzXCIsKGZ1bmN0aW9uKCl7dmFyIHQ9V3QoZS5wcm9wcy5kYXksZS5wcm9wcy5sb2NhbGUpLHI9W10sYT1lLmZvcm1hdFdlZWtOdW1iZXIodCk7aWYoZS5wcm9wcy5zaG93V2Vla051bWJlcil7dmFyIG49ZS5wcm9wcy5vbldlZWtTZWxlY3Q/ZS5oYW5kbGVXZWVrQ2xpY2suYmluZChidChlKSx0LGEpOnZvaWQgMDtyLnB1c2goZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KElyLHtrZXk6XCJXXCIsd2Vla051bWJlcjphLG9uQ2xpY2s6bixhcmlhTGFiZWxQcmVmaXg6ZS5wcm9wcy5hcmlhTGFiZWxQcmVmaXh9KSl9cmV0dXJuIHIuY29uY2F0KFswLDEsMiwzLDQsNSw2XS5tYXAoKGZ1bmN0aW9uKHIpe3ZhciBhPXZlLmRlZmF1bHQodCxyKTtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRyLHthcmlhTGFiZWxQcmVmaXhXaGVuRW5hYmxlZDplLnByb3BzLmNob29zZURheUFyaWFMYWJlbFByZWZpeCxhcmlhTGFiZWxQcmVmaXhXaGVuRGlzYWJsZWQ6ZS5wcm9wcy5kaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCxrZXk6YS52YWx1ZU9mKCksZGF5OmEsbW9udGg6ZS5wcm9wcy5tb250aCxvbkNsaWNrOmUuaGFuZGxlRGF5Q2xpY2suYmluZChidChlKSxhKSxvbk1vdXNlRW50ZXI6ZS5oYW5kbGVEYXlNb3VzZUVudGVyLmJpbmQoYnQoZSksYSksbWluRGF0ZTplLnByb3BzLm1pbkRhdGUsbWF4RGF0ZTplLnByb3BzLm1heERhdGUsZXhjbHVkZURhdGVzOmUucHJvcHMuZXhjbHVkZURhdGVzLGluY2x1ZGVEYXRlczplLnByb3BzLmluY2x1ZGVEYXRlcyxoaWdobGlnaHREYXRlczplLnByb3BzLmhpZ2hsaWdodERhdGVzLHNlbGVjdGluZ0RhdGU6ZS5wcm9wcy5zZWxlY3RpbmdEYXRlLGZpbHRlckRhdGU6ZS5wcm9wcy5maWx0ZXJEYXRlLHByZVNlbGVjdGlvbjplLnByb3BzLnByZVNlbGVjdGlvbixzZWxlY3RlZDplLnByb3BzLnNlbGVjdGVkLHNlbGVjdHNTdGFydDplLnByb3BzLnNlbGVjdHNTdGFydCxzZWxlY3RzRW5kOmUucHJvcHMuc2VsZWN0c0VuZCxzZWxlY3RzUmFuZ2U6ZS5wcm9wcy5zZWxlY3RzUmFuZ2Usc3RhcnREYXRlOmUucHJvcHMuc3RhcnREYXRlLGVuZERhdGU6ZS5wcm9wcy5lbmREYXRlLGRheUNsYXNzTmFtZTplLnByb3BzLmRheUNsYXNzTmFtZSxyZW5kZXJEYXlDb250ZW50czplLnByb3BzLnJlbmRlckRheUNvbnRlbnRzLGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOmUucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24saGFuZGxlT25LZXlEb3duOmUucHJvcHMuaGFuZGxlT25LZXlEb3duLGlzSW5wdXRGb2N1c2VkOmUucHJvcHMuaXNJbnB1dEZvY3VzZWQsY29udGFpbmVyUmVmOmUucHJvcHMuY29udGFpbmVyUmVmLGlubGluZTplLnByb3BzLmlubGluZSxzaG91bGRGb2N1c0RheUlubGluZTplLnByb3BzLnNob3VsZEZvY3VzRGF5SW5saW5lLG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kOmUucHJvcHMubW9udGhTaG93c0R1cGxpY2F0ZURheXNFbmQsbW9udGhTaG93c0R1cGxpY2F0ZURheXNTdGFydDplLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnR9KX0pKSl9KSksZX1yZXR1cm4gaHQocixbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX193ZWVrXCJ9LHRoaXMucmVuZGVyRGF5cygpKX19XSxbe2tleTpcImRlZmF1bHRQcm9wc1wiLGdldDpmdW5jdGlvbigpe3JldHVybntzaG91bGRDbG9zZU9uU2VsZWN0OiEwfX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLEZyPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcigpe3ZhciBlO3V0KHRoaXMscik7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYSksbz0wO288YTtvKyspbltvXT1hcmd1bWVudHNbb107cmV0dXJuIG10KGJ0KGU9dC5jYWxsLmFwcGx5KHQsW3RoaXNdLmNvbmNhdChuKSkpLFwiTU9OVEhfUkVGU1wiLF90KEFycmF5KDEyKSkubWFwKChmdW5jdGlvbigpe3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZVJlZigpfSkpKSxtdChidChlKSxcImlzRGlzYWJsZWRcIiwoZnVuY3Rpb24odCl7cmV0dXJuIHRyKHQsZS5wcm9wcyl9KSksbXQoYnQoZSksXCJpc0V4Y2x1ZGVkXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBycih0LGUucHJvcHMpfSkpLG10KGJ0KGUpLFwiaGFuZGxlRGF5Q2xpY2tcIiwoZnVuY3Rpb24odCxyKXtlLnByb3BzLm9uRGF5Q2xpY2smJmUucHJvcHMub25EYXlDbGljayh0LHIsZS5wcm9wcy5vcmRlckluRGlzcGxheSl9KSksbXQoYnQoZSksXCJoYW5kbGVEYXlNb3VzZUVudGVyXCIsKGZ1bmN0aW9uKHQpe2UucHJvcHMub25EYXlNb3VzZUVudGVyJiZlLnByb3BzLm9uRGF5TW91c2VFbnRlcih0KX0pKSxtdChidChlKSxcImhhbmRsZU1vdXNlTGVhdmVcIiwoZnVuY3Rpb24oKXtlLnByb3BzLm9uTW91c2VMZWF2ZSYmZS5wcm9wcy5vbk1vdXNlTGVhdmUoKX0pKSxtdChidChlKSxcImlzUmFuZ2VTdGFydE1vbnRoXCIsKGZ1bmN0aW9uKHQpe3ZhciByPWUucHJvcHMsYT1yLmRheSxuPXIuc3RhcnREYXRlLG89ci5lbmREYXRlO3JldHVybiEoIW58fCFvKSYmUXQocWUuZGVmYXVsdChhLHQpLG4pfSkpLG10KGJ0KGUpLFwiaXNSYW5nZVN0YXJ0UXVhcnRlclwiLChmdW5jdGlvbih0KXt2YXIgcj1lLnByb3BzLGE9ci5kYXksbj1yLnN0YXJ0RGF0ZSxvPXIuZW5kRGF0ZTtyZXR1cm4hKCFufHwhbykmJlZ0KEFlLmRlZmF1bHQoYSx0KSxuKX0pKSxtdChidChlKSxcImlzUmFuZ2VFbmRNb250aFwiLChmdW5jdGlvbih0KXt2YXIgcj1lLnByb3BzLGE9ci5kYXksbj1yLnN0YXJ0RGF0ZSxvPXIuZW5kRGF0ZTtyZXR1cm4hKCFufHwhbykmJlF0KHFlLmRlZmF1bHQoYSx0KSxvKX0pKSxtdChidChlKSxcImlzUmFuZ2VFbmRRdWFydGVyXCIsKGZ1bmN0aW9uKHQpe3ZhciByPWUucHJvcHMsYT1yLmRheSxuPXIuc3RhcnREYXRlLG89ci5lbmREYXRlO3JldHVybiEoIW58fCFvKSYmVnQoQWUuZGVmYXVsdChhLHQpLG8pfSkpLG10KGJ0KGUpLFwiaXNXZWVrSW5Nb250aFwiLChmdW5jdGlvbih0KXt2YXIgcj1lLnByb3BzLmRheSxhPXZlLmRlZmF1bHQodCw2KTtyZXR1cm4gUXQodCxyKXx8UXQoYSxyKX0pKSxtdChidChlKSxcInJlbmRlcldlZWtzXCIsKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLHI9ZS5wcm9wcy5maXhlZEhlaWdodCxhPVd0KEJ0KGUucHJvcHMuZGF5KSxlLnByb3BzLmxvY2FsZSksbj0wLG89ITE7dC5wdXNoKGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChMcix7YXJpYUxhYmVsUHJlZml4OmUucHJvcHMud2Vla0FyaWFMYWJlbFByZWZpeCxjaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXg6ZS5wcm9wcy5jaG9vc2VEYXlBcmlhTGFiZWxQcmVmaXgsZGlzYWJsZWREYXlBcmlhTGFiZWxQcmVmaXg6ZS5wcm9wcy5kaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCxrZXk6bixkYXk6YSxtb250aDpZZS5kZWZhdWx0KGUucHJvcHMuZGF5KSxvbkRheUNsaWNrOmUuaGFuZGxlRGF5Q2xpY2ssb25EYXlNb3VzZUVudGVyOmUuaGFuZGxlRGF5TW91c2VFbnRlcixvbldlZWtTZWxlY3Q6ZS5wcm9wcy5vbldlZWtTZWxlY3QsZm9ybWF0V2Vla051bWJlcjplLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIsbG9jYWxlOmUucHJvcHMubG9jYWxlLG1pbkRhdGU6ZS5wcm9wcy5taW5EYXRlLG1heERhdGU6ZS5wcm9wcy5tYXhEYXRlLGV4Y2x1ZGVEYXRlczplLnByb3BzLmV4Y2x1ZGVEYXRlcyxpbmNsdWRlRGF0ZXM6ZS5wcm9wcy5pbmNsdWRlRGF0ZXMsaW5saW5lOmUucHJvcHMuaW5saW5lLHNob3VsZEZvY3VzRGF5SW5saW5lOmUucHJvcHMuc2hvdWxkRm9jdXNEYXlJbmxpbmUsaGlnaGxpZ2h0RGF0ZXM6ZS5wcm9wcy5oaWdobGlnaHREYXRlcyxzZWxlY3RpbmdEYXRlOmUucHJvcHMuc2VsZWN0aW5nRGF0ZSxmaWx0ZXJEYXRlOmUucHJvcHMuZmlsdGVyRGF0ZSxwcmVTZWxlY3Rpb246ZS5wcm9wcy5wcmVTZWxlY3Rpb24sc2VsZWN0ZWQ6ZS5wcm9wcy5zZWxlY3RlZCxzZWxlY3RzU3RhcnQ6ZS5wcm9wcy5zZWxlY3RzU3RhcnQsc2VsZWN0c0VuZDplLnByb3BzLnNlbGVjdHNFbmQsc2VsZWN0c1JhbmdlOmUucHJvcHMuc2VsZWN0c1JhbmdlLHNob3dXZWVrTnVtYmVyOmUucHJvcHMuc2hvd1dlZWtOdW1iZXJzLHN0YXJ0RGF0ZTplLnByb3BzLnN0YXJ0RGF0ZSxlbmREYXRlOmUucHJvcHMuZW5kRGF0ZSxkYXlDbGFzc05hbWU6ZS5wcm9wcy5kYXlDbGFzc05hbWUsc2V0T3BlbjplLnByb3BzLnNldE9wZW4sc2hvdWxkQ2xvc2VPblNlbGVjdDplLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QsZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb246ZS5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbixyZW5kZXJEYXlDb250ZW50czplLnByb3BzLnJlbmRlckRheUNvbnRlbnRzLGhhbmRsZU9uS2V5RG93bjplLnByb3BzLmhhbmRsZU9uS2V5RG93bixpc0lucHV0Rm9jdXNlZDplLnByb3BzLmlzSW5wdXRGb2N1c2VkLGNvbnRhaW5lclJlZjplLnByb3BzLmNvbnRhaW5lclJlZixtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZDplLnByb3BzLm1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzRW5kLG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ6ZS5wcm9wcy5tb250aFNob3dzRHVwbGljYXRlRGF5c1N0YXJ0fSkpLCFvOyl7bisrLGE9RGUuZGVmYXVsdChhLDEpO3ZhciBzPXImJm4+PTYsaT0hciYmIWUuaXNXZWVrSW5Nb250aChhKTtpZihzfHxpKXtpZighZS5wcm9wcy5wZWVrTmV4dE1vbnRoKWJyZWFrO289ITB9fXJldHVybiB0fSkpLG10KGJ0KGUpLFwib25Nb250aENsaWNrXCIsKGZ1bmN0aW9uKHQscil7ZS5oYW5kbGVEYXlDbGljayhCdChxZS5kZWZhdWx0KGUucHJvcHMuZGF5LHIpKSx0KX0pKSxtdChidChlKSxcImhhbmRsZU1vbnRoTmF2aWdhdGlvblwiLChmdW5jdGlvbih0LHIpe2UuaXNEaXNhYmxlZChyKXx8ZS5pc0V4Y2x1ZGVkKHIpfHwoZS5wcm9wcy5zZXRQcmVTZWxlY3Rpb24ociksZS5NT05USF9SRUZTW3RdLmN1cnJlbnQmJmUuTU9OVEhfUkVGU1t0XS5jdXJyZW50LmZvY3VzKCkpfSkpLG10KGJ0KGUpLFwib25Nb250aEtleURvd25cIiwoZnVuY3Rpb24odCxyKXt2YXIgYT10LmtleTtpZighZS5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbilzd2l0Y2goYSl7Y2FzZVwiRW50ZXJcIjplLm9uTW9udGhDbGljayh0LHIpLGUucHJvcHMuc2V0UHJlU2VsZWN0aW9uKGUucHJvcHMuc2VsZWN0ZWQpO2JyZWFrO2Nhc2VcIkFycm93UmlnaHRcIjplLmhhbmRsZU1vbnRoTmF2aWdhdGlvbigxMT09PXI/MDpyKzEsd2UuZGVmYXVsdChlLnByb3BzLnByZVNlbGVjdGlvbiwxKSk7YnJlYWs7Y2FzZVwiQXJyb3dMZWZ0XCI6ZS5oYW5kbGVNb250aE5hdmlnYXRpb24oMD09PXI/MTE6ci0xLENlLmRlZmF1bHQoZS5wcm9wcy5wcmVTZWxlY3Rpb24sMSkpfX0pKSxtdChidChlKSxcIm9uUXVhcnRlckNsaWNrXCIsKGZ1bmN0aW9uKHQscil7ZS5oYW5kbGVEYXlDbGljayhIdChBZS5kZWZhdWx0KGUucHJvcHMuZGF5LHIpKSx0KX0pKSxtdChidChlKSxcImdldE1vbnRoQ2xhc3NOYW1lc1wiLChmdW5jdGlvbih0KXt2YXIgcj1lLnByb3BzLGE9ci5kYXksbj1yLnN0YXJ0RGF0ZSxvPXIuZW5kRGF0ZSxzPXIuc2VsZWN0ZWQsaT1yLm1pbkRhdGUscD1yLm1heERhdGUsbD1yLnByZVNlbGVjdGlvbixkPXIubW9udGhDbGFzc05hbWUsYz1kP2QoYSk6dm9pZCAwO3JldHVybiBjZS5kZWZhdWx0KFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtdGV4dFwiLFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtXCIuY29uY2F0KHQpLGMse1wicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLWRpc2FibGVkXCI6KGl8fHApJiZhcihxZS5kZWZhdWx0KGEsdCksZS5wcm9wcyksXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC0tc2VsZWN0ZWRcIjpZZS5kZWZhdWx0KGEpPT09dCYmVGUuZGVmYXVsdChhKT09PVRlLmRlZmF1bHQocyksXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC10ZXh0LS1rZXlib2FyZC1zZWxlY3RlZFwiOlllLmRlZmF1bHQobCk9PT10LFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLWluLXJhbmdlXCI6bnIobixvLHQsYSksXCJyZWFjdC1kYXRlcGlja2VyX19tb250aC0tcmFuZ2Utc3RhcnRcIjplLmlzUmFuZ2VTdGFydE1vbnRoKHQpLFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtLXJhbmdlLWVuZFwiOmUuaXNSYW5nZUVuZE1vbnRoKHQpfSl9KSksbXQoYnQoZSksXCJnZXRUYWJJbmRleFwiLChmdW5jdGlvbih0KXt2YXIgcj1ZZS5kZWZhdWx0KGUucHJvcHMucHJlU2VsZWN0aW9uKTtyZXR1cm4gZS5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbnx8dCE9PXI/XCItMVwiOlwiMFwifSkpLG10KGJ0KGUpLFwiZ2V0QXJpYUxhYmVsXCIsKGZ1bmN0aW9uKHQpe3ZhciByPWUucHJvcHMsYT1yLmFyaWFMYWJlbFByZWZpeCxuPXZvaWQgMD09PWE/XCJDaG9vc2VcIjphLG89ci5kaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeCxzPXZvaWQgMD09PW8/XCJOb3QgYXZhaWxhYmxlXCI6byxpPXIuZGF5LHA9cWUuZGVmYXVsdChpLHQpLGw9ZS5pc0Rpc2FibGVkKHApfHxlLmlzRXhjbHVkZWQocCk/czpuO3JldHVyblwiXCIuY29uY2F0KGwsXCIgXCIpLmNvbmNhdChMdChwLFwiTU1NTSB5eXl5XCIpKX0pKSxtdChidChlKSxcImdldFF1YXJ0ZXJDbGFzc05hbWVzXCIsKGZ1bmN0aW9uKHQpe3ZhciByPWUucHJvcHMsYT1yLmRheSxuPXIuc3RhcnREYXRlLG89ci5lbmREYXRlLHM9ci5zZWxlY3RlZCxpPXIubWluRGF0ZSxwPXIubWF4RGF0ZTtyZXR1cm4gY2UuZGVmYXVsdChcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItdGV4dFwiLFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci1cIi5jb25jYXQodCkse1wicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0tZGlzYWJsZWRcIjooaXx8cCkmJm9yKEFlLmRlZmF1bHQoYSx0KSxlLnByb3BzKSxcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLXNlbGVjdGVkXCI6eGUuZGVmYXVsdChhKT09PXQmJlRlLmRlZmF1bHQoYSk9PT1UZS5kZWZhdWx0KHMpLFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0taW4tcmFuZ2VcIjppcihuLG8sdCxhKSxcInJlYWN0LWRhdGVwaWNrZXJfX3F1YXJ0ZXItLXJhbmdlLXN0YXJ0XCI6ZS5pc1JhbmdlU3RhcnRRdWFydGVyKHQpLFwicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlci0tcmFuZ2UtZW5kXCI6ZS5pc1JhbmdlRW5kUXVhcnRlcih0KX0pfSkpLG10KGJ0KGUpLFwicmVuZGVyTW9udGhzXCIsKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5wcm9wcyxyPXQuc2hvd0Z1bGxNb250aFllYXJQaWNrZXIsYT10LnNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIsbj10LnNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyLG89dC5sb2NhbGU7cmV0dXJuKG4/W1swLDEsMiwzXSxbNCw1LDYsN10sWzgsOSwxMCwxMV1dOmE/W1swLDFdLFsyLDNdLFs0LDVdLFs2LDddLFs4LDldLFsxMCwxMV1dOltbMCwxLDJdLFszLDQsNV0sWzYsNyw4XSxbOSwxMCwxMV1dKS5tYXAoKGZ1bmN0aW9uKHQsYSl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19tb250aC13cmFwcGVyXCIsa2V5OmF9LHQubWFwKChmdW5jdGlvbih0LGEpe3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOmUuTU9OVEhfUkVGU1t0XSxrZXk6YSxvbkNsaWNrOmZ1bmN0aW9uKHIpe2Uub25Nb250aENsaWNrKHIsdCl9LG9uS2V5RG93bjpmdW5jdGlvbihyKXtlLm9uTW9udGhLZXlEb3duKHIsdCl9LHRhYkluZGV4OmUuZ2V0VGFiSW5kZXgodCksY2xhc3NOYW1lOmUuZ2V0TW9udGhDbGFzc05hbWVzKHQpLHJvbGU6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjplLmdldEFyaWFMYWJlbCh0KX0scj9YdCh0LG8pOlp0KHQsbykpfSkpKX0pKX0pKSxtdChidChlKSxcInJlbmRlclF1YXJ0ZXJzXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19xdWFydGVyLXdyYXBwZXJcIn0sWzEsMiwzLDRdLm1hcCgoZnVuY3Rpb24odCxyKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2tleTpyLG9uQ2xpY2s6ZnVuY3Rpb24ocil7ZS5vblF1YXJ0ZXJDbGljayhyLHQpfSxjbGFzc05hbWU6ZS5nZXRRdWFydGVyQ2xhc3NOYW1lcyh0KX0sZXIodCxlLnByb3BzLmxvY2FsZSkpfSkpKX0pKSxtdChidChlKSxcImdldENsYXNzTmFtZXNcIiwoZnVuY3Rpb24oKXt2YXIgdD1lLnByb3BzO3QuZGF5O3ZhciByPXQuc2VsZWN0aW5nRGF0ZSxhPXQuc2VsZWN0c1N0YXJ0LG49dC5zZWxlY3RzRW5kLG89dC5zaG93TW9udGhZZWFyUGlja2VyLHM9dC5zaG93UXVhcnRlclllYXJQaWNrZXI7cmV0dXJuIGNlLmRlZmF1bHQoXCJyZWFjdC1kYXRlcGlja2VyX19tb250aFwiLHtcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLS1zZWxlY3RpbmctcmFuZ2VcIjpyJiYoYXx8bil9LHtcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoUGlja2VyXCI6b30se1wicmVhY3QtZGF0ZXBpY2tlcl9fcXVhcnRlclBpY2tlclwiOnN9KX0pKSxlfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByb3BzLHQ9ZS5zaG93TW9udGhZZWFyUGlja2VyLHI9ZS5zaG93UXVhcnRlclllYXJQaWNrZXIsYT1lLmRheSxuPWUuYXJpYUxhYmVsUHJlZml4LG89dm9pZCAwPT09bj9cIm1vbnRoIFwiOm47cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6dGhpcy5nZXRDbGFzc05hbWVzKCksb25Nb3VzZUxlYXZlOnRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcImFyaWEtbGFiZWxcIjpcIlwiLmNvbmNhdChvLFwiIFwiKS5jb25jYXQoTHQoYSxcInl5eXktTU1cIikpfSx0P3RoaXMucmVuZGVyTW9udGhzKCk6cj90aGlzLnJlbmRlclF1YXJ0ZXJzKCk6dGhpcy5yZW5kZXJXZWVrcygpKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLFJyPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcigpe3ZhciBlO3V0KHRoaXMscik7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYSksbz0wO288YTtvKyspbltvXT1hcmd1bWVudHNbb107cmV0dXJuIG10KGJ0KGU9dC5jYWxsLmFwcGx5KHQsW3RoaXNdLmNvbmNhdChuKSkpLFwic3RhdGVcIix7aGVpZ2h0Om51bGx9KSxtdChidChlKSxcImhhbmRsZUNsaWNrXCIsKGZ1bmN0aW9uKHQpeyhlLnByb3BzLm1pblRpbWV8fGUucHJvcHMubWF4VGltZSkmJmNyKHQsZS5wcm9wcyl8fChlLnByb3BzLmV4Y2x1ZGVUaW1lc3x8ZS5wcm9wcy5pbmNsdWRlVGltZXN8fGUucHJvcHMuZmlsdGVyVGltZSkmJmRyKHQsZS5wcm9wcyl8fGUucHJvcHMub25DaGFuZ2UodCl9KSksbXQoYnQoZSksXCJsaUNsYXNzZXNcIiwoZnVuY3Rpb24odCxyLGEpe3ZhciBuPVtcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtXCIsZS5wcm9wcy50aW1lQ2xhc3NOYW1lP2UucHJvcHMudGltZUNsYXNzTmFtZSh0LHIsYSk6dm9pZCAwXTtyZXR1cm4gZS5wcm9wcy5zZWxlY3RlZCYmcj09PVBlLmRlZmF1bHQodCkmJmE9PT1NZS5kZWZhdWx0KHQpJiZuLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0tc2VsZWN0ZWRcIiksKChlLnByb3BzLm1pblRpbWV8fGUucHJvcHMubWF4VGltZSkmJmNyKHQsZS5wcm9wcyl8fChlLnByb3BzLmV4Y2x1ZGVUaW1lc3x8ZS5wcm9wcy5pbmNsdWRlVGltZXN8fGUucHJvcHMuZmlsdGVyVGltZSkmJmRyKHQsZS5wcm9wcykpJiZuLnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWxpc3QtaXRlbS0tZGlzYWJsZWRcIiksZS5wcm9wcy5pbmplY3RUaW1lcyYmKDYwKlBlLmRlZmF1bHQodCkrTWUuZGVmYXVsdCh0KSklZS5wcm9wcy5pbnRlcnZhbHMhPTAmJm4ucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdC1pdGVtLS1pbmplY3RlZFwiKSxuLmpvaW4oXCIgXCIpfSkpLG10KGJ0KGUpLFwicmVuZGVyVGltZXNcIiwoZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10scj1lLnByb3BzLmZvcm1hdD9lLnByb3BzLmZvcm1hdDpcInBcIixhPWUucHJvcHMuaW50ZXJ2YWxzLG49QXQoeHQoZS5wcm9wcy5zZWxlY3RlZCkpLG89MTQ0MC9hLHM9ZS5wcm9wcy5pbmplY3RUaW1lcyYmZS5wcm9wcy5pbmplY3RUaW1lcy5zb3J0KChmdW5jdGlvbihlLHQpe3JldHVybiBlLXR9KSksaT1lLnByb3BzLnNlbGVjdGVkfHxlLnByb3BzLm9wZW5Ub0RhdGV8fHh0KCkscD1QZS5kZWZhdWx0KGkpLGw9TWUuZGVmYXVsdChpKSxkPVJlLmRlZmF1bHQoRmUuZGVmYXVsdChuLGwpLHApLGM9MDtjPG87YysrKXt2YXIgdT1tZS5kZWZhdWx0KG4sYyphKTtpZih0LnB1c2godSkscyl7dmFyIGY9d3Iobix1LGMsYSxzKTt0PXQuY29uY2F0KGYpfX1yZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQsYSl7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIse2tleTphLG9uQ2xpY2s6ZS5oYW5kbGVDbGljay5iaW5kKGJ0KGUpLHQpLGNsYXNzTmFtZTplLmxpQ2xhc3Nlcyh0LHAsbCkscmVmOmZ1bmN0aW9uKHIpeyhudC5kZWZhdWx0KHQsZCl8fCR0KHQsZCkpJiYoZS5jZW50ZXJMaT1yKX0sdGFiSW5kZXg6XCIwXCJ9LEx0KHQscixlLnByb3BzLmxvY2FsZSkpfSkpfSkpLGV9cmV0dXJuIGh0KHIsW3trZXk6XCJjb21wb25lbnREaWRNb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5saXN0LnNjcm9sbFRvcD1yLmNhbGNDZW50ZXJQb3NpdGlvbih0aGlzLnByb3BzLm1vbnRoUmVmP3RoaXMucHJvcHMubW9udGhSZWYuY2xpZW50SGVpZ2h0LXRoaXMuaGVhZGVyLmNsaWVudEhlaWdodDp0aGlzLmxpc3QuY2xpZW50SGVpZ2h0LHRoaXMuY2VudGVyTGkpLHRoaXMucHJvcHMubW9udGhSZWYmJnRoaXMuaGVhZGVyJiZ0aGlzLnNldFN0YXRlKHtoZWlnaHQ6dGhpcy5wcm9wcy5tb250aFJlZi5jbGllbnRIZWlnaHQtdGhpcy5oZWFkZXIuY2xpZW50SGVpZ2h0fSl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5zdGF0ZS5oZWlnaHQ7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX190aW1lLWNvbnRhaW5lciBcIi5jb25jYXQodGhpcy5wcm9wcy50b2RheUJ1dHRvbj9cInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtY29udGFpbmVyLS13aXRoLXRvZGF5LWJ1dHRvblwiOlwiXCIpfSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0tdGltZSBcIi5jb25jYXQodGhpcy5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHk/XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXItLXRpbWUtLW9ubHlcIjpcIlwiKSxyZWY6ZnVuY3Rpb24odCl7ZS5oZWFkZXI9dH19LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyLXRpbWVfX2hlYWRlclwifSx0aGlzLnByb3BzLnRpbWVDYXB0aW9uKSksZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWVcIn0sZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtYm94XCJ9LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3RpbWUtbGlzdFwiLHJlZjpmdW5jdGlvbih0KXtlLmxpc3Q9dH0sc3R5bGU6dD97aGVpZ2h0OnR9Ont9LHRhYkluZGV4OlwiMFwifSx0aGlzLnJlbmRlclRpbWVzKCkpKSkpfX1dLFt7a2V5OlwiZGVmYXVsdFByb3BzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2ludGVydmFsczozMCxvblRpbWVDaGFuZ2U6ZnVuY3Rpb24oKXt9LHRvZGF5QnV0dG9uOm51bGwsdGltZUNhcHRpb246XCJUaW1lXCJ9fX1dKSxyfShkZS5kZWZhdWx0LkNvbXBvbmVudCk7bXQoUnIsXCJjYWxjQ2VudGVyUG9zaXRpb25cIiwoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5vZmZzZXRUb3AtKGUvMi10LmNsaWVudEhlaWdodC8yKX0pKTt2YXIgcXI9ZnVuY3Rpb24oZSl7d3QocixlKTt2YXIgdD1TdChyKTtmdW5jdGlvbiByKGUpe3ZhciBhO3JldHVybiB1dCh0aGlzLHIpLG10KGJ0KGE9dC5jYWxsKHRoaXMsZSkpLFwiaGFuZGxlWWVhckNsaWNrXCIsKGZ1bmN0aW9uKGUsdCl7YS5wcm9wcy5vbkRheUNsaWNrJiZhLnByb3BzLm9uRGF5Q2xpY2soZSx0KX0pKSxtdChidChhKSxcImlzU2FtZURheVwiLChmdW5jdGlvbihlLHQpe3JldHVybiBVdChlLHQpfSkpLG10KGJ0KGEpLFwiaXNLZXlib2FyZFNlbGVjdGVkXCIsKGZ1bmN0aW9uKGUpe3ZhciB0PWp0KFdlLmRlZmF1bHQoYS5wcm9wcy5kYXRlLGUpKTtyZXR1cm4hYS5wcm9wcy5kaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbiYmIWEucHJvcHMuaW5saW5lJiYhVXQodCxqdChhLnByb3BzLnNlbGVjdGVkKSkmJlV0KHQsanQoYS5wcm9wcy5wcmVTZWxlY3Rpb24pKX0pKSxtdChidChhKSxcIm9uWWVhckNsaWNrXCIsKGZ1bmN0aW9uKGUsdCl7dmFyIHI9YS5wcm9wcy5kYXRlO2EuaGFuZGxlWWVhckNsaWNrKGp0KFdlLmRlZmF1bHQocix0KSksZSl9KSksbXQoYnQoYSksXCJnZXRZZWFyQ2xhc3NOYW1lc1wiLChmdW5jdGlvbihlKXt2YXIgdD1hLnByb3BzLHI9dC5taW5EYXRlLG49dC5tYXhEYXRlLG89dC5zZWxlY3RlZDtyZXR1cm4gY2UuZGVmYXVsdChcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dFwiLHtcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tc2VsZWN0ZWRcIjplPT09VGUuZGVmYXVsdChvKSxcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItdGV4dC0tZGlzYWJsZWRcIjoocnx8bikmJnNyKGUsYS5wcm9wcyksXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLWtleWJvYXJkLXNlbGVjdGVkXCI6YS5pc0tleWJvYXJkU2VsZWN0ZWQoZSksXCJyZWFjdC1kYXRlcGlja2VyX195ZWFyLXRleHQtLXRvZGF5XCI6ZT09PVRlLmRlZmF1bHQoeHQoKSl9KX0pKSxhfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PVtdLHI9dGhpcy5wcm9wcyxhPWdyKHIuZGF0ZSxyLnllYXJJdGVtTnVtYmVyKSxuPWEuc3RhcnRQZXJpb2Qsbz1hLmVuZFBlcmlvZCxzPWZ1bmN0aW9uKHIpe3QucHVzaChkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7b25DbGljazpmdW5jdGlvbih0KXtlLm9uWWVhckNsaWNrKHQscil9LGNsYXNzTmFtZTplLmdldFllYXJDbGFzc05hbWVzKHIpLGtleTpyfSxyKSl9LGk9bjtpPD1vO2krKylzKGkpO3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9feWVhclwifSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9feWVhci13cmFwcGVyXCJ9LHQpKX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLEFyPWZ1bmN0aW9uKGUpe3d0KHIsZSk7dmFyIHQ9U3Qocik7ZnVuY3Rpb24gcihlKXt2YXIgYTtyZXR1cm4gdXQodGhpcyxyKSxtdChidChhPXQuY2FsbCh0aGlzLGUpKSxcIm9uVGltZUNoYW5nZVwiLChmdW5jdGlvbihlKXthLnNldFN0YXRlKHt0aW1lOmV9KTt2YXIgdD1uZXcgRGF0ZTt0LnNldEhvdXJzKGUuc3BsaXQoXCI6XCIpWzBdKSx0LnNldE1pbnV0ZXMoZS5zcGxpdChcIjpcIilbMV0pLGEucHJvcHMub25DaGFuZ2UodCl9KSksbXQoYnQoYSksXCJyZW5kZXJUaW1lSW5wdXRcIiwoZnVuY3Rpb24oKXt2YXIgZT1hLnN0YXRlLnRpbWUsdD1hLnByb3BzLHI9dC5kYXRlLG49dC50aW1lU3RyaW5nLG89dC5jdXN0b21UaW1lSW5wdXQ7cmV0dXJuIG8/ZGUuZGVmYXVsdC5jbG9uZUVsZW1lbnQobyx7ZGF0ZTpyLHZhbHVlOmUsb25DaGFuZ2U6YS5vblRpbWVDaGFuZ2V9KTpkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLHt0eXBlOlwidGltZVwiLGNsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXRcIixwbGFjZWhvbGRlcjpcIlRpbWVcIixuYW1lOlwidGltZS1pbnB1dFwiLHJlcXVpcmVkOiEwLHZhbHVlOmUsb25DaGFuZ2U6ZnVuY3Rpb24oZSl7YS5vblRpbWVDaGFuZ2UoZS50YXJnZXQudmFsdWV8fG4pfX0pfSkpLGEuc3RhdGU9e3RpbWU6YS5wcm9wcy50aW1lU3RyaW5nfSxhfXJldHVybiBodChyLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX2lucHV0LXRpbWUtY29udGFpbmVyXCJ9LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyLXRpbWVfX2NhcHRpb25cIn0sdGhpcy5wcm9wcy50aW1lSW5wdXRMYWJlbCksZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXItdGltZV9faW5wdXQtY29udGFpbmVyXCJ9LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyLXRpbWVfX2lucHV0XCJ9LHRoaXMucmVuZGVyVGltZUlucHV0KCkpKSl9fV0sW3trZXk6XCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBlLnRpbWVTdHJpbmchPT10LnRpbWU/e3RpbWU6ZS50aW1lU3RyaW5nfTpudWxsfX1dKSxyfShkZS5kZWZhdWx0LkNvbXBvbmVudCk7ZnVuY3Rpb24gV3IoZSl7dmFyIHQ9ZS5jbGFzc05hbWUscj1lLmNoaWxkcmVuLGE9ZS5zaG93UG9wcGVyQXJyb3csbj1lLmFycm93UHJvcHMsbz12b2lkIDA9PT1uP3t9Om47cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6dH0sYSYmZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIseXQoe2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3RyaWFuZ2xlXCJ9LG8pKSxyKX12YXIgQnI9W1wicmVhY3QtZGF0ZXBpY2tlcl9feWVhci1zZWxlY3RcIixcInJlYWN0LWRhdGVwaWNrZXJfX21vbnRoLXNlbGVjdFwiLFwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgteWVhci1zZWxlY3RcIl0sanI9ZnVuY3Rpb24oZSl7d3QocixlKTt2YXIgdD1TdChyKTtmdW5jdGlvbiByKGUpe3ZhciBhO3JldHVybiB1dCh0aGlzLHIpLG10KGJ0KGE9dC5jYWxsKHRoaXMsZSkpLFwiaGFuZGxlQ2xpY2tPdXRzaWRlXCIsKGZ1bmN0aW9uKGUpe2EucHJvcHMub25DbGlja091dHNpZGUoZSl9KSksbXQoYnQoYSksXCJzZXRDbGlja091dHNpZGVSZWZcIiwoZnVuY3Rpb24oKXtyZXR1cm4gYS5jb250YWluZXJSZWYuY3VycmVudH0pKSxtdChidChhKSxcImhhbmRsZURyb3Bkb3duRm9jdXNcIiwoZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKCl7dmFyIGU9KChhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30pLmNsYXNzTmFtZXx8XCJcIikuc3BsaXQoL1xccysvKTtyZXR1cm4gQnIuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIGUuaW5kZXhPZih0KT49MH0pKX0pKGUudGFyZ2V0KSYmYS5wcm9wcy5vbkRyb3Bkb3duRm9jdXMoKX0pKSxtdChidChhKSxcImdldERhdGVJblZpZXdcIiwoZnVuY3Rpb24oKXt2YXIgZT1hLnByb3BzLHQ9ZS5wcmVTZWxlY3Rpb24scj1lLnNlbGVjdGVkLG49ZS5vcGVuVG9EYXRlLG89eXIoYS5wcm9wcykscz12cihhLnByb3BzKSxpPXh0KCkscD1ufHxyfHx0O3JldHVybiBwfHwobyYmbnQuZGVmYXVsdChpLG8pP286cyYmYXQuZGVmYXVsdChpLHMpP3M6aSl9KSksbXQoYnQoYSksXCJpbmNyZWFzZU1vbnRoXCIsKGZ1bmN0aW9uKCl7YS5zZXRTdGF0ZSgoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRlO3JldHVybntkYXRlOndlLmRlZmF1bHQodCwxKX19KSwoZnVuY3Rpb24oKXtyZXR1cm4gYS5oYW5kbGVNb250aENoYW5nZShhLnN0YXRlLmRhdGUpfSkpfSkpLG10KGJ0KGEpLFwiZGVjcmVhc2VNb250aFwiLChmdW5jdGlvbigpe2Euc2V0U3RhdGUoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0ZTtyZXR1cm57ZGF0ZTpDZS5kZWZhdWx0KHQsMSl9fSksKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaGFuZGxlTW9udGhDaGFuZ2UoYS5zdGF0ZS5kYXRlKX0pKX0pKSxtdChidChhKSxcImhhbmRsZURheUNsaWNrXCIsKGZ1bmN0aW9uKGUsdCxyKXthLnByb3BzLm9uU2VsZWN0KGUsdCxyKSxhLnByb3BzLnNldFByZVNlbGVjdGlvbiYmYS5wcm9wcy5zZXRQcmVTZWxlY3Rpb24oZSl9KSksbXQoYnQoYSksXCJoYW5kbGVEYXlNb3VzZUVudGVyXCIsKGZ1bmN0aW9uKGUpe2Euc2V0U3RhdGUoe3NlbGVjdGluZ0RhdGU6ZX0pLGEucHJvcHMub25EYXlNb3VzZUVudGVyJiZhLnByb3BzLm9uRGF5TW91c2VFbnRlcihlKX0pKSxtdChidChhKSxcImhhbmRsZU1vbnRoTW91c2VMZWF2ZVwiLChmdW5jdGlvbigpe2Euc2V0U3RhdGUoe3NlbGVjdGluZ0RhdGU6bnVsbH0pLGEucHJvcHMub25Nb250aE1vdXNlTGVhdmUmJmEucHJvcHMub25Nb250aE1vdXNlTGVhdmUoKX0pKSxtdChidChhKSxcImhhbmRsZVllYXJDaGFuZ2VcIiwoZnVuY3Rpb24oZSl7YS5wcm9wcy5vblllYXJDaGFuZ2UmJmEucHJvcHMub25ZZWFyQ2hhbmdlKGUpLGEucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlJiYoYS5wcm9wcy5vblNlbGVjdCYmYS5wcm9wcy5vblNlbGVjdChlKSxhLnByb3BzLnNldE9wZW4mJmEucHJvcHMuc2V0T3BlbighMCkpLGEucHJvcHMuc2V0UHJlU2VsZWN0aW9uJiZhLnByb3BzLnNldFByZVNlbGVjdGlvbihlKX0pKSxtdChidChhKSxcImhhbmRsZU1vbnRoQ2hhbmdlXCIsKGZ1bmN0aW9uKGUpe2EucHJvcHMub25Nb250aENoYW5nZSYmYS5wcm9wcy5vbk1vbnRoQ2hhbmdlKGUpLGEucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlJiYoYS5wcm9wcy5vblNlbGVjdCYmYS5wcm9wcy5vblNlbGVjdChlKSxhLnByb3BzLnNldE9wZW4mJmEucHJvcHMuc2V0T3BlbighMCkpLGEucHJvcHMuc2V0UHJlU2VsZWN0aW9uJiZhLnByb3BzLnNldFByZVNlbGVjdGlvbihlKX0pKSxtdChidChhKSxcImhhbmRsZU1vbnRoWWVhckNoYW5nZVwiLChmdW5jdGlvbihlKXthLmhhbmRsZVllYXJDaGFuZ2UoZSksYS5oYW5kbGVNb250aENoYW5nZShlKX0pKSxtdChidChhKSxcImNoYW5nZVllYXJcIiwoZnVuY3Rpb24oZSl7YS5zZXRTdGF0ZSgoZnVuY3Rpb24odCl7dmFyIHI9dC5kYXRlO3JldHVybntkYXRlOldlLmRlZmF1bHQocixlKX19KSwoZnVuY3Rpb24oKXtyZXR1cm4gYS5oYW5kbGVZZWFyQ2hhbmdlKGEuc3RhdGUuZGF0ZSl9KSl9KSksbXQoYnQoYSksXCJjaGFuZ2VNb250aFwiLChmdW5jdGlvbihlKXthLnNldFN0YXRlKChmdW5jdGlvbih0KXt2YXIgcj10LmRhdGU7cmV0dXJue2RhdGU6cWUuZGVmYXVsdChyLGUpfX0pLChmdW5jdGlvbigpe3JldHVybiBhLmhhbmRsZU1vbnRoQ2hhbmdlKGEuc3RhdGUuZGF0ZSl9KSl9KSksbXQoYnQoYSksXCJjaGFuZ2VNb250aFllYXJcIiwoZnVuY3Rpb24oZSl7YS5zZXRTdGF0ZSgoZnVuY3Rpb24odCl7dmFyIHI9dC5kYXRlO3JldHVybntkYXRlOldlLmRlZmF1bHQocWUuZGVmYXVsdChyLFllLmRlZmF1bHQoZSkpLFRlLmRlZmF1bHQoZSkpfX0pLChmdW5jdGlvbigpe3JldHVybiBhLmhhbmRsZU1vbnRoWWVhckNoYW5nZShhLnN0YXRlLmRhdGUpfSkpfSkpLG10KGJ0KGEpLFwiaGVhZGVyXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmEuc3RhdGUuZGF0ZSx0PVd0KGUsYS5wcm9wcy5sb2NhbGUpLHI9W107cmV0dXJuIGEucHJvcHMuc2hvd1dlZWtOdW1iZXJzJiZyLnB1c2goZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2tleTpcIldcIixjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZVwifSxhLnByb3BzLndlZWtMYWJlbHx8XCIjXCIpKSxyLmNvbmNhdChbMCwxLDIsMyw0LDUsNl0ubWFwKChmdW5jdGlvbihlKXt2YXIgcj12ZS5kZWZhdWx0KHQsZSksbj1hLmZvcm1hdFdlZWtkYXkocixhLnByb3BzLmxvY2FsZSksbz1hLnByb3BzLndlZWtEYXlDbGFzc05hbWU/YS5wcm9wcy53ZWVrRGF5Q2xhc3NOYW1lKHIpOnZvaWQgMDtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2tleTplLGNsYXNzTmFtZTpjZS5kZWZhdWx0KFwicmVhY3QtZGF0ZXBpY2tlcl9fZGF5LW5hbWVcIixvKX0sbil9KSkpfSkpLG10KGJ0KGEpLFwiZm9ybWF0V2Vla2RheVwiLChmdW5jdGlvbihlLHQpe3JldHVybiBhLnByb3BzLmZvcm1hdFdlZWtEYXk/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0KEx0KGUsXCJFRUVFXCIscikpfShlLGEucHJvcHMuZm9ybWF0V2Vla0RheSx0KTphLnByb3BzLnVzZVdlZWtkYXlzU2hvcnQ/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTHQoZSxcIkVFRVwiLHQpfShlLHQpOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEx0KGUsXCJFRUVFRUVcIix0KX0oZSx0KX0pKSxtdChidChhKSxcImRlY3JlYXNlWWVhclwiLChmdW5jdGlvbigpe2Euc2V0U3RhdGUoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0ZTtyZXR1cm57ZGF0ZTpTZS5kZWZhdWx0KHQsYS5wcm9wcy5zaG93WWVhclBpY2tlcj9hLnByb3BzLnllYXJJdGVtTnVtYmVyOjEpfX0pLChmdW5jdGlvbigpe3JldHVybiBhLmhhbmRsZVllYXJDaGFuZ2UoYS5zdGF0ZS5kYXRlKX0pKX0pKSxtdChidChhKSxcInJlbmRlclByZXZpb3VzQnV0dG9uXCIsKGZ1bmN0aW9uKCl7aWYoIWEucHJvcHMucmVuZGVyQ3VzdG9tSGVhZGVyKXt2YXIgZTtzd2l0Y2goITApe2Nhc2UgYS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyOmU9aHIoYS5zdGF0ZS5kYXRlLGEucHJvcHMpO2JyZWFrO2Nhc2UgYS5wcm9wcy5zaG93WWVhclBpY2tlcjplPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxyPXQubWluRGF0ZSxhPXQueWVhckl0ZW1OdW1iZXIsbj12b2lkIDA9PT1hP090OmEsbz1ncihqdChTZS5kZWZhdWx0KGUsbikpLG4pLmVuZFBlcmlvZCxzPXImJlRlLmRlZmF1bHQocik7cmV0dXJuIHMmJnM+b3x8ITF9KGEuc3RhdGUuZGF0ZSxhLnByb3BzKTticmVhaztkZWZhdWx0OmU9dXIoYS5zdGF0ZS5kYXRlLGEucHJvcHMpfWlmKChhLnByb3BzLmZvcmNlU2hvd01vbnRoTmF2aWdhdGlvbnx8YS5wcm9wcy5zaG93RGlzYWJsZWRNb250aE5hdmlnYXRpb258fCFlKSYmIWEucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KXt2YXIgdD1bXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uXCIsXCJyZWFjdC1kYXRlcGlja2VyX19uYXZpZ2F0aW9uLS1wcmV2aW91c1wiXSxyPWEuZGVjcmVhc2VNb250aDsoYS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyfHxhLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcnx8YS5wcm9wcy5zaG93WWVhclBpY2tlcikmJihyPWEuZGVjcmVhc2VZZWFyKSxlJiZhLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbiYmKHQucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLXByZXZpb3VzLS1kaXNhYmxlZFwiKSxyPW51bGwpO3ZhciBuPWEucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlcnx8YS5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXJ8fGEucHJvcHMuc2hvd1llYXJQaWNrZXIsbz1hLnByb3BzLHM9by5wcmV2aW91c01vbnRoQXJpYUxhYmVsLGk9dm9pZCAwPT09cz9cIlByZXZpb3VzIE1vbnRoXCI6cyxwPW8ucHJldmlvdXNZZWFyQXJpYUxhYmVsLGw9dm9pZCAwPT09cD9cIlByZXZpb3VzIFllYXJcIjpwO3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzTmFtZTp0LmpvaW4oXCIgXCIpLG9uQ2xpY2s6cixcImFyaWEtbGFiZWxcIjpuP2w6aX0sbj9hLnByb3BzLnByZXZpb3VzWWVhckJ1dHRvbkxhYmVsOmEucHJvcHMucHJldmlvdXNNb250aEJ1dHRvbkxhYmVsKX19fSkpLG10KGJ0KGEpLFwiaW5jcmVhc2VZZWFyXCIsKGZ1bmN0aW9uKCl7YS5zZXRTdGF0ZSgoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5kYXRlO3JldHVybntkYXRlOmtlLmRlZmF1bHQodCxhLnByb3BzLnNob3dZZWFyUGlja2VyP2EucHJvcHMueWVhckl0ZW1OdW1iZXI6MSl9fSksKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaGFuZGxlWWVhckNoYW5nZShhLnN0YXRlLmRhdGUpfSkpfSkpLG10KGJ0KGEpLFwicmVuZGVyTmV4dEJ1dHRvblwiLChmdW5jdGlvbigpe2lmKCFhLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcil7dmFyIGU7c3dpdGNoKCEwKXtjYXNlIGEucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlcjplPW1yKGEuc3RhdGUuZGF0ZSxhLnByb3BzKTticmVhaztjYXNlIGEucHJvcHMuc2hvd1llYXJQaWNrZXI6ZT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scj10Lm1heERhdGUsYT10LnllYXJJdGVtTnVtYmVyLG49dm9pZCAwPT09YT9PdDphLG89Z3Ioa2UuZGVmYXVsdChlLG4pLG4pLnN0YXJ0UGVyaW9kLHM9ciYmVGUuZGVmYXVsdChyKTtyZXR1cm4gcyYmczxvfHwhMX0oYS5zdGF0ZS5kYXRlLGEucHJvcHMpO2JyZWFrO2RlZmF1bHQ6ZT1mcihhLnN0YXRlLmRhdGUsYS5wcm9wcyl9aWYoKGEucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9ufHxhLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbnx8IWUpJiYhYS5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpe3ZhciB0PVtcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb25cIixcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHRcIl07YS5wcm9wcy5zaG93VGltZVNlbGVjdCYmdC5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fbmF2aWdhdGlvbi0tbmV4dC0td2l0aC10aW1lXCIpLGEucHJvcHMudG9kYXlCdXR0b24mJnQucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLXdpdGgtdG9kYXktYnV0dG9uXCIpO3ZhciByPWEuaW5jcmVhc2VNb250aDsoYS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyfHxhLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcnx8YS5wcm9wcy5zaG93WWVhclBpY2tlcikmJihyPWEuaW5jcmVhc2VZZWFyKSxlJiZhLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbiYmKHQucHVzaChcInJlYWN0LWRhdGVwaWNrZXJfX25hdmlnYXRpb24tLW5leHQtLWRpc2FibGVkXCIpLHI9bnVsbCk7dmFyIG49YS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyfHxhLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcnx8YS5wcm9wcy5zaG93WWVhclBpY2tlcixvPWEucHJvcHMscz1vLm5leHRNb250aEFyaWFMYWJlbCxpPXZvaWQgMD09PXM/XCJOZXh0IE1vbnRoXCI6cyxwPW8ubmV4dFllYXJBcmlhTGFiZWwsbD12b2lkIDA9PT1wP1wiTmV4dCBZZWFyXCI6cDtyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzc05hbWU6dC5qb2luKFwiIFwiKSxvbkNsaWNrOnIsXCJhcmlhLWxhYmVsXCI6bj9sOml9LG4/YS5wcm9wcy5uZXh0WWVhckJ1dHRvbkxhYmVsOmEucHJvcHMubmV4dE1vbnRoQnV0dG9uTGFiZWwpfX19KSksbXQoYnQoYSksXCJyZW5kZXJDdXJyZW50TW9udGhcIiwoZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06YS5zdGF0ZS5kYXRlLHQ9W1wicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aFwiXTtyZXR1cm4gYS5wcm9wcy5zaG93WWVhckRyb3Bkb3duJiZ0LnB1c2goXCJyZWFjdC1kYXRlcGlja2VyX19jdXJyZW50LW1vbnRoLS1oYXNZZWFyRHJvcGRvd25cIiksYS5wcm9wcy5zaG93TW9udGhEcm9wZG93biYmdC5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aC0taGFzTW9udGhEcm9wZG93blwiKSxhLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93biYmdC5wdXNoKFwicmVhY3QtZGF0ZXBpY2tlcl9fY3VycmVudC1tb250aC0taGFzTW9udGhZZWFyRHJvcGRvd25cIiksZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTp0LmpvaW4oXCIgXCIpfSxMdChlLGEucHJvcHMuZGF0ZUZvcm1hdCxhLnByb3BzLmxvY2FsZSkpfSkpLG10KGJ0KGEpLFwicmVuZGVyWWVhckRyb3Bkb3duXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXTtpZihhLnByb3BzLnNob3dZZWFyRHJvcGRvd24mJiFlKXJldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3Ise2FkanVzdERhdGVPbkNoYW5nZTphLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSxkYXRlOmEuc3RhdGUuZGF0ZSxvblNlbGVjdDphLnByb3BzLm9uU2VsZWN0LHNldE9wZW46YS5wcm9wcy5zZXRPcGVuLGRyb3Bkb3duTW9kZTphLnByb3BzLmRyb3Bkb3duTW9kZSxvbkNoYW5nZTphLmNoYW5nZVllYXIsbWluRGF0ZTphLnByb3BzLm1pbkRhdGUsbWF4RGF0ZTphLnByb3BzLm1heERhdGUseWVhcjpUZS5kZWZhdWx0KGEuc3RhdGUuZGF0ZSksc2Nyb2xsYWJsZVllYXJEcm9wZG93bjphLnByb3BzLnNjcm9sbGFibGVZZWFyRHJvcGRvd24seWVhckRyb3Bkb3duSXRlbU51bWJlcjphLnByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXJ9KX0pKSxtdChidChhKSxcInJlbmRlck1vbnRoRHJvcGRvd25cIiwoZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO2lmKGEucHJvcHMuc2hvd01vbnRoRHJvcGRvd24mJiFlKXJldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXIse2Ryb3Bkb3duTW9kZTphLnByb3BzLmRyb3Bkb3duTW9kZSxsb2NhbGU6YS5wcm9wcy5sb2NhbGUsb25DaGFuZ2U6YS5jaGFuZ2VNb250aCxtb250aDpZZS5kZWZhdWx0KGEuc3RhdGUuZGF0ZSksdXNlU2hvcnRNb250aEluRHJvcGRvd246YS5wcm9wcy51c2VTaG9ydE1vbnRoSW5Ecm9wZG93bn0pfSkpLG10KGJ0KGEpLFwicmVuZGVyTW9udGhZZWFyRHJvcGRvd25cIiwoZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO2lmKGEucHJvcHMuc2hvd01vbnRoWWVhckRyb3Bkb3duJiYhZSlyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHhyLHtkcm9wZG93bk1vZGU6YS5wcm9wcy5kcm9wZG93bk1vZGUsbG9jYWxlOmEucHJvcHMubG9jYWxlLGRhdGVGb3JtYXQ6YS5wcm9wcy5kYXRlRm9ybWF0LG9uQ2hhbmdlOmEuY2hhbmdlTW9udGhZZWFyLG1pbkRhdGU6YS5wcm9wcy5taW5EYXRlLG1heERhdGU6YS5wcm9wcy5tYXhEYXRlLGRhdGU6YS5zdGF0ZS5kYXRlLHNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bjphLnByb3BzLnNjcm9sbGFibGVNb250aFllYXJEcm9wZG93bn0pfSkpLG10KGJ0KGEpLFwicmVuZGVyVG9kYXlCdXR0b25cIiwoZnVuY3Rpb24oKXtpZihhLnByb3BzLnRvZGF5QnV0dG9uJiYhYS5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpcmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX190b2RheS1idXR0b25cIixvbkNsaWNrOmZ1bmN0aW9uKGUpe3JldHVybiBhLnByb3BzLm9uU2VsZWN0KFZlLmRlZmF1bHQoeHQoKSksZSl9fSxhLnByb3BzLnRvZGF5QnV0dG9uKX0pKSxtdChidChhKSxcInJlbmRlckRlZmF1bHRIZWFkZXJcIiwoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5tb250aERhdGUscj1lLmk7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXIgXCIuY29uY2F0KGEucHJvcHMuc2hvd1RpbWVTZWxlY3Q/XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXItLWhhcy10aW1lLXNlbGVjdFwiOlwiXCIpfSxhLnJlbmRlckN1cnJlbnRNb250aCh0KSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyX19kcm9wZG93biByZWFjdC1kYXRlcGlja2VyX19oZWFkZXJfX2Ryb3Bkb3duLS1cIi5jb25jYXQoYS5wcm9wcy5kcm9wZG93bk1vZGUpLG9uRm9jdXM6YS5oYW5kbGVEcm9wZG93bkZvY3VzfSxhLnJlbmRlck1vbnRoRHJvcGRvd24oMCE9PXIpLGEucmVuZGVyTW9udGhZZWFyRHJvcGRvd24oMCE9PXIpLGEucmVuZGVyWWVhckRyb3Bkb3duKDAhPT1yKSksZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX2RheS1uYW1lc1wifSxhLmhlYWRlcih0KSkpfSkpLG10KGJ0KGEpLFwicmVuZGVyQ3VzdG9tSGVhZGVyXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9ZS5tb250aERhdGUscj1lLmk7aWYoYS5wcm9wcy5zaG93VGltZVNlbGVjdCYmKGEuc3RhdGUubW9udGhDb250YWluZXJ8fGEucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSlyZXR1cm4gbnVsbDt2YXIgbj11cihhLnN0YXRlLmRhdGUsYS5wcm9wcyksbz1mcihhLnN0YXRlLmRhdGUsYS5wcm9wcykscz1ocihhLnN0YXRlLmRhdGUsYS5wcm9wcyksaT1tcihhLnN0YXRlLmRhdGUsYS5wcm9wcykscD0hYS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyJiYhYS5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXImJiFhLnByb3BzLnNob3dZZWFyUGlja2VyO3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9faGVhZGVyIHJlYWN0LWRhdGVwaWNrZXJfX2hlYWRlci0tY3VzdG9tXCIsb25Gb2N1czphLnByb3BzLm9uRHJvcGRvd25Gb2N1c30sYS5wcm9wcy5yZW5kZXJDdXN0b21IZWFkZXIoRHQoRHQoe30sYS5zdGF0ZSkse30se2N1c3RvbUhlYWRlckNvdW50OnIsY2hhbmdlTW9udGg6YS5jaGFuZ2VNb250aCxjaGFuZ2VZZWFyOmEuY2hhbmdlWWVhcixkZWNyZWFzZU1vbnRoOmEuZGVjcmVhc2VNb250aCxpbmNyZWFzZU1vbnRoOmEuaW5jcmVhc2VNb250aCxkZWNyZWFzZVllYXI6YS5kZWNyZWFzZVllYXIsaW5jcmVhc2VZZWFyOmEuaW5jcmVhc2VZZWFyLHByZXZNb250aEJ1dHRvbkRpc2FibGVkOm4sbmV4dE1vbnRoQnV0dG9uRGlzYWJsZWQ6byxwcmV2WWVhckJ1dHRvbkRpc2FibGVkOnMsbmV4dFllYXJCdXR0b25EaXNhYmxlZDppfSkpLHAmJmRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19kYXktbmFtZXNcIn0sYS5oZWFkZXIodCkpKX0pKSxtdChidChhKSxcInJlbmRlclllYXJIZWFkZXJcIiwoZnVuY3Rpb24oKXt2YXIgZT1hLnN0YXRlLmRhdGUsdD1hLnByb3BzLHI9dC5zaG93WWVhclBpY2tlcixuPWdyKGUsdC55ZWFySXRlbU51bWJlciksbz1uLnN0YXJ0UGVyaW9kLHM9bi5lbmRQZXJpb2Q7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19oZWFkZXIgcmVhY3QtZGF0ZXBpY2tlci15ZWFyLWhlYWRlclwifSxyP1wiXCIuY29uY2F0KG8sXCIgLSBcIikuY29uY2F0KHMpOlRlLmRlZmF1bHQoZSkpfSkpLG10KGJ0KGEpLFwicmVuZGVySGVhZGVyXCIsKGZ1bmN0aW9uKGUpe3N3aXRjaCghMCl7Y2FzZSB2b2lkIDAhPT1hLnByb3BzLnJlbmRlckN1c3RvbUhlYWRlcjpyZXR1cm4gYS5yZW5kZXJDdXN0b21IZWFkZXIoZSk7Y2FzZSBhLnByb3BzLnNob3dNb250aFllYXJQaWNrZXJ8fGEucHJvcHMuc2hvd1F1YXJ0ZXJZZWFyUGlja2VyfHxhLnByb3BzLnNob3dZZWFyUGlja2VyOnJldHVybiBhLnJlbmRlclllYXJIZWFkZXIoZSk7ZGVmYXVsdDpyZXR1cm4gYS5yZW5kZXJEZWZhdWx0SGVhZGVyKGUpfX0pKSxtdChidChhKSxcInJlbmRlck1vbnRoc1wiLChmdW5jdGlvbigpe2lmKCFhLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSYmIWEucHJvcHMuc2hvd1llYXJQaWNrZXIpe2Zvcih2YXIgZT1bXSx0PWEucHJvcHMuc2hvd1ByZXZpb3VzTW9udGhzP2EucHJvcHMubW9udGhzU2hvd24tMTowLHI9Q2UuZGVmYXVsdChhLnN0YXRlLmRhdGUsdCksbj0wO248YS5wcm9wcy5tb250aHNTaG93bjsrK24pe3ZhciBvPW4tYS5wcm9wcy5tb250aFNlbGVjdGVkSW4scz13ZS5kZWZhdWx0KHIsbyksaT1cIm1vbnRoLVwiLmNvbmNhdChuKSxwPW48YS5wcm9wcy5tb250aHNTaG93bi0xLGw9bj4wO2UucHVzaChkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7a2V5OmkscmVmOmZ1bmN0aW9uKGUpe2EubW9udGhDb250YWluZXI9ZX0sY2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fbW9udGgtY29udGFpbmVyXCJ9LGEucmVuZGVySGVhZGVyKHttb250aERhdGU6cyxpOm59KSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRnIse2Nob29zZURheUFyaWFMYWJlbFByZWZpeDphLnByb3BzLmNob29zZURheUFyaWFMYWJlbFByZWZpeCxkaXNhYmxlZERheUFyaWFMYWJlbFByZWZpeDphLnByb3BzLmRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4LHdlZWtBcmlhTGFiZWxQcmVmaXg6YS5wcm9wcy53ZWVrQXJpYUxhYmVsUHJlZml4LG9uQ2hhbmdlOmEuY2hhbmdlTW9udGhZZWFyLGRheTpzLGRheUNsYXNzTmFtZTphLnByb3BzLmRheUNsYXNzTmFtZSxtb250aENsYXNzTmFtZTphLnByb3BzLm1vbnRoQ2xhc3NOYW1lLG9uRGF5Q2xpY2s6YS5oYW5kbGVEYXlDbGljayxoYW5kbGVPbktleURvd246YS5wcm9wcy5oYW5kbGVPbktleURvd24sb25EYXlNb3VzZUVudGVyOmEuaGFuZGxlRGF5TW91c2VFbnRlcixvbk1vdXNlTGVhdmU6YS5oYW5kbGVNb250aE1vdXNlTGVhdmUsb25XZWVrU2VsZWN0OmEucHJvcHMub25XZWVrU2VsZWN0LG9yZGVySW5EaXNwbGF5Om4sZm9ybWF0V2Vla051bWJlcjphLnByb3BzLmZvcm1hdFdlZWtOdW1iZXIsbG9jYWxlOmEucHJvcHMubG9jYWxlLG1pbkRhdGU6YS5wcm9wcy5taW5EYXRlLG1heERhdGU6YS5wcm9wcy5tYXhEYXRlLGV4Y2x1ZGVEYXRlczphLnByb3BzLmV4Y2x1ZGVEYXRlcyxoaWdobGlnaHREYXRlczphLnByb3BzLmhpZ2hsaWdodERhdGVzLHNlbGVjdGluZ0RhdGU6YS5zdGF0ZS5zZWxlY3RpbmdEYXRlLGluY2x1ZGVEYXRlczphLnByb3BzLmluY2x1ZGVEYXRlcyxpbmxpbmU6YS5wcm9wcy5pbmxpbmUsc2hvdWxkRm9jdXNEYXlJbmxpbmU6YS5wcm9wcy5zaG91bGRGb2N1c0RheUlubGluZSxmaXhlZEhlaWdodDphLnByb3BzLmZpeGVkSGVpZ2h0LGZpbHRlckRhdGU6YS5wcm9wcy5maWx0ZXJEYXRlLHByZVNlbGVjdGlvbjphLnByb3BzLnByZVNlbGVjdGlvbixzZXRQcmVTZWxlY3Rpb246YS5wcm9wcy5zZXRQcmVTZWxlY3Rpb24sc2VsZWN0ZWQ6YS5wcm9wcy5zZWxlY3RlZCxzZWxlY3RzU3RhcnQ6YS5wcm9wcy5zZWxlY3RzU3RhcnQsc2VsZWN0c0VuZDphLnByb3BzLnNlbGVjdHNFbmQsc2VsZWN0c1JhbmdlOmEucHJvcHMuc2VsZWN0c1JhbmdlLHNob3dXZWVrTnVtYmVyczphLnByb3BzLnNob3dXZWVrTnVtYmVycyxzdGFydERhdGU6YS5wcm9wcy5zdGFydERhdGUsZW5kRGF0ZTphLnByb3BzLmVuZERhdGUscGVla05leHRNb250aDphLnByb3BzLnBlZWtOZXh0TW9udGgsc2V0T3BlbjphLnByb3BzLnNldE9wZW4sc2hvdWxkQ2xvc2VPblNlbGVjdDphLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QscmVuZGVyRGF5Q29udGVudHM6YS5wcm9wcy5yZW5kZXJEYXlDb250ZW50cyxkaXNhYmxlZEtleWJvYXJkTmF2aWdhdGlvbjphLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uLHNob3dNb250aFllYXJQaWNrZXI6YS5wcm9wcy5zaG93TW9udGhZZWFyUGlja2VyLHNob3dGdWxsTW9udGhZZWFyUGlja2VyOmEucHJvcHMuc2hvd0Z1bGxNb250aFllYXJQaWNrZXIsc2hvd1R3b0NvbHVtbk1vbnRoWWVhclBpY2tlcjphLnByb3BzLnNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXIsc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXI6YS5wcm9wcy5zaG93Rm91ckNvbHVtbk1vbnRoWWVhclBpY2tlcixzaG93WWVhclBpY2tlcjphLnByb3BzLnNob3dZZWFyUGlja2VyLHNob3dRdWFydGVyWWVhclBpY2tlcjphLnByb3BzLnNob3dRdWFydGVyWWVhclBpY2tlcixpc0lucHV0Rm9jdXNlZDphLnByb3BzLmlzSW5wdXRGb2N1c2VkLGNvbnRhaW5lclJlZjphLmNvbnRhaW5lclJlZixtb250aFNob3dzRHVwbGljYXRlRGF5c0VuZDpwLG1vbnRoU2hvd3NEdXBsaWNhdGVEYXlzU3RhcnQ6bH0pKSl9cmV0dXJuIGV9fSkpLG10KGJ0KGEpLFwicmVuZGVyWWVhcnNcIiwoZnVuY3Rpb24oKXtpZighYS5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHkpcmV0dXJuIGEucHJvcHMuc2hvd1llYXJQaWNrZXI/ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInJlYWN0LWRhdGVwaWNrZXJfX3llYXItLWNvbnRhaW5lclwifSxhLnJlbmRlckhlYWRlcigpLGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChxcix5dCh7b25EYXlDbGljazphLmhhbmRsZURheUNsaWNrLGRhdGU6YS5zdGF0ZS5kYXRlfSxhLnByb3BzKSkpOnZvaWQgMH0pKSxtdChidChhKSxcInJlbmRlclRpbWVTZWN0aW9uXCIsKGZ1bmN0aW9uKCl7aWYoYS5wcm9wcy5zaG93VGltZVNlbGVjdCYmKGEuc3RhdGUubW9udGhDb250YWluZXJ8fGEucHJvcHMuc2hvd1RpbWVTZWxlY3RPbmx5KSlyZXR1cm4gZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJyLHtzZWxlY3RlZDphLnByb3BzLnNlbGVjdGVkLG9wZW5Ub0RhdGU6YS5wcm9wcy5vcGVuVG9EYXRlLG9uQ2hhbmdlOmEucHJvcHMub25UaW1lQ2hhbmdlLHRpbWVDbGFzc05hbWU6YS5wcm9wcy50aW1lQ2xhc3NOYW1lLGZvcm1hdDphLnByb3BzLnRpbWVGb3JtYXQsaW5jbHVkZVRpbWVzOmEucHJvcHMuaW5jbHVkZVRpbWVzLGludGVydmFsczphLnByb3BzLnRpbWVJbnRlcnZhbHMsbWluVGltZTphLnByb3BzLm1pblRpbWUsbWF4VGltZTphLnByb3BzLm1heFRpbWUsZXhjbHVkZVRpbWVzOmEucHJvcHMuZXhjbHVkZVRpbWVzLGZpbHRlclRpbWU6YS5wcm9wcy5maWx0ZXJUaW1lLHRpbWVDYXB0aW9uOmEucHJvcHMudGltZUNhcHRpb24sdG9kYXlCdXR0b246YS5wcm9wcy50b2RheUJ1dHRvbixzaG93TW9udGhEcm9wZG93bjphLnByb3BzLnNob3dNb250aERyb3Bkb3duLHNob3dNb250aFllYXJEcm9wZG93bjphLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93bixzaG93WWVhckRyb3Bkb3duOmEucHJvcHMuc2hvd1llYXJEcm9wZG93bix3aXRoUG9ydGFsOmEucHJvcHMud2l0aFBvcnRhbCxtb250aFJlZjphLnN0YXRlLm1vbnRoQ29udGFpbmVyLGluamVjdFRpbWVzOmEucHJvcHMuaW5qZWN0VGltZXMsbG9jYWxlOmEucHJvcHMubG9jYWxlLHNob3dUaW1lU2VsZWN0T25seTphLnByb3BzLnNob3dUaW1lU2VsZWN0T25seX0pfSkpLG10KGJ0KGEpLFwicmVuZGVySW5wdXRUaW1lU2VjdGlvblwiLChmdW5jdGlvbigpe3ZhciBlPW5ldyBEYXRlKGEucHJvcHMuc2VsZWN0ZWQpLHQ9SXQoZSkmJkJvb2xlYW4oYS5wcm9wcy5zZWxlY3RlZCk/XCJcIi5jb25jYXQoa3IoZS5nZXRIb3VycygpKSxcIjpcIikuY29uY2F0KGtyKGUuZ2V0TWludXRlcygpKSk6XCJcIjtpZihhLnByb3BzLnNob3dUaW1lSW5wdXQpcmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChBcix7ZGF0ZTplLHRpbWVTdHJpbmc6dCx0aW1lSW5wdXRMYWJlbDphLnByb3BzLnRpbWVJbnB1dExhYmVsLG9uQ2hhbmdlOmEucHJvcHMub25UaW1lQ2hhbmdlLGN1c3RvbVRpbWVJbnB1dDphLnByb3BzLmN1c3RvbVRpbWVJbnB1dH0pfSkpLGEuY29udGFpbmVyUmVmPWRlLmRlZmF1bHQuY3JlYXRlUmVmKCksYS5zdGF0ZT17ZGF0ZTphLmdldERhdGVJblZpZXcoKSxzZWxlY3RpbmdEYXRlOm51bGwsbW9udGhDb250YWluZXI6bnVsbH0sYX1yZXR1cm4gaHQocixbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucHJvcHMuc2hvd1RpbWVTZWxlY3QmJih0aGlzLmFzc2lnbk1vbnRoQ29udGFpbmVyPXZvaWQgZS5zZXRTdGF0ZSh7bW9udGhDb250YWluZXI6ZS5tb250aENvbnRhaW5lcn0pKX19LHtrZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnByb3BzLnByZVNlbGVjdGlvbiYmIVV0KHRoaXMucHJvcHMucHJlU2VsZWN0aW9uLGUucHJlU2VsZWN0aW9uKT90aGlzLnNldFN0YXRlKHtkYXRlOnRoaXMucHJvcHMucHJlU2VsZWN0aW9ufSk6dGhpcy5wcm9wcy5vcGVuVG9EYXRlJiYhVXQodGhpcy5wcm9wcy5vcGVuVG9EYXRlLGUub3BlblRvRGF0ZSkmJnRoaXMuc2V0U3RhdGUoe2RhdGU6dGhpcy5wcm9wcy5vcGVuVG9EYXRlfSl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByb3BzLmNvbnRhaW5lcnx8V3I7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyZWY6dGhpcy5jb250YWluZXJSZWZ9LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChlLHtjbGFzc05hbWU6Y2UuZGVmYXVsdChcInJlYWN0LWRhdGVwaWNrZXJcIix0aGlzLnByb3BzLmNsYXNzTmFtZSx7XCJyZWFjdC1kYXRlcGlja2VyLS10aW1lLW9ubHlcIjp0aGlzLnByb3BzLnNob3dUaW1lU2VsZWN0T25seX0pLHNob3dQb3BwZXJBcnJvdzp0aGlzLnByb3BzLnNob3dQb3BwZXJBcnJvdyxhcnJvd1Byb3BzOnRoaXMucHJvcHMuYXJyb3dQcm9wc30sdGhpcy5yZW5kZXJQcmV2aW91c0J1dHRvbigpLHRoaXMucmVuZGVyTmV4dEJ1dHRvbigpLHRoaXMucmVuZGVyTW9udGhzKCksdGhpcy5yZW5kZXJZZWFycygpLHRoaXMucmVuZGVyVG9kYXlCdXR0b24oKSx0aGlzLnJlbmRlclRpbWVTZWN0aW9uKCksdGhpcy5yZW5kZXJJbnB1dFRpbWVTZWN0aW9uKCksdGhpcy5wcm9wcy5jaGlsZHJlbikpfX1dLFt7a2V5OlwiZGVmYXVsdFByb3BzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue29uRHJvcGRvd25Gb2N1czpmdW5jdGlvbigpe30sbW9udGhzU2hvd246MSxtb250aFNlbGVjdGVkSW46MCxmb3JjZVNob3dNb250aE5hdmlnYXRpb246ITEsdGltZUNhcHRpb246XCJUaW1lXCIscHJldmlvdXNZZWFyQnV0dG9uTGFiZWw6XCJQcmV2aW91cyBZZWFyXCIsbmV4dFllYXJCdXR0b25MYWJlbDpcIk5leHQgWWVhclwiLHByZXZpb3VzTW9udGhCdXR0b25MYWJlbDpcIlByZXZpb3VzIE1vbnRoXCIsbmV4dE1vbnRoQnV0dG9uTGFiZWw6XCJOZXh0IE1vbnRoXCIsY3VzdG9tVGltZUlucHV0Om51bGwseWVhckl0ZW1OdW1iZXI6T3R9fX1dKSxyfShkZS5kZWZhdWx0LkNvbXBvbmVudCksSHI9ZnVuY3Rpb24oZSl7cmV0dXJuIWUuZGlzYWJsZWQmJi0xIT09ZS50YWJJbmRleH0sS3I9ZnVuY3Rpb24oZSl7d3QocixlKTt2YXIgdD1TdChyKTtmdW5jdGlvbiByKGUpe3ZhciBhO3JldHVybiB1dCh0aGlzLHIpLG10KGJ0KGE9dC5jYWxsKHRoaXMsZSkpLFwiZ2V0VGFiQ2hpbGRyZW5cIiwoZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYS50YWJMb29wUmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvckFsbChcIlt0YWJpbmRleF0sIGEsIGJ1dHRvbiwgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWFcIiksMSwtMSkuZmlsdGVyKEhyKX0pKSxtdChidChhKSxcImhhbmRsZUZvY3VzU3RhcnRcIiwoZnVuY3Rpb24oZSl7dmFyIHQ9YS5nZXRUYWJDaGlsZHJlbigpO3QmJnQubGVuZ3RoPjEmJnRbdC5sZW5ndGgtMV0uZm9jdXMoKX0pKSxtdChidChhKSxcImhhbmRsZUZvY3VzRW5kXCIsKGZ1bmN0aW9uKGUpe3ZhciB0PWEuZ2V0VGFiQ2hpbGRyZW4oKTt0JiZ0Lmxlbmd0aD4xJiZ0WzBdLmZvY3VzKCl9KSksYS50YWJMb29wUmVmPWRlLmRlZmF1bHQuY3JlYXRlUmVmKCksYX1yZXR1cm4gaHQocixbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcHMuZW5hYmxlVGFiTG9vcD9kZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fdGFiLWxvb3BcIixyZWY6dGhpcy50YWJMb29wUmVmfSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9fdGFiLWxvb3BfX3N0YXJ0XCIsdGFiSW5kZXg6XCIwXCIsb25Gb2N1czp0aGlzLmhhbmRsZUZvY3VzU3RhcnR9KSx0aGlzLnByb3BzLmNoaWxkcmVuLGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX190YWItbG9vcF9fZW5kXCIsdGFiSW5kZXg6XCIwXCIsb25Gb2N1czp0aGlzLmhhbmRsZUZvY3VzRW5kfSkpOnRoaXMucHJvcHMuY2hpbGRyZW59fV0sW3trZXk6XCJkZWZhdWx0UHJvcHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57ZW5hYmxlVGFiTG9vcDohMH19fV0pLHJ9KGRlLmRlZmF1bHQuQ29tcG9uZW50KSxRcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoZSl7dmFyIGE7cmV0dXJuIHV0KHRoaXMsciksKGE9dC5jYWxsKHRoaXMsZSkpLmVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYX1yZXR1cm4gaHQocixbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnBvcnRhbFJvb3Q9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wcm9wcy5wb3J0YWxJZCksdGhpcy5wb3J0YWxSb290fHwodGhpcy5wb3J0YWxSb290PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5wb3J0YWxSb290LnNldEF0dHJpYnV0ZShcImlkXCIsdGhpcy5wcm9wcy5wb3J0YWxJZCksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnBvcnRhbFJvb3QpKSx0aGlzLnBvcnRhbFJvb3QuYXBwZW5kQ2hpbGQodGhpcy5lbCl9fSx7a2V5OlwiY29tcG9uZW50V2lsbFVubW91bnRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucG9ydGFsUm9vdC5yZW1vdmVDaGlsZCh0aGlzLmVsKX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBkdC5kZWZhdWx0LmNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLHRoaXMuZWwpfX1dKSxyfShkZS5kZWZhdWx0LkNvbXBvbmVudCksVnI9ZnVuY3Rpb24oZSl7d3QocixlKTt2YXIgdD1TdChyKTtmdW5jdGlvbiByKCl7cmV0dXJuIHV0KHRoaXMsciksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGh0KHIsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5wcm9wcyxyPXQuY2xhc3NOYW1lLGE9dC53cmFwcGVyQ2xhc3NOYW1lLG49dC5oaWRlUG9wcGVyLG89dC5wb3BwZXJDb21wb25lbnQscz10LnBvcHBlck1vZGlmaWVycyxpPXQucG9wcGVyUGxhY2VtZW50LHA9dC5wb3BwZXJQcm9wcyxsPXQudGFyZ2V0Q29tcG9uZW50LGQ9dC5lbmFibGVUYWJMb29wLGM9dC5wb3BwZXJPbktleURvd24sdT10LnBvcnRhbElkO2lmKCFuKXt2YXIgZj1jZS5kZWZhdWx0KFwicmVhY3QtZGF0ZXBpY2tlci1wb3BwZXJcIixyKTtlPWRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChpZS5Qb3BwZXIseXQoe21vZGlmaWVyczpzLHBsYWNlbWVudDppfSxwKSwoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZWYscj1lLnN0eWxlLGE9ZS5wbGFjZW1lbnQsbj1lLmFycm93UHJvcHM7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChLcix7ZW5hYmxlVGFiTG9vcDpkfSxkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7cmVmOnQsc3R5bGU6cixjbGFzc05hbWU6ZixcImRhdGEtcGxhY2VtZW50XCI6YSxvbktleURvd246Y30sZGUuZGVmYXVsdC5jbG9uZUVsZW1lbnQobyx7YXJyb3dQcm9wczpufSkpKX0pKX10aGlzLnByb3BzLnBvcHBlckNvbnRhaW5lciYmKGU9ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMucG9wcGVyQ29udGFpbmVyLHt9LGUpKSx1JiYhbiYmKGU9ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFFyLHtwb3J0YWxJZDp1fSxlKSk7dmFyIGg9Y2UuZGVmYXVsdChcInJlYWN0LWRhdGVwaWNrZXItd3JhcHBlclwiLGEpO3JldHVybiBkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoaWUuTWFuYWdlcix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlci1tYW5hZ2VyXCJ9LGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChpZS5SZWZlcmVuY2UsbnVsbCwoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZWY7cmV0dXJuIGRlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtyZWY6dCxjbGFzc05hbWU6aH0sbCl9KSksZSl9fV0sW3trZXk6XCJkZWZhdWx0UHJvcHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aGlkZVBvcHBlcjohMCxwb3BwZXJNb2RpZmllcnM6e3ByZXZlbnRPdmVyZmxvdzp7ZW5hYmxlZDohMCxlc2NhcGVXaXRoUmVmZXJlbmNlOiEwLGJvdW5kYXJpZXNFbGVtZW50Olwidmlld3BvcnRcIn19LHBvcHBlclByb3BzOnt9LHBvcHBlclBsYWNlbWVudDpcImJvdHRvbS1zdGFydFwifX19XSkscn0oZGUuZGVmYXVsdC5Db21wb25lbnQpLFVyPVwicmVhY3QtZGF0ZXBpY2tlci1pZ25vcmUtb25jbGlja291dHNpZGVcIiwkcj1sdC5kZWZhdWx0KGpyKTt2YXIgenI9XCJEYXRlIGlucHV0IG5vdCB2YWxpZC5cIixHcj1mdW5jdGlvbihlKXt3dChyLGUpO3ZhciB0PVN0KHIpO2Z1bmN0aW9uIHIoZSl7dmFyIGE7cmV0dXJuIHV0KHRoaXMsciksbXQoYnQoYT10LmNhbGwodGhpcyxlKSksXCJnZXRQcmVTZWxlY3Rpb25cIiwoZnVuY3Rpb24oKXtyZXR1cm4gYS5wcm9wcy5vcGVuVG9EYXRlP2EucHJvcHMub3BlblRvRGF0ZTphLnByb3BzLnNlbGVjdHNFbmQmJmEucHJvcHMuc3RhcnREYXRlP2EucHJvcHMuc3RhcnREYXRlOmEucHJvcHMuc2VsZWN0c1N0YXJ0JiZhLnByb3BzLmVuZERhdGU/YS5wcm9wcy5lbmREYXRlOnh0KCl9KSksbXQoYnQoYSksXCJjYWxjSW5pdGlhbFN0YXRlXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YS5nZXRQcmVTZWxlY3Rpb24oKSx0PXlyKGEucHJvcHMpLHI9dnIoYS5wcm9wcyksbj10JiZudC5kZWZhdWx0KGUsdCk/dDpyJiZhdC5kZWZhdWx0KGUscik/cjplO3JldHVybntvcGVuOmEucHJvcHMuc3RhcnRPcGVufHwhMSxwcmV2ZW50Rm9jdXM6ITEscHJlU2VsZWN0aW9uOmEucHJvcHMuc2VsZWN0ZWQ/YS5wcm9wcy5zZWxlY3RlZDpuLGhpZ2hsaWdodERhdGVzOkRyKGEucHJvcHMuaGlnaGxpZ2h0RGF0ZXMpLGZvY3VzZWQ6ITEsc2hvdWxkRm9jdXNEYXlJbmxpbmU6ITF9fSkpLG10KGJ0KGEpLFwiY2xlYXJQcmV2ZW50Rm9jdXNUaW1lb3V0XCIsKGZ1bmN0aW9uKCl7YS5wcmV2ZW50Rm9jdXNUaW1lb3V0JiZjbGVhclRpbWVvdXQoYS5wcmV2ZW50Rm9jdXNUaW1lb3V0KX0pKSxtdChidChhKSxcInNldEZvY3VzXCIsKGZ1bmN0aW9uKCl7YS5pbnB1dCYmYS5pbnB1dC5mb2N1cyYmYS5pbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDohMH0pfSkpLG10KGJ0KGEpLFwic2V0Qmx1clwiLChmdW5jdGlvbigpe2EuaW5wdXQmJmEuaW5wdXQuYmx1ciYmYS5pbnB1dC5ibHVyKCksYS5jYW5jZWxGb2N1c0lucHV0KCl9KSksbXQoYnQoYSksXCJzZXRPcGVuXCIsKGZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07YS5zZXRTdGF0ZSh7b3BlbjplLHByZVNlbGVjdGlvbjplJiZhLnN0YXRlLm9wZW4/YS5zdGF0ZS5wcmVTZWxlY3Rpb246YS5jYWxjSW5pdGlhbFN0YXRlKCkucHJlU2VsZWN0aW9uLGxhc3RQcmVTZWxlY3RDaGFuZ2U6WHJ9LChmdW5jdGlvbigpe2V8fGEuc2V0U3RhdGUoKGZ1bmN0aW9uKGUpe3JldHVybntmb2N1c2VkOiEhdCYmZS5mb2N1c2VkfX0pLChmdW5jdGlvbigpeyF0JiZhLnNldEJsdXIoKSxhLnNldFN0YXRlKHtpbnB1dFZhbHVlOm51bGx9KX0pKX0pKX0pKSxtdChidChhKSxcImlucHV0T2tcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdWUuZGVmYXVsdChhLnN0YXRlLnByZVNlbGVjdGlvbil9KSksbXQoYnQoYSksXCJpc0NhbGVuZGFyT3BlblwiLChmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1hLnByb3BzLm9wZW4/YS5zdGF0ZS5vcGVuJiYhYS5wcm9wcy5kaXNhYmxlZCYmIWEucHJvcHMucmVhZE9ubHk6YS5wcm9wcy5vcGVufSkpLG10KGJ0KGEpLFwiaGFuZGxlRm9jdXNcIiwoZnVuY3Rpb24oZSl7YS5zdGF0ZS5wcmV2ZW50Rm9jdXN8fChhLnByb3BzLm9uRm9jdXMoZSksYS5wcm9wcy5wcmV2ZW50T3Blbk9uRm9jdXN8fGEucHJvcHMucmVhZE9ubHl8fGEuc2V0T3BlbighMCkpLGEuc2V0U3RhdGUoe2ZvY3VzZWQ6ITB9KX0pKSxtdChidChhKSxcImNhbmNlbEZvY3VzSW5wdXRcIiwoZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoYS5pbnB1dEZvY3VzVGltZW91dCksYS5pbnB1dEZvY3VzVGltZW91dD1udWxsfSkpLG10KGJ0KGEpLFwiZGVmZXJGb2N1c0lucHV0XCIsKGZ1bmN0aW9uKCl7YS5jYW5jZWxGb2N1c0lucHV0KCksYS5pbnB1dEZvY3VzVGltZW91dD1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3JldHVybiBhLnNldEZvY3VzKCl9KSwxKX0pKSxtdChidChhKSxcImhhbmRsZURyb3Bkb3duRm9jdXNcIiwoZnVuY3Rpb24oKXthLmNhbmNlbEZvY3VzSW5wdXQoKX0pKSxtdChidChhKSxcImhhbmRsZUJsdXJcIiwoZnVuY3Rpb24oZSl7KCFhLnN0YXRlLm9wZW58fGEucHJvcHMud2l0aFBvcnRhbHx8YS5wcm9wcy5zaG93VGltZUlucHV0KSYmYS5wcm9wcy5vbkJsdXIoZSksYS5zZXRTdGF0ZSh7Zm9jdXNlZDohMX0pfSkpLG10KGJ0KGEpLFwiaGFuZGxlQ2FsZW5kYXJDbGlja091dHNpZGVcIiwoZnVuY3Rpb24oZSl7YS5wcm9wcy5pbmxpbmV8fGEuc2V0T3BlbighMSksYS5wcm9wcy5vbkNsaWNrT3V0c2lkZShlKSxhLnByb3BzLndpdGhQb3J0YWwmJmUucHJldmVudERlZmF1bHQoKX0pKSxtdChidChhKSxcImhhbmRsZUNoYW5nZVwiLChmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXRbcl09YXJndW1lbnRzW3JdO3ZhciBuPXRbMF07aWYoIWEucHJvcHMub25DaGFuZ2VSYXd8fChhLnByb3BzLm9uQ2hhbmdlUmF3LmFwcGx5KGJ0KGEpLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uaXNEZWZhdWx0UHJldmVudGVkJiYhbi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkpe2Euc2V0U3RhdGUoe2lucHV0VmFsdWU6bi50YXJnZXQudmFsdWUsbGFzdFByZVNlbGVjdENoYW5nZTpKcn0pO3ZhciBvPVR0KG4udGFyZ2V0LnZhbHVlLGEucHJvcHMuZGF0ZUZvcm1hdCxhLnByb3BzLmxvY2FsZSxhLnByb3BzLnN0cmljdFBhcnNpbmcpOyFvJiZuLnRhcmdldC52YWx1ZXx8YS5zZXRTZWxlY3RlZChvLG4sITApfX0pKSxtdChidChhKSxcImhhbmRsZVNlbGVjdFwiLChmdW5jdGlvbihlLHQscil7YS5zZXRTdGF0ZSh7cHJldmVudEZvY3VzOiEwfSwoZnVuY3Rpb24oKXtyZXR1cm4gYS5wcmV2ZW50Rm9jdXNUaW1lb3V0PXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc2V0U3RhdGUoe3ByZXZlbnRGb2N1czohMX0pfSksNTApLGEucHJldmVudEZvY3VzVGltZW91dH0pKSxhLnByb3BzLm9uQ2hhbmdlUmF3JiZhLnByb3BzLm9uQ2hhbmdlUmF3KHQpLGEuc2V0U2VsZWN0ZWQoZSx0LCExLHIpLCFhLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3R8fGEucHJvcHMuc2hvd1RpbWVTZWxlY3Q/YS5zZXRQcmVTZWxlY3Rpb24oZSk6YS5wcm9wcy5pbmxpbmV8fGEuc2V0T3BlbighMSl9KSksbXQoYnQoYSksXCJzZXRTZWxlY3RlZFwiLChmdW5jdGlvbihlLHQscixuKXt2YXIgbz1lO2lmKG51bGw9PT1vfHwhdHIobyxhLnByb3BzKSl7dmFyIHM9YS5wcm9wcyxpPXMub25DaGFuZ2UscD1zLnNlbGVjdHNSYW5nZSxsPXMuc3RhcnREYXRlLGQ9cy5lbmREYXRlO2lmKCEkdChhLnByb3BzLnNlbGVjdGVkLG8pfHxhLnByb3BzLmFsbG93U2FtZURheXx8cClpZihudWxsIT09byYmKCFhLnByb3BzLnNlbGVjdGVkfHxyJiYoYS5wcm9wcy5zaG93VGltZVNlbGVjdHx8YS5wcm9wcy5zaG93VGltZVNlbGVjdE9ubHl8fGEucHJvcHMuc2hvd1RpbWVJbnB1dCl8fChvPUZ0KG8se2hvdXI6UGUuZGVmYXVsdChhLnByb3BzLnNlbGVjdGVkKSxtaW51dGU6TWUuZGVmYXVsdChhLnByb3BzLnNlbGVjdGVkKSxzZWNvbmQ6X2UuZGVmYXVsdChhLnByb3BzLnNlbGVjdGVkKX0pKSxhLnByb3BzLmlubGluZXx8YS5zZXRTdGF0ZSh7cHJlU2VsZWN0aW9uOm99KSxhLnByb3BzLmZvY3VzU2VsZWN0ZWRNb250aHx8YS5zZXRTdGF0ZSh7bW9udGhTZWxlY3RlZEluOm59KSkscCl7dmFyIGM9bCYmIWQsdT1sJiZkOyFsJiYhZD9pKFtvLG51bGxdLHQpOmMmJihudC5kZWZhdWx0KG8sbCk/aShbbyxudWxsXSx0KTppKFtsLG9dLHQpKSx1JiZpKFtvLG51bGxdLHQpfWVsc2UgaShvLHQpO3J8fChhLnByb3BzLm9uU2VsZWN0KG8sdCksYS5zZXRTdGF0ZSh7aW5wdXRWYWx1ZTpudWxsfSkpfX0pKSxtdChidChhKSxcInNldFByZVNlbGVjdGlvblwiLChmdW5jdGlvbihlKXt2YXIgdD12b2lkIDAhPT1hLnByb3BzLm1pbkRhdGUscj12b2lkIDAhPT1hLnByb3BzLm1heERhdGUsbj0hMDtlJiYodCYmcj9uPXp0KGUsYS5wcm9wcy5taW5EYXRlLGEucHJvcHMubWF4RGF0ZSk6dD9uPWF0LmRlZmF1bHQoZSxhLnByb3BzLm1pbkRhdGUpOnImJihuPW50LmRlZmF1bHQoZSxhLnByb3BzLm1heERhdGUpKSksbiYmYS5zZXRTdGF0ZSh7cHJlU2VsZWN0aW9uOmV9KX0pKSxtdChidChhKSxcImhhbmRsZVRpbWVDaGFuZ2VcIiwoZnVuY3Rpb24oZSl7dmFyIHQ9RnQoYS5wcm9wcy5zZWxlY3RlZD9hLnByb3BzLnNlbGVjdGVkOmEuZ2V0UHJlU2VsZWN0aW9uKCkse2hvdXI6UGUuZGVmYXVsdChlKSxtaW51dGU6TWUuZGVmYXVsdChlKX0pO2Euc2V0U3RhdGUoe3ByZVNlbGVjdGlvbjp0fSksYS5wcm9wcy5vbkNoYW5nZSh0KSxhLnByb3BzLnNob3VsZENsb3NlT25TZWxlY3QmJmEuc2V0T3BlbighMSksYS5wcm9wcy5zaG93VGltZUlucHV0JiZhLnNldE9wZW4oITApLGEuc2V0U3RhdGUoe2lucHV0VmFsdWU6bnVsbH0pfSkpLG10KGJ0KGEpLFwib25JbnB1dENsaWNrXCIsKGZ1bmN0aW9uKCl7YS5wcm9wcy5kaXNhYmxlZHx8YS5wcm9wcy5yZWFkT25seXx8YS5zZXRPcGVuKCEwKSxhLnByb3BzLm9uSW5wdXRDbGljaygpfSkpLG10KGJ0KGEpLFwib25JbnB1dEtleURvd25cIiwoZnVuY3Rpb24oZSl7YS5wcm9wcy5vbktleURvd24oZSk7dmFyIHQ9ZS5rZXk7aWYoYS5zdGF0ZS5vcGVufHxhLnByb3BzLmlubGluZXx8YS5wcm9wcy5wcmV2ZW50T3Blbk9uRm9jdXMpe2lmKGEuc3RhdGUub3Blbil7aWYoXCJBcnJvd0Rvd25cIj09PXR8fFwiQXJyb3dVcFwiPT09dCl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciByPWEuY2FsZW5kYXIuY29tcG9uZW50Tm9kZSYmYS5jYWxlbmRhci5jb21wb25lbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5yZWFjdC1kYXRlcGlja2VyX19kYXlbdGFiaW5kZXg9XCIwXCJdJyk7cmV0dXJuIHZvaWQociYmci5mb2N1cyh7cHJldmVudFNjcm9sbDohMH0pKX12YXIgbj14dChhLnN0YXRlLnByZVNlbGVjdGlvbik7XCJFbnRlclwiPT09dD8oZS5wcmV2ZW50RGVmYXVsdCgpLGEuaW5wdXRPaygpJiZhLnN0YXRlLmxhc3RQcmVTZWxlY3RDaGFuZ2U9PT1Ycj8oYS5oYW5kbGVTZWxlY3QobixlKSwhYS5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0JiZhLnNldFByZVNlbGVjdGlvbihuKSk6YS5zZXRPcGVuKCExKSk6XCJFc2NhcGVcIj09PXQmJihlLnByZXZlbnREZWZhdWx0KCksYS5zZXRPcGVuKCExKSksYS5pbnB1dE9rKCl8fGEucHJvcHMub25JbnB1dEVycm9yKHtjb2RlOjEsbXNnOnpyfSl9fWVsc2VcIkFycm93RG93blwiIT09dCYmXCJBcnJvd1VwXCIhPT10JiZcIkVudGVyXCIhPT10fHxhLm9uSW5wdXRDbGljaygpfSkpLG10KGJ0KGEpLFwib25EYXlLZXlEb3duXCIsKGZ1bmN0aW9uKGUpe2EucHJvcHMub25LZXlEb3duKGUpO3ZhciB0PWUua2V5LHI9eHQoYS5zdGF0ZS5wcmVTZWxlY3Rpb24pO2lmKFwiRW50ZXJcIj09PXQpZS5wcmV2ZW50RGVmYXVsdCgpLGEuaGFuZGxlU2VsZWN0KHIsZSksIWEucHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCYmYS5zZXRQcmVTZWxlY3Rpb24ocik7ZWxzZSBpZihcIkVzY2FwZVwiPT09dCllLnByZXZlbnREZWZhdWx0KCksYS5zZXRPcGVuKCExKSxhLmlucHV0T2soKXx8YS5wcm9wcy5vbklucHV0RXJyb3Ioe2NvZGU6MSxtc2c6enJ9KTtlbHNlIGlmKCFhLnByb3BzLmRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uKXt2YXIgbjtzd2l0Y2godCl7Y2FzZVwiQXJyb3dMZWZ0XCI6bj1nZS5kZWZhdWx0KHIsMSk7YnJlYWs7Y2FzZVwiQXJyb3dSaWdodFwiOm49dmUuZGVmYXVsdChyLDEpO2JyZWFrO2Nhc2VcIkFycm93VXBcIjpuPWJlLmRlZmF1bHQociwxKTticmVhaztjYXNlXCJBcnJvd0Rvd25cIjpuPURlLmRlZmF1bHQociwxKTticmVhaztjYXNlXCJQYWdlVXBcIjpuPUNlLmRlZmF1bHQociwxKTticmVhaztjYXNlXCJQYWdlRG93blwiOm49d2UuZGVmYXVsdChyLDEpO2JyZWFrO2Nhc2VcIkhvbWVcIjpuPVNlLmRlZmF1bHQociwxKTticmVhaztjYXNlXCJFbmRcIjpuPWtlLmRlZmF1bHQociwxKX1pZighbilyZXR1cm4gdm9pZChhLnByb3BzLm9uSW5wdXRFcnJvciYmYS5wcm9wcy5vbklucHV0RXJyb3Ioe2NvZGU6MSxtc2c6enJ9KSk7aWYoZS5wcmV2ZW50RGVmYXVsdCgpLGEuc2V0U3RhdGUoe2xhc3RQcmVTZWxlY3RDaGFuZ2U6WHJ9KSxhLnByb3BzLmFkanVzdERhdGVPbkNoYW5nZSYmYS5zZXRTZWxlY3RlZChuKSxhLnNldFByZVNlbGVjdGlvbihuKSxhLnByb3BzLmlubGluZSl7dmFyIG89WWUuZGVmYXVsdChyKSxzPVllLmRlZmF1bHQobiksaT1UZS5kZWZhdWx0KHIpLHA9VGUuZGVmYXVsdChuKTtvIT09c3x8aSE9PXA/YS5zZXRTdGF0ZSh7c2hvdWxkRm9jdXNEYXlJbmxpbmU6ITB9KTphLnNldFN0YXRlKHtzaG91bGRGb2N1c0RheUlubGluZTohMX0pfX19KSksbXQoYnQoYSksXCJvblBvcHBlcktleURvd25cIiwoZnVuY3Rpb24oZSl7XCJFc2NhcGVcIj09PWUua2V5JiYoZS5wcmV2ZW50RGVmYXVsdCgpLGEuc2V0U3RhdGUoe3ByZXZlbnRGb2N1czohMH0sKGZ1bmN0aW9uKCl7YS5zZXRPcGVuKCExKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2Euc2V0Rm9jdXMoKSxhLnNldFN0YXRlKHtwcmV2ZW50Rm9jdXM6ITF9KX0pKX0pKSl9KSksbXQoYnQoYSksXCJvbkNsZWFyQ2xpY2tcIiwoZnVuY3Rpb24oZSl7ZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5wcmV2ZW50RGVmYXVsdCgpLGEucHJvcHMub25DaGFuZ2UobnVsbCxlKSxhLnNldFN0YXRlKHtpbnB1dFZhbHVlOm51bGx9KX0pKSxtdChidChhKSxcImNsZWFyXCIsKGZ1bmN0aW9uKCl7YS5vbkNsZWFyQ2xpY2soKX0pKSxtdChidChhKSxcIm9uU2Nyb2xsXCIsKGZ1bmN0aW9uKGUpe1wiYm9vbGVhblwiPT10eXBlb2YgYS5wcm9wcy5jbG9zZU9uU2Nyb2xsJiZhLnByb3BzLmNsb3NlT25TY3JvbGw/ZS50YXJnZXQhPT1kb2N1bWVudCYmZS50YXJnZXQhPT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmUudGFyZ2V0IT09ZG9jdW1lbnQuYm9keXx8YS5zZXRPcGVuKCExKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLnByb3BzLmNsb3NlT25TY3JvbGwmJmEucHJvcHMuY2xvc2VPblNjcm9sbChlKSYmYS5zZXRPcGVuKCExKX0pKSxtdChidChhKSxcInJlbmRlckNhbGVuZGFyXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGEucHJvcHMuaW5saW5lfHxhLmlzQ2FsZW5kYXJPcGVuKCk/ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCRyLHtyZWY6ZnVuY3Rpb24oZSl7YS5jYWxlbmRhcj1lfSxsb2NhbGU6YS5wcm9wcy5sb2NhbGUsY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4OmEucHJvcHMuY2hvb3NlRGF5QXJpYUxhYmVsUHJlZml4LGRpc2FibGVkRGF5QXJpYUxhYmVsUHJlZml4OmEucHJvcHMuZGlzYWJsZWREYXlBcmlhTGFiZWxQcmVmaXgsd2Vla0FyaWFMYWJlbFByZWZpeDphLnByb3BzLndlZWtBcmlhTGFiZWxQcmVmaXgsYWRqdXN0RGF0ZU9uQ2hhbmdlOmEucHJvcHMuYWRqdXN0RGF0ZU9uQ2hhbmdlLHNldE9wZW46YS5zZXRPcGVuLHNob3VsZENsb3NlT25TZWxlY3Q6YS5wcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0LGRhdGVGb3JtYXQ6YS5wcm9wcy5kYXRlRm9ybWF0Q2FsZW5kYXIsdXNlV2Vla2RheXNTaG9ydDphLnByb3BzLnVzZVdlZWtkYXlzU2hvcnQsZm9ybWF0V2Vla0RheTphLnByb3BzLmZvcm1hdFdlZWtEYXksZHJvcGRvd25Nb2RlOmEucHJvcHMuZHJvcGRvd25Nb2RlLHNlbGVjdGVkOmEucHJvcHMuc2VsZWN0ZWQscHJlU2VsZWN0aW9uOmEuc3RhdGUucHJlU2VsZWN0aW9uLG9uU2VsZWN0OmEuaGFuZGxlU2VsZWN0LG9uV2Vla1NlbGVjdDphLnByb3BzLm9uV2Vla1NlbGVjdCxvcGVuVG9EYXRlOmEucHJvcHMub3BlblRvRGF0ZSxtaW5EYXRlOmEucHJvcHMubWluRGF0ZSxtYXhEYXRlOmEucHJvcHMubWF4RGF0ZSxzZWxlY3RzU3RhcnQ6YS5wcm9wcy5zZWxlY3RzU3RhcnQsc2VsZWN0c0VuZDphLnByb3BzLnNlbGVjdHNFbmQsc2VsZWN0c1JhbmdlOmEucHJvcHMuc2VsZWN0c1JhbmdlLHN0YXJ0RGF0ZTphLnByb3BzLnN0YXJ0RGF0ZSxlbmREYXRlOmEucHJvcHMuZW5kRGF0ZSxleGNsdWRlRGF0ZXM6YS5wcm9wcy5leGNsdWRlRGF0ZXMsZmlsdGVyRGF0ZTphLnByb3BzLmZpbHRlckRhdGUsb25DbGlja091dHNpZGU6YS5oYW5kbGVDYWxlbmRhckNsaWNrT3V0c2lkZSxmb3JtYXRXZWVrTnVtYmVyOmEucHJvcHMuZm9ybWF0V2Vla051bWJlcixoaWdobGlnaHREYXRlczphLnN0YXRlLmhpZ2hsaWdodERhdGVzLGluY2x1ZGVEYXRlczphLnByb3BzLmluY2x1ZGVEYXRlcyxpbmNsdWRlVGltZXM6YS5wcm9wcy5pbmNsdWRlVGltZXMsaW5qZWN0VGltZXM6YS5wcm9wcy5pbmplY3RUaW1lcyxpbmxpbmU6YS5wcm9wcy5pbmxpbmUsc2hvdWxkRm9jdXNEYXlJbmxpbmU6YS5zdGF0ZS5zaG91bGRGb2N1c0RheUlubGluZSxwZWVrTmV4dE1vbnRoOmEucHJvcHMucGVla05leHRNb250aCxzaG93TW9udGhEcm9wZG93bjphLnByb3BzLnNob3dNb250aERyb3Bkb3duLHNob3dQcmV2aW91c01vbnRoczphLnByb3BzLnNob3dQcmV2aW91c01vbnRocyx1c2VTaG9ydE1vbnRoSW5Ecm9wZG93bjphLnByb3BzLnVzZVNob3J0TW9udGhJbkRyb3Bkb3duLHNob3dNb250aFllYXJEcm9wZG93bjphLnByb3BzLnNob3dNb250aFllYXJEcm9wZG93bixzaG93V2Vla051bWJlcnM6YS5wcm9wcy5zaG93V2Vla051bWJlcnMsc2hvd1llYXJEcm9wZG93bjphLnByb3BzLnNob3dZZWFyRHJvcGRvd24sd2l0aFBvcnRhbDphLnByb3BzLndpdGhQb3J0YWwsZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uOmEucHJvcHMuZm9yY2VTaG93TW9udGhOYXZpZ2F0aW9uLHNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbjphLnByb3BzLnNob3dEaXNhYmxlZE1vbnRoTmF2aWdhdGlvbixzY3JvbGxhYmxlWWVhckRyb3Bkb3duOmEucHJvcHMuc2Nyb2xsYWJsZVllYXJEcm9wZG93bixzY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd246YS5wcm9wcy5zY3JvbGxhYmxlTW9udGhZZWFyRHJvcGRvd24sdG9kYXlCdXR0b246YS5wcm9wcy50b2RheUJ1dHRvbix3ZWVrTGFiZWw6YS5wcm9wcy53ZWVrTGFiZWwsb3V0c2lkZUNsaWNrSWdub3JlQ2xhc3M6VXIsZml4ZWRIZWlnaHQ6YS5wcm9wcy5maXhlZEhlaWdodCxtb250aHNTaG93bjphLnByb3BzLm1vbnRoc1Nob3duLG1vbnRoU2VsZWN0ZWRJbjphLnN0YXRlLm1vbnRoU2VsZWN0ZWRJbixvbkRyb3Bkb3duRm9jdXM6YS5oYW5kbGVEcm9wZG93bkZvY3VzLG9uTW9udGhDaGFuZ2U6YS5wcm9wcy5vbk1vbnRoQ2hhbmdlLG9uWWVhckNoYW5nZTphLnByb3BzLm9uWWVhckNoYW5nZSxkYXlDbGFzc05hbWU6YS5wcm9wcy5kYXlDbGFzc05hbWUsd2Vla0RheUNsYXNzTmFtZTphLnByb3BzLndlZWtEYXlDbGFzc05hbWUsbW9udGhDbGFzc05hbWU6YS5wcm9wcy5tb250aENsYXNzTmFtZSx0aW1lQ2xhc3NOYW1lOmEucHJvcHMudGltZUNsYXNzTmFtZSxzaG93VGltZVNlbGVjdDphLnByb3BzLnNob3dUaW1lU2VsZWN0LHNob3dUaW1lU2VsZWN0T25seTphLnByb3BzLnNob3dUaW1lU2VsZWN0T25seSxvblRpbWVDaGFuZ2U6YS5oYW5kbGVUaW1lQ2hhbmdlLHRpbWVGb3JtYXQ6YS5wcm9wcy50aW1lRm9ybWF0LHRpbWVJbnRlcnZhbHM6YS5wcm9wcy50aW1lSW50ZXJ2YWxzLG1pblRpbWU6YS5wcm9wcy5taW5UaW1lLG1heFRpbWU6YS5wcm9wcy5tYXhUaW1lLGV4Y2x1ZGVUaW1lczphLnByb3BzLmV4Y2x1ZGVUaW1lcyxmaWx0ZXJUaW1lOmEucHJvcHMuZmlsdGVyVGltZSx0aW1lQ2FwdGlvbjphLnByb3BzLnRpbWVDYXB0aW9uLGNsYXNzTmFtZTphLnByb3BzLmNhbGVuZGFyQ2xhc3NOYW1lLGNvbnRhaW5lcjphLnByb3BzLmNhbGVuZGFyQ29udGFpbmVyLHllYXJJdGVtTnVtYmVyOmEucHJvcHMueWVhckl0ZW1OdW1iZXIseWVhckRyb3Bkb3duSXRlbU51bWJlcjphLnByb3BzLnllYXJEcm9wZG93bkl0ZW1OdW1iZXIscHJldmlvdXNNb250aEJ1dHRvbkxhYmVsOmEucHJvcHMucHJldmlvdXNNb250aEJ1dHRvbkxhYmVsLG5leHRNb250aEJ1dHRvbkxhYmVsOmEucHJvcHMubmV4dE1vbnRoQnV0dG9uTGFiZWwscHJldmlvdXNZZWFyQnV0dG9uTGFiZWw6YS5wcm9wcy5wcmV2aW91c1llYXJCdXR0b25MYWJlbCxuZXh0WWVhckJ1dHRvbkxhYmVsOmEucHJvcHMubmV4dFllYXJCdXR0b25MYWJlbCx0aW1lSW5wdXRMYWJlbDphLnByb3BzLnRpbWVJbnB1dExhYmVsLGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOmEucHJvcHMuZGlzYWJsZWRLZXlib2FyZE5hdmlnYXRpb24scmVuZGVyQ3VzdG9tSGVhZGVyOmEucHJvcHMucmVuZGVyQ3VzdG9tSGVhZGVyLHBvcHBlclByb3BzOmEucHJvcHMucG9wcGVyUHJvcHMscmVuZGVyRGF5Q29udGVudHM6YS5wcm9wcy5yZW5kZXJEYXlDb250ZW50cyxvbkRheU1vdXNlRW50ZXI6YS5wcm9wcy5vbkRheU1vdXNlRW50ZXIsb25Nb250aE1vdXNlTGVhdmU6YS5wcm9wcy5vbk1vbnRoTW91c2VMZWF2ZSxzaG93VGltZUlucHV0OmEucHJvcHMuc2hvd1RpbWVJbnB1dCxzaG93TW9udGhZZWFyUGlja2VyOmEucHJvcHMuc2hvd01vbnRoWWVhclBpY2tlcixzaG93RnVsbE1vbnRoWWVhclBpY2tlcjphLnByb3BzLnNob3dGdWxsTW9udGhZZWFyUGlja2VyLHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXI6YS5wcm9wcy5zaG93VHdvQ29sdW1uTW9udGhZZWFyUGlja2VyLHNob3dGb3VyQ29sdW1uTW9udGhZZWFyUGlja2VyOmEucHJvcHMuc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXIsc2hvd1llYXJQaWNrZXI6YS5wcm9wcy5zaG93WWVhclBpY2tlcixzaG93UXVhcnRlclllYXJQaWNrZXI6YS5wcm9wcy5zaG93UXVhcnRlclllYXJQaWNrZXIsc2hvd1BvcHBlckFycm93OmEucHJvcHMuc2hvd1BvcHBlckFycm93LGV4Y2x1ZGVTY3JvbGxiYXI6YS5wcm9wcy5leGNsdWRlU2Nyb2xsYmFyLGhhbmRsZU9uS2V5RG93bjphLm9uRGF5S2V5RG93bixpc0lucHV0Rm9jdXNlZDphLnN0YXRlLmZvY3VzZWQsY3VzdG9tVGltZUlucHV0OmEucHJvcHMuY3VzdG9tVGltZUlucHV0LHNldFByZVNlbGVjdGlvbjphLnNldFByZVNlbGVjdGlvbn0sYS5wcm9wcy5jaGlsZHJlbik6bnVsbH0pKSxtdChidChhKSxcInJlbmRlckRhdGVJbnB1dFwiLChmdW5jdGlvbigpe3ZhciBlLHQscixuLG8scz1jZS5kZWZhdWx0KGEucHJvcHMuY2xhc3NOYW1lLG10KHt9LFVyLGEuc3RhdGUub3BlbikpLGk9YS5wcm9wcy5jdXN0b21JbnB1dHx8ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIix7dHlwZTpcInRleHRcIn0pLHA9YS5wcm9wcy5jdXN0b21JbnB1dFJlZnx8XCJyZWZcIixsPVwic3RyaW5nXCI9PXR5cGVvZiBhLnByb3BzLnZhbHVlP2EucHJvcHMudmFsdWU6XCJzdHJpbmdcIj09dHlwZW9mIGEuc3RhdGUuaW5wdXRWYWx1ZT9hLnN0YXRlLmlucHV0VmFsdWU6KHQ9YS5wcm9wcy5zZWxlY3RlZCxyPWEucHJvcHMsbj1yLmRhdGVGb3JtYXQsbz1yLmxvY2FsZSx0JiZMdCh0LEFycmF5LmlzQXJyYXkobik/blswXTpuLG8pfHxcIlwiKTtyZXR1cm4gZGUuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaSwobXQoZT17fSxwLChmdW5jdGlvbihlKXthLmlucHV0PWV9KSksbXQoZSxcInZhbHVlXCIsbCksbXQoZSxcIm9uQmx1clwiLGEuaGFuZGxlQmx1ciksbXQoZSxcIm9uQ2hhbmdlXCIsYS5oYW5kbGVDaGFuZ2UpLG10KGUsXCJvbkNsaWNrXCIsYS5vbklucHV0Q2xpY2spLG10KGUsXCJvbkZvY3VzXCIsYS5oYW5kbGVGb2N1cyksbXQoZSxcIm9uS2V5RG93blwiLGEub25JbnB1dEtleURvd24pLG10KGUsXCJpZFwiLGEucHJvcHMuaWQpLG10KGUsXCJuYW1lXCIsYS5wcm9wcy5uYW1lKSxtdChlLFwiYXV0b0ZvY3VzXCIsYS5wcm9wcy5hdXRvRm9jdXMpLG10KGUsXCJwbGFjZWhvbGRlclwiLGEucHJvcHMucGxhY2Vob2xkZXJUZXh0KSxtdChlLFwiZGlzYWJsZWRcIixhLnByb3BzLmRpc2FibGVkKSxtdChlLFwiYXV0b0NvbXBsZXRlXCIsYS5wcm9wcy5hdXRvQ29tcGxldGUpLG10KGUsXCJjbGFzc05hbWVcIixjZS5kZWZhdWx0KGkucHJvcHMuY2xhc3NOYW1lLHMpKSxtdChlLFwidGl0bGVcIixhLnByb3BzLnRpdGxlKSxtdChlLFwicmVhZE9ubHlcIixhLnByb3BzLnJlYWRPbmx5KSxtdChlLFwicmVxdWlyZWRcIixhLnByb3BzLnJlcXVpcmVkKSxtdChlLFwidGFiSW5kZXhcIixhLnByb3BzLnRhYkluZGV4KSxtdChlLFwiYXJpYS1kZXNjcmliZWRieVwiLGEucHJvcHMuYXJpYURlc2NyaWJlZEJ5KSxtdChlLFwiYXJpYS1pbnZhbGlkXCIsYS5wcm9wcy5hcmlhSW52YWxpZCksbXQoZSxcImFyaWEtbGFiZWxsZWRieVwiLGEucHJvcHMuYXJpYUxhYmVsbGVkQnkpLG10KGUsXCJhcmlhLXJlcXVpcmVkXCIsYS5wcm9wcy5hcmlhUmVxdWlyZWQpLGUpKX0pKSxtdChidChhKSxcInJlbmRlckNsZWFyQnV0dG9uXCIsKGZ1bmN0aW9uKCl7dmFyIGU9YS5wcm9wcyx0PWUuaXNDbGVhcmFibGUscj1lLnNlbGVjdGVkLG49ZS5jbGVhckJ1dHRvblRpdGxlLG89ZS5hcmlhTGFiZWxDbG9zZSxzPXZvaWQgMD09PW8/XCJDbG9zZVwiOm87cmV0dXJuIHQmJm51bGwhPXI/ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19jbG9zZS1pY29uXCIsXCJhcmlhLWxhYmVsXCI6cyxvbkNsaWNrOmEub25DbGVhckNsaWNrLHRpdGxlOm4sdGFiSW5kZXg6LTF9KTpudWxsfSkpLGEuc3RhdGU9YS5jYWxjSW5pdGlhbFN0YXRlKCksYX1yZXR1cm4gaHQocixbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMub25TY3JvbGwsITApfX0se2tleTpcImNvbXBvbmVudERpZFVwZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHIsYTtlLmlubGluZSYmKHI9ZS5zZWxlY3RlZCxhPXRoaXMucHJvcHMuc2VsZWN0ZWQsciYmYT9ZZS5kZWZhdWx0KHIpIT09WWUuZGVmYXVsdChhKXx8VGUuZGVmYXVsdChyKSE9PVRlLmRlZmF1bHQoYSk6ciE9PWEpJiZ0aGlzLnNldFByZVNlbGVjdGlvbih0aGlzLnByb3BzLnNlbGVjdGVkKSx2b2lkIDAhPT10aGlzLnN0YXRlLm1vbnRoU2VsZWN0ZWRJbiYmZS5tb250aHNTaG93biE9PXRoaXMucHJvcHMubW9udGhzU2hvd24mJnRoaXMuc2V0U3RhdGUoe21vbnRoU2VsZWN0ZWRJbjowfSksZS5oaWdobGlnaHREYXRlcyE9PXRoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMmJnRoaXMuc2V0U3RhdGUoe2hpZ2hsaWdodERhdGVzOkRyKHRoaXMucHJvcHMuaGlnaGxpZ2h0RGF0ZXMpfSksdC5mb2N1c2VkfHwkdChlLnNlbGVjdGVkLHRoaXMucHJvcHMuc2VsZWN0ZWQpfHx0aGlzLnNldFN0YXRlKHtpbnB1dFZhbHVlOm51bGx9KSx0Lm9wZW4hPT10aGlzLnN0YXRlLm9wZW4mJighMT09PXQub3BlbiYmITA9PT10aGlzLnN0YXRlLm9wZW4mJnRoaXMucHJvcHMub25DYWxlbmRhck9wZW4oKSwhMD09PXQub3BlbiYmITE9PT10aGlzLnN0YXRlLm9wZW4mJnRoaXMucHJvcHMub25DYWxlbmRhckNsb3NlKCkpfX0se2tleTpcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNsZWFyUHJldmVudEZvY3VzVGltZW91dCgpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcy5vblNjcm9sbCwhMCl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlbmRlckNhbGVuZGFyKCk7cmV0dXJuIHRoaXMucHJvcHMuaW5saW5lJiYhdGhpcy5wcm9wcy53aXRoUG9ydGFsP2U6dGhpcy5wcm9wcy53aXRoUG9ydGFsP2RlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLG51bGwsdGhpcy5wcm9wcy5pbmxpbmU/bnVsbDpkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtY29udGFpbmVyXCJ9LHRoaXMucmVuZGVyRGF0ZUlucHV0KCksdGhpcy5yZW5kZXJDbGVhckJ1dHRvbigpKSx0aGlzLnN0YXRlLm9wZW58fHRoaXMucHJvcHMuaW5saW5lP2RlLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLHtjbGFzc05hbWU6XCJyZWFjdC1kYXRlcGlja2VyX19wb3J0YWxcIn0sZSk6bnVsbCk6ZGUuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFZyLHtjbGFzc05hbWU6dGhpcy5wcm9wcy5wb3BwZXJDbGFzc05hbWUsd3JhcHBlckNsYXNzTmFtZTp0aGlzLnByb3BzLndyYXBwZXJDbGFzc05hbWUsaGlkZVBvcHBlcjohdGhpcy5pc0NhbGVuZGFyT3BlbigpLHBvcnRhbElkOnRoaXMucHJvcHMucG9ydGFsSWQscG9wcGVyTW9kaWZpZXJzOnRoaXMucHJvcHMucG9wcGVyTW9kaWZpZXJzLHRhcmdldENvbXBvbmVudDpkZS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwicmVhY3QtZGF0ZXBpY2tlcl9faW5wdXQtY29udGFpbmVyXCJ9LHRoaXMucmVuZGVyRGF0ZUlucHV0KCksdGhpcy5yZW5kZXJDbGVhckJ1dHRvbigpKSxwb3BwZXJDb250YWluZXI6dGhpcy5wcm9wcy5wb3BwZXJDb250YWluZXIscG9wcGVyQ29tcG9uZW50OmUscG9wcGVyUGxhY2VtZW50OnRoaXMucHJvcHMucG9wcGVyUGxhY2VtZW50LHBvcHBlclByb3BzOnRoaXMucHJvcHMucG9wcGVyUHJvcHMscG9wcGVyT25LZXlEb3duOnRoaXMub25Qb3BwZXJLZXlEb3duLGVuYWJsZVRhYkxvb3A6dGhpcy5wcm9wcy5lbmFibGVUYWJMb29wfSl9fV0sW3trZXk6XCJkZWZhdWx0UHJvcHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57YWxsb3dTYW1lRGF5OiExLGRhdGVGb3JtYXQ6XCJNTS9kZC95eXl5XCIsZGF0ZUZvcm1hdENhbGVuZGFyOlwiTExMTCB5eXl5XCIsb25DaGFuZ2U6ZnVuY3Rpb24oKXt9LGRpc2FibGVkOiExLGRpc2FibGVkS2V5Ym9hcmROYXZpZ2F0aW9uOiExLGRyb3Bkb3duTW9kZTpcInNjcm9sbFwiLG9uRm9jdXM6ZnVuY3Rpb24oKXt9LG9uQmx1cjpmdW5jdGlvbigpe30sb25LZXlEb3duOmZ1bmN0aW9uKCl7fSxvbklucHV0Q2xpY2s6ZnVuY3Rpb24oKXt9LG9uU2VsZWN0OmZ1bmN0aW9uKCl7fSxvbkNsaWNrT3V0c2lkZTpmdW5jdGlvbigpe30sb25Nb250aENoYW5nZTpmdW5jdGlvbigpe30sb25DYWxlbmRhck9wZW46ZnVuY3Rpb24oKXt9LG9uQ2FsZW5kYXJDbG9zZTpmdW5jdGlvbigpe30scHJldmVudE9wZW5PbkZvY3VzOiExLG9uWWVhckNoYW5nZTpmdW5jdGlvbigpe30sb25JbnB1dEVycm9yOmZ1bmN0aW9uKCl7fSxtb250aHNTaG93bjoxLHJlYWRPbmx5OiExLHdpdGhQb3J0YWw6ITEsc2hvdWxkQ2xvc2VPblNlbGVjdDohMCxzaG93VGltZVNlbGVjdDohMSxzaG93VGltZUlucHV0OiExLHNob3dQcmV2aW91c01vbnRoczohMSxzaG93TW9udGhZZWFyUGlja2VyOiExLHNob3dGdWxsTW9udGhZZWFyUGlja2VyOiExLHNob3dUd29Db2x1bW5Nb250aFllYXJQaWNrZXI6ITEsc2hvd0ZvdXJDb2x1bW5Nb250aFllYXJQaWNrZXI6ITEsc2hvd1llYXJQaWNrZXI6ITEsc2hvd1F1YXJ0ZXJZZWFyUGlja2VyOiExLHN0cmljdFBhcnNpbmc6ITEsdGltZUludGVydmFsczozMCx0aW1lQ2FwdGlvbjpcIlRpbWVcIixwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw6XCJQcmV2aW91cyBNb250aFwiLG5leHRNb250aEJ1dHRvbkxhYmVsOlwiTmV4dCBNb250aFwiLHByZXZpb3VzWWVhckJ1dHRvbkxhYmVsOlwiUHJldmlvdXMgWWVhclwiLG5leHRZZWFyQnV0dG9uTGFiZWw6XCJOZXh0IFllYXJcIix0aW1lSW5wdXRMYWJlbDpcIlRpbWVcIixlbmFibGVUYWJMb29wOiEwLHllYXJJdGVtTnVtYmVyOk90LHJlbmRlckRheUNvbnRlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxmb2N1c1NlbGVjdGVkTW9udGg6ITEsc2hvd1BvcHBlckFycm93OiEwLGV4Y2x1ZGVTY3JvbGxiYXI6ITAsY3VzdG9tVGltZUlucHV0Om51bGx9fX1dKSxyfShkZS5kZWZhdWx0LkNvbXBvbmVudCksSnI9XCJpbnB1dFwiLFhyPVwibmF2aWdhdGVcIjtlLkNhbGVuZGFyQ29udGFpbmVyPVdyLGUuZGVmYXVsdD1HcixlLmdldERlZmF1bHRMb2NhbGU9R3QsZS5yZWdpc3RlckxvY2FsZT1mdW5jdGlvbihlLHQpe3ZhciByPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Omdsb2JhbDtyLl9fbG9jYWxlRGF0YV9ffHwoci5fX2xvY2FsZURhdGFfXz17fSksci5fX2xvY2FsZURhdGFfX1tlXT10fSxlLnNldERlZmF1bHRMb2NhbGU9ZnVuY3Rpb24oZSl7KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Omdsb2JhbCkuX19sb2NhbGVJZF9fPWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSkpO1xuIiwgIlxuaW1wb3J0IFwicmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPEFwcCAvPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbik7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgQnJvd3NlclJvdXRlcixcbiAgU3dpdGNoLFxuICBSb3V0ZSxcbiAgTGluayxcbiAgdXNlUm91dGVNYXRjaCxcbiAgdXNlUGFyYW1zLFxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgUmVhY3RRdWVyeURldnRvb2xzIH0gZnJvbSBcInJlYWN0LXF1ZXJ5L2RldnRvb2xzXCI7XG5pbXBvcnQgeyBRdWVyeUNsaWVudFByb3ZpZGVyLCBRdWVyeUNsaWVudCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgQXBwSGVhZGVyLCBOb3RGb3VuZFBhZ2UgfSBmcm9tIFwiQHNoYWNhbC91aS9jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBDYWxlbmRhcnNMaXN0UGFnZSB9IGZyb20gXCIuL3BhZ2VzL2NhbGVuZGFycy9jYWxlbmRhcnMtbGlzdC1wYWdlXCI7XG5pbXBvcnQgeyBDYWxlbmRhclBhZ2UgfSBmcm9tIFwicGFnZXMvY2FsZW5kYXJzL2NhbGVuZGFyLXBhZ2VcIjtcbmltcG9ydCB7IE5ld0V2ZW50UGFnZSB9IGZyb20gXCJwYWdlcy9ldmVudHMvbmV3LWV2ZW50LXBhZ2VcIjtcbmltcG9ydCB7IEV2ZW50UGFnZSB9IGZyb20gXCJwYWdlcy9ldmVudHMvZXZlbnQtcGFnZVwiO1xuXG5mdW5jdGlvbiBGYWtlKHsgdGl0bGUgfTogeyB0aXRsZTogc3RyaW5nIH0pIHtcbiAgY29uc3QgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoKCk7XG4gIGNvbnN0IHBhcmFtcyA9IHVzZVBhcmFtcygpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICA8cHJlPntKU09OLnN0cmluZ2lmeSh7IHBhcmFtcyB9KX08L3ByZT5cbiAgICAgIDxwcmU+e0pTT04uc3RyaW5naWZ5KHsgbWF0Y2ggfSl9PC9wcmU+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgcmV0dXJuIChcbiAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgIDxMaW5rIHRvPVwiL1wiPkhvbWU8L0xpbms+XG4gICAgICA8TGluayB0bz1cIi9jYWxlbmRhci9xcXFxcXFxcXFcIj5DYWxlbmRhcjwvTGluaz5cbiAgICAgIDxMaW5rIHRvPVwiL2V2ZW50L2VlZWVlZWVlZWVcIj5FdmVudDwvTGluaz5cblxuICAgICAgPFN3aXRjaD5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XG4gICAgICAgICAgPENhbGVuZGFyc0xpc3RQYWdlIC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2NhbGVuZGFyLzpwdWJsaWNJZFwiPlxuICAgICAgICAgIDxDYWxlbmRhclBhZ2UgLz5cbiAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY2FsZW5kYXIvOnB1YmxpY0lkL25ldy1ldmVudFwiPlxuICAgICAgICAgIDxOZXdFdmVudFBhZ2UgLz5cbiAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvZXZlbnQvOnB1YmxpY0lkXCI+XG4gICAgICAgICAgPEV2ZW50UGFnZSAvPlxuICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8Um91dGUgcGF0aD1cIipcIj5cbiAgICAgICAgICA8Tm90Rm91bmRQYWdlIC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICA8L1N3aXRjaD5cbiAgICA8L0Jyb3dzZXJSb3V0ZXI+XG4gICk7XG59XG5cbmNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KCk7XG5leHBvcnQgZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgPFJlYWN0UXVlcnlEZXZ0b29scyBpbml0aWFsSXNPcGVuPXtmYWxzZX0gLz5cbiAgICAgIDxBcHBIZWFkZXIgLz5cbiAgICAgIDxSb3V0ZXIgLz5cbiAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICk7XG59XG4iLCAiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCAiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bywgZnJvbSkge1xuICBpZiAoZnJvbSA9PT0gdW5kZWZpbmVkKSBmcm9tID0gJyc7XG5cbiAgdmFyIHRvUGFydHMgPSAodG8gJiYgdG8uc3BsaXQoJy8nKSkgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSAoZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2g7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG5cbiAgaWYgKFxuICAgIG11c3RFbmRBYnMgJiZcbiAgICBmcm9tUGFydHNbMF0gIT09ICcnICYmXG4gICAgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSlcbiAgKVxuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcbiIsICJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsICJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCAiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCAiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwgIi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gXCJtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0XCI7XG5cbmNvbnN0IGNyZWF0ZU5hbWVkQ29udGV4dCA9IG5hbWUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5hbWVkQ29udGV4dDtcbiIsICJpbXBvcnQgY3JlYXRlTmFtZWRDb250ZXh0IGZyb20gXCIuL2NyZWF0ZU5hbWVDb250ZXh0XCI7XG5cbmNvbnN0IGhpc3RvcnlDb250ZXh0ID0gLyojX19QVVJFX18qLyBjcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcbmV4cG9ydCBkZWZhdWx0IGhpc3RvcnlDb250ZXh0O1xuIiwgIi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gXCJtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0XCI7XG5cbmNvbnN0IGNyZWF0ZU5hbWVkQ29udGV4dCA9IG5hbWUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmNvbnN0IGNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcbmV4cG9ydCBkZWZhdWx0IGNvbnRleHQ7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgSGlzdG9yeUNvbnRleHQgZnJvbSBcIi4vSGlzdG9yeUNvbnRleHQuanNcIjtcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHsgcGF0aDogXCIvXCIsIHVybDogXCIvXCIsIHBhcmFtczoge30sIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIiB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICB0aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4obG9jYXRpb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb24gfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8SGlzdG9yeUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmhpc3Rvcnl9XG4gICAgICAgIC8+XG4gICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlci5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuY2xhc3MgTWVtb3J5Um91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkodGhpcy5wcm9wcyk7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8Um91dGVyIGhpc3Rvcnk9e3RoaXMuaGlzdG9yeX0gY2hpbGRyZW49e3RoaXMucHJvcHMuY2hpbGRyZW59IC8+O1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIXRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCJcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jbGFzcyBMaWZlY3ljbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlmZWN5Y2xlO1xuIiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlLmpzXCI7XG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cbmZ1bmN0aW9uIFByb21wdCh7IG1lc3NhZ2UsIHdoZW4gPSB0cnVlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlmZWN5Y2xlXG4gICAgICAgICAgICBvbk1vdW50PXtzZWxmID0+IHtcbiAgICAgICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uVXBkYXRlPXsoc2VsZiwgcHJldlByb3BzKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uVW5tb3VudD17c2VsZiA9PiB7XG4gICAgICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBjb25zdCBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG5cbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDtcbiIsICJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuY29uc3QgY2FjaGVMaW1pdCA9IDEwMDAwO1xubGV0IGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuXG4gIGNvbnN0IGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGggPSBcIi9cIiwgcGFyYW1zID0ge30pIHtcbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcblxuaW1wb3J0IExpZmVjeWNsZSBmcm9tIFwiLi9MaWZlY3ljbGUuanNcIjtcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBSZWRpcmVjdCh7IGNvbXB1dGVkTWF0Y2gsIHRvLCBwdXNoID0gZmFsc2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAge2NvbnRleHQgPT4ge1xuICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgY29uc3QgeyBoaXN0b3J5LCBzdGF0aWNDb250ZXh0IH0gPSBjb250ZXh0O1xuXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXG4gICAgICAgICAgY29tcHV0ZWRNYXRjaFxuICAgICAgICAgICAgPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgIC4uLnRvLFxuICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB0b1xuICAgICAgICApO1xuXG4gICAgICAgIC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuICAgICAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxMaWZlY3ljbGVcbiAgICAgICAgICAgIG9uTW91bnQ9eygpID0+IHtcbiAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblVwZGF0ZT17KHNlbGYsIHByZXZQcm9wcykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwge1xuICAgICAgICAgICAgICAgICAgLi4ubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdG89e3RvfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9fVxuICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgKTtcbn1cblxuaWYgKF9fREVWX18pIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0O1xuIiwgImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtvcHRpb25zLmVuZH0ke29wdGlvbnMuc3RyaWN0fSR7b3B0aW9ucy5zZW5zaXRpdmV9YDtcbiAgY29uc3QgcGF0aENhY2hlID0gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcblxuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVzdWx0ID0geyByZWdleHAsIGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuICB9XG5cbiAgY29uc3QgeyBwYXRoLCBleGFjdCA9IGZhbHNlLCBzdHJpY3QgPSBmYWxzZSwgc2Vuc2l0aXZlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhzLnJlZHVjZSgobWF0Y2hlZCwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZVxuICAgIH0pO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBbdXJsLCAuLi52YWx1ZXNdID0gbWF0Y2g7XG4gICAgY29uc3QgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gXCJyZWFjdC1pc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgY29uc3QgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG5cbiAgd2FybmluZyhcbiAgICB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgK1xuICAgICAgYDxSb3V0ZSR7cGF0aCA/IGAgcGF0aD1cIiR7cGF0aH1cImAgOiBcIlwifT4sIGJ1dCB5b3UgYCArXG4gICAgICBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIlxuICApO1xuXG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cbmNsYXNzIFJvdXRlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge2NvbnRleHQgPT4ge1xuICAgICAgICAgIGludmFyaWFudChjb250ZXh0LCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoXG4gICAgICAgICAgICA/IHRoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5wYXRoXG4gICAgICAgICAgICA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgdGhpcy5wcm9wcylcbiAgICAgICAgICAgIDogY29udGV4dC5tYXRjaDtcblxuICAgICAgICAgIGNvbnN0IHByb3BzID0geyAuLi5jb250ZXh0LCBsb2NhdGlvbiwgbWF0Y2ggfTtcblxuICAgICAgICAgIGxldCB7IGNoaWxkcmVuLCBjb21wb25lbnQsIHJlbmRlciB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICAgIC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3BzfT5cbiAgICAgICAgICAgICAge3Byb3BzLm1hdGNoXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICA/IF9fREVWX19cbiAgICAgICAgICAgICAgICAgICAgICA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHRoaXMucHJvcHMucGF0aClcbiAgICAgICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuKHByb3BzKVxuICAgICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICA6IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpXG4gICAgICAgICAgICAgICAgICA6IHJlbmRlclxuICAgICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgPyBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHRoaXMucHJvcHMucGF0aClcbiAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgPC9Sb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogKHByb3BzLCBwcm9wTmFtZSkgPT4ge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICBgSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxuICAgIF0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEoXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4gJiZcbiAgICAgICAgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJlxuICAgICAgICB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgKSxcbiAgICAgIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJlxuICAgICAgICAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmXG4gICAgICAgIHRoaXMucHJvcHMucmVuZGVyXG4gICAgICApLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSxcbiAgICAgIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbihwcmV2UHJvcHMpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLFxuICAgICAgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlO1xuIiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgLi4ubG9jYXRpb24sXG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgY29uc3QgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIC4uLmxvY2F0aW9uLFxuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuY2xhc3MgU3RhdGljUm91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgY29uc3QgeyBiYXNlbmFtZSA9IFwiXCIsIGNvbnRleHQgPSB7fSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH1cblxuICBoYW5kbGVQdXNoID0gbG9jYXRpb24gPT4gdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gIGhhbmRsZVJlcGxhY2UgPSBsb2NhdGlvbiA9PiB0aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgaGFuZGxlTGlzdGVuID0gKCkgPT4gbm9vcDtcbiAgaGFuZGxlQmxvY2sgPSAoKSA9PiBub29wO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGJhc2VuYW1lID0gXCJcIiwgY29udGV4dCA9IHt9LCBsb2NhdGlvbiA9IFwiL1wiLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHBhdGggPT4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gPFJvdXRlciB7Li4ucmVzdH0gaGlzdG9yeT17aGlzdG9yeX0gc3RhdGljQ29udGV4dD17Y29udGV4dH0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgd2FybmluZyhcbiAgICAgICF0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyO1xuIiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cbmNsYXNzIFN3aXRjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG5cbiAgICAgICAgICBsZXQgZWxlbWVudCwgbWF0Y2g7XG5cbiAgICAgICAgICAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG4gICAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG5cbiAgICAgICAgICAgICAgbWF0Y2ggPSBwYXRoXG4gICAgICAgICAgICAgICAgPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGggfSlcbiAgICAgICAgICAgICAgICA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHsgbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcblxuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dC5qc1wiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICBjb25zdCBkaXNwbGF5TmFtZSA9IGB3aXRoUm91dGVyKCR7Q29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lfSlgO1xuICBjb25zdCBDID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgd3JhcHBlZENvbXBvbmVudFJlZiwgLi4ucmVtYWluaW5nUHJvcHMgfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGBZb3Ugc2hvdWxkIG5vdCB1c2UgPCR7ZGlzcGxheU5hbWV9IC8+IG91dHNpZGUgYSA8Um91dGVyPmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q29tcG9uZW50XG4gICAgICAgICAgICAgIHsuLi5yZW1haW5pbmdQcm9wc31cbiAgICAgICAgICAgICAgey4uLmNvbnRleHR9XG4gICAgICAgICAgICAgIHJlZj17d3JhcHBlZENvbXBvbmVudFJlZn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIFByb3BUeXBlcy5vYmplY3RcbiAgICAgIF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuXG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgSGlzdG9yeUNvbnRleHQgZnJvbSBcIi4vSGlzdG9yeUNvbnRleHQuanNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoLmpzXCI7XG5cbmNvbnN0IHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCJcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoSGlzdG9yeUNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIixcbiAgICAgIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChDb250ZXh0KS5sb2NhdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIlxuICAgICk7XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIixcbiAgICAgIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgY29uc3QgbWF0Y2ggPSB1c2VDb250ZXh0KENvbnRleHQpLm1hdGNoO1xuXG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuIiwgImlmIChfX0RFVl9fKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY29uc3QgZ2xvYmFsID0gd2luZG93O1xuICAgIGNvbnN0IGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIGNvbnN0IGJ1aWxkTmFtZXMgPSB7IGNqczogXCJDb21tb25KU1wiLCBlc206IFwiRVMgbW9kdWxlc1wiLCB1bWQ6IFwiVU1EXCIgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gcHJvY2Vzcy5lbnYuQlVJTERfRk9STUFUKSB7XG4gICAgICBjb25zdCBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICBjb25zdCBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW3Byb2Nlc3MuZW52LkJVSUxEX0ZPUk1BVF07XG5cbiAgICAgIC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFlvdSBhcmUgbG9hZGluZyB0aGUgJHtzZWNvbmRhcnlCdWlsZE5hbWV9IGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBgICtcbiAgICAgICAgICBgb24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSAke2luaXRpYWxCdWlsZE5hbWV9IGAgK1xuICAgICAgICAgIGBidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IHByb2Nlc3MuZW52LkJVSUxEX0ZPUk1BVDtcbiAgfVxufVxuXG5leHBvcnQgeyBkZWZhdWx0IGFzIE1lbW9yeVJvdXRlciB9IGZyb20gXCIuL01lbW9yeVJvdXRlci5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQcm9tcHQgfSBmcm9tIFwiLi9Qcm9tcHQuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUmVkaXJlY3QgfSBmcm9tIFwiLi9SZWRpcmVjdC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSb3V0ZSB9IGZyb20gXCIuL1JvdXRlLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJvdXRlciB9IGZyb20gXCIuL1JvdXRlci5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdGF0aWNSb3V0ZXIgfSBmcm9tIFwiLi9TdGF0aWNSb3V0ZXIuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3dpdGNoIH0gZnJvbSBcIi4vU3dpdGNoLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdlbmVyYXRlUGF0aCB9IGZyb20gXCIuL2dlbmVyYXRlUGF0aC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXRjaFBhdGggfSBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aFJvdXRlciB9IGZyb20gXCIuL3dpdGhSb3V0ZXIuanNcIjtcblxuaW1wb3J0IHsgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCB9IGZyb20gXCIuL2hvb2tzLmpzXCI7XG5leHBvcnQgeyB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoIH07XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgX19IaXN0b3J5Q29udGV4dCB9IGZyb20gXCIuL0hpc3RvcnlDb250ZXh0LmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIF9fUm91dGVyQ29udGV4dCB9IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuY2xhc3MgQnJvd3NlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoSGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cbmNsYXNzIEhhc2hSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIXRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7XG4iLCAiaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZVRvTG9jYXRpb24gPSAodG8sIGN1cnJlbnRMb2NhdGlvbikgPT5cbiAgdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIlxuICAgID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbilcbiAgICA6IHRvO1xufTtcbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQge1xuICByZXNvbHZlVG9Mb2NhdGlvbixcbiAgbm9ybWFsaXplVG9Mb2NhdGlvblxufSBmcm9tIFwiLi91dGlscy9sb2NhdGlvblV0aWxzLmpzXCI7XG5cbi8vIFJlYWN0IDE1IGNvbXBhdFxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSBDID0+IEM7XG5sZXQgeyBmb3J3YXJkUmVmIH0gPSBSZWFjdDtcbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmNvbnN0IExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgbmF2aWdhdGUsXG4gICAgICBvbkNsaWNrLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSByZXN0O1xuXG4gICAgbGV0IHByb3BzID0ge1xuICAgICAgLi4ucmVzdCxcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgICAgICghdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuICAgIHJldHVybiA8YSB7Li4ucHJvcHN9IC8+O1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGNvbXBvbmVudCA9IExpbmtBbmNob3IsXG4gICAgICByZXBsYWNlLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IGNvbnRleHQ7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24oXG4gICAgICAgICAgICByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksXG4gICAgICAgICAgICBjb250ZXh0LmxvY2F0aW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG5cbiAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgICAgICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIFByb3BUeXBlcy5mdW5jXG4gIF0pO1xuICBjb25zdCByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMuYW55IH0pXG4gIF0pO1xuXG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcblxuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbms7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgX19Sb3V0ZXJDb250ZXh0IGFzIFJvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rLmpzXCI7XG5pbXBvcnQge1xuICByZXNvbHZlVG9Mb2NhdGlvbixcbiAgbm9ybWFsaXplVG9Mb2NhdGlvblxufSBmcm9tIFwiLi91dGlscy9sb2NhdGlvblV0aWxzLmpzXCI7XG5cbi8vIFJlYWN0IDE1IGNvbXBhdFxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSBDID0+IEM7XG5sZXQgeyBmb3J3YXJkUmVmIH0gPSBSZWFjdDtcbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKC4uLmNsYXNzbmFtZXMpIHtcbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGkgPT4gaSkuam9pbihcIiBcIik7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQgPSBcInBhZ2VcIixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IFwiYWN0aXZlXCIsXG4gICAgICBhY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCxcbiAgICAgIGV4YWN0LFxuICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlUHJvcCxcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgICBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3QsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihcbiAgICAgICAgICAgIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLFxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB7IHBhdGhuYW1lOiBwYXRoIH0gPSB0b0xvY2F0aW9uO1xuICAgICAgICAgIC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG4gICAgICAgICAgY29uc3QgZXNjYXBlZFBhdGggPVxuICAgICAgICAgICAgcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICAgICAgICAgIGNvbnN0IG1hdGNoID0gZXNjYXBlZFBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgICAgICAgICAgIGV4YWN0LFxuICAgICAgICAgICAgICAgIHNlbnNpdGl2ZSxcbiAgICAgICAgICAgICAgICBzdHJpY3RcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcFxuICAgICAgICAgICAgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbilcbiAgICAgICAgICAgIDogbWF0Y2gpO1xuXG4gICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gaXNBY3RpdmVcbiAgICAgICAgICAgID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKVxuICAgICAgICAgICAgOiBjbGFzc05hbWVQcm9wO1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gaXNBY3RpdmUgPyB7IC4uLnN0eWxlUHJvcCwgLi4uYWN0aXZlU3R5bGUgfSA6IHN0eWxlUHJvcDtcblxuICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogKGlzQWN0aXZlICYmIGFyaWFDdXJyZW50KSB8fCBudWxsLFxuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICB0bzogdG9Mb2NhdGlvbixcbiAgICAgICAgICAgIC4uLnJlc3RcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgICAgICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuXG4gIGNvbnN0IGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXG4gICAgXCJwYWdlXCIsXG4gICAgXCJzdGVwXCIsXG4gICAgXCJsb2NhdGlvblwiLFxuICAgIFwiZGF0ZVwiLFxuICAgIFwidGltZVwiLFxuICAgIFwidHJ1ZVwiXG4gIF0pO1xuXG4gIE5hdkxpbmsucHJvcFR5cGVzID0ge1xuICAgIC4uLkxpbmsucHJvcFR5cGVzLFxuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7XG4iLCAiZXhwb3J0IHZhciBTdWJzY3JpYmFibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpYmFibGUoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpYmFibGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxiYWNrID0gbGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5vblN1YnNjcmliZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMgPSBfdGhpcy5saXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSBjYWxsYmFjaztcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gaGFzTGlzdGVuZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5sZW5ndGggPiAwO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uU3Vic2NyaWJlKCkgey8vIERvIG5vdGhpbmdcbiAgfTtcblxuICBfcHJvdG8ub25VbnN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7Ly8gRG8gbm90aGluZ1xuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpYmFibGU7XG59KCk7IiwgImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gVFlQRVNcbi8vIFVUSUxTXG5leHBvcnQgdmFyIGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmdW5jdGlvbmFsVXBkYXRlKHVwZGF0ZXIsIGlucHV0KSB7XG4gIHJldHVybiB0eXBlb2YgdXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IHVwZGF0ZXIoaW5wdXQpIDogdXBkYXRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVGltZW91dCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA+PSAwICYmIHZhbHVlICE9PSBJbmZpbml0eTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZShhcnJheTEsIGFycmF5Mikge1xuICByZXR1cm4gYXJyYXkxLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBhcnJheTIuaW5kZXhPZih4KSA9PT0gLTE7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VBdChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBjb3B5ID0gYXJyYXkuc2xpY2UoMCk7XG4gIGNvcHlbaW5kZXhdID0gdmFsdWU7XG4gIHJldHVybiBjb3B5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVVbnRpbFN0YWxlKHVwZGF0ZWRBdCwgc3RhbGVUaW1lKSB7XG4gIHJldHVybiBNYXRoLm1heCh1cGRhdGVkQXQgKyAoc3RhbGVUaW1lIHx8IDApIC0gRGF0ZS5ub3coKSwgMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAoIWlzUXVlcnlLZXkoYXJnMSkpIHtcbiAgICByZXR1cm4gYXJnMTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnMiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMywge1xuICAgICAgcXVlcnlLZXk6IGFyZzEsXG4gICAgICBxdWVyeUZuOiBhcmcyXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICBxdWVyeUtleTogYXJnMVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU11dGF0aW9uQXJncyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc1F1ZXJ5S2V5KGFyZzEpKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzMsIHtcbiAgICAgICAgbXV0YXRpb25LZXk6IGFyZzEsXG4gICAgICAgIG11dGF0aW9uRm46IGFyZzJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgICAgbXV0YXRpb25LZXk6IGFyZzFcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgICAgbXV0YXRpb25GbjogYXJnMVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmcxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMykge1xuICByZXR1cm4gaXNRdWVyeUtleShhcmcxKSA/IFtfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgIHF1ZXJ5S2V5OiBhcmcxXG4gIH0pLCBhcmczXSA6IFthcmcxIHx8IHt9LCBhcmcyXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSB7XG4gIHZhciBhY3RpdmUgPSBmaWx0ZXJzLmFjdGl2ZSxcbiAgICAgIGV4YWN0ID0gZmlsdGVycy5leGFjdCxcbiAgICAgIGZldGNoaW5nID0gZmlsdGVycy5mZXRjaGluZyxcbiAgICAgIGluYWN0aXZlID0gZmlsdGVycy5pbmFjdGl2ZSxcbiAgICAgIHByZWRpY2F0ZSA9IGZpbHRlcnMucHJlZGljYXRlLFxuICAgICAgcXVlcnlLZXkgPSBmaWx0ZXJzLnF1ZXJ5S2V5LFxuICAgICAgc3RhbGUgPSBmaWx0ZXJzLnN0YWxlO1xuXG4gIGlmIChpc1F1ZXJ5S2V5KHF1ZXJ5S2V5KSkge1xuICAgIGlmIChleGFjdCkge1xuICAgICAgaWYgKHF1ZXJ5LnF1ZXJ5SGFzaCAhPT0gaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKHF1ZXJ5S2V5LCBxdWVyeS5vcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcGFydGlhbE1hdGNoS2V5KHF1ZXJ5LnF1ZXJ5S2V5LCBxdWVyeUtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNBY3RpdmU7XG5cbiAgaWYgKGluYWN0aXZlID09PSBmYWxzZSB8fCBhY3RpdmUgJiYgIWluYWN0aXZlKSB7XG4gICAgaXNBY3RpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGFjdGl2ZSA9PT0gZmFsc2UgfHwgaW5hY3RpdmUgJiYgIWFjdGl2ZSkge1xuICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGlzQWN0aXZlID09PSAnYm9vbGVhbicgJiYgcXVlcnkuaXNBY3RpdmUoKSAhPT0gaXNBY3RpdmUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHN0YWxlID09PSAnYm9vbGVhbicgJiYgcXVlcnkuaXNTdGFsZSgpICE9PSBzdGFsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZmV0Y2hpbmcgPT09ICdib29sZWFuJyAmJiBxdWVyeS5pc0ZldGNoaW5nKCkgIT09IGZldGNoaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHByZWRpY2F0ZSAmJiAhcHJlZGljYXRlKHF1ZXJ5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgb3B0aW9ucykge1xuICB2YXIgaGFzaEZuID0gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucXVlcnlLZXlIYXNoRm4pIHx8IGhhc2hRdWVyeUtleTtcbiAgcmV0dXJuIGhhc2hGbihxdWVyeUtleSk7XG59XG4vKipcbiAqIERlZmF1bHQgcXVlcnkga2V5cyBoYXNoIGZ1bmN0aW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoUXVlcnlLZXkocXVlcnlLZXkpIHtcbiAgdmFyIGFzQXJyYXkgPSBBcnJheS5pc0FycmF5KHF1ZXJ5S2V5KSA/IHF1ZXJ5S2V5IDogW3F1ZXJ5S2V5XTtcbiAgcmV0dXJuIHN0YWJsZVZhbHVlSGFzaChhc0FycmF5KTtcbn1cbi8qKlxuICogSGFzaGVzIHRoZSB2YWx1ZSBpbnRvIGEgc3RhYmxlIGhhc2guXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWJsZVZhbHVlSGFzaCh2YWx1ZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChfLCB2YWwpIHtcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWwpID8gT2JqZWN0LmtleXModmFsKS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWxba2V5XTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge30pIDogdmFsO1xuICB9KTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGtleSBgYmAgcGFydGlhbGx5IG1hdGNoZXMgd2l0aCBrZXkgYGFgLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWFsTWF0Y2hLZXkoYSwgYikge1xuICByZXR1cm4gcGFydGlhbERlZXBFcXVhbChlbnN1cmVBcnJheShhKSwgZW5zdXJlQXJyYXkoYikpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYGJgIHBhcnRpYWxseSBtYXRjaGVzIHdpdGggYGFgLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWFsRGVlcEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gIU9iamVjdC5rZXlzKGIpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuICFwYXJ0aWFsRGVlcEVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGBhYCBpZiBgYmAgaXMgZGVlcGx5IGVxdWFsLlxuICogSWYgbm90LCBpdCB3aWxsIHJlcGxhY2UgYW55IGRlZXBseSBlcXVhbCBjaGlsZHJlbiBvZiBgYmAgd2l0aCB0aG9zZSBvZiBgYWAuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBzdHJ1Y3R1cmFsIHNoYXJpbmcgYmV0d2VlbiBKU09OIHZhbHVlcyBmb3IgZXhhbXBsZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVxdWFsRGVlcChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYik7XG5cbiAgaWYgKGFycmF5IHx8IGlzUGxhaW5PYmplY3QoYSkgJiYgaXNQbGFpbk9iamVjdChiKSkge1xuICAgIHZhciBhU2l6ZSA9IGFycmF5ID8gYS5sZW5ndGggOiBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XG4gICAgdmFyIGJJdGVtcyA9IGFycmF5ID8gYiA6IE9iamVjdC5rZXlzKGIpO1xuICAgIHZhciBiU2l6ZSA9IGJJdGVtcy5sZW5ndGg7XG4gICAgdmFyIGNvcHkgPSBhcnJheSA/IFtdIDoge307XG4gICAgdmFyIGVxdWFsSXRlbXMgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiU2l6ZTsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gYXJyYXkgPyBpIDogYkl0ZW1zW2ldO1xuICAgICAgY29weVtrZXldID0gcmVwbGFjZUVxdWFsRGVlcChhW2tleV0sIGJba2V5XSk7XG5cbiAgICAgIGlmIChjb3B5W2tleV0gPT09IGFba2V5XSkge1xuICAgICAgICBlcXVhbEl0ZW1zKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFTaXplID09PSBiU2l6ZSAmJiBlcXVhbEl0ZW1zID09PSBhU2l6ZSA/IGEgOiBjb3B5O1xuICB9XG5cbiAgcmV0dXJuIGI7XG59XG4vKipcbiAqIFNoYWxsb3cgY29tcGFyZSBvYmplY3RzLiBPbmx5IHdvcmtzIHdpdGggb2JqZWN0cyB0aGF0IGFsd2F5cyBoYXZlIHRoZSBzYW1lIHByb3BlcnRpZXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbE9iamVjdHMoYSwgYikge1xuICBpZiAoYSAmJiAhYiB8fCBiICYmICFhKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0gLy8gQ29waWVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLXBsYWluLW9iamVjdFxuXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKG8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuXG5cbiAgdmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXG4gIGlmICh0eXBlb2YgY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG5cblxuICB2YXIgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuXG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKHByb3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuXG5cbiAgaWYgKCFwcm90Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gTW9zdCBsaWtlbHkgYSBwbGFpbiBPYmplY3RcblxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNPYmplY3RQcm90b3R5cGUobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUXVlcnlLZXkodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcCh0aW1lb3V0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XG4gIH0pO1xufVxuLyoqXG4gKiBTY2hlZHVsZXMgYSBtaWNyb3Rhc2suXG4gKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gc2NoZWR1bGUgc3RhdGUgdXBkYXRlcyBhZnRlciByZW5kZXJpbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlTWljcm90YXNrKGNhbGxiYWNrKSB7XG4gIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY2FsbGJhY2spLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICB9KTtcbn0iLCAiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgRm9jdXNNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKEZvY3VzTWFuYWdlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gRm9jdXNNYW5hZ2VyKCkge1xuICAgIHJldHVybiBfU3Vic2NyaWJhYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGb2N1c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnNldERlZmF1bHRFdmVudExpc3RlbmVyKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBzZXR1cChmdW5jdGlvbiAoZm9jdXNlZCkge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgX3RoaXMuc2V0Rm9jdXNlZChmb2N1c2VkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0Rm9jdXNlZCA9IGZ1bmN0aW9uIHNldEZvY3VzZWQoZm9jdXNlZCkge1xuICAgIHRoaXMuZm9jdXNlZCA9IGZvY3VzZWQ7XG5cbiAgICBpZiAoZm9jdXNlZCkge1xuICAgICAgdGhpcy5vbkZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaXNGb2N1c2VkID0gZnVuY3Rpb24gaXNGb2N1c2VkKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5mb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvY3VzZWQ7XG4gICAgfSAvLyBkb2N1bWVudCBnbG9iYWwgY2FuIGJlIHVuYXZhaWxhYmxlIGluIHJlYWN0IG5hdGl2ZVxuXG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFt1bmRlZmluZWQsICd2aXNpYmxlJywgJ3ByZXJlbmRlciddLmluY2x1ZGVzKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldERlZmF1bHRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gc2V0RGVmYXVsdEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdmFyIF93aW5kb3c7XG5cbiAgICBpZiAoIWlzU2VydmVyICYmICgoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikpIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcihmdW5jdGlvbiAob25Gb2N1cykge1xuICAgICAgICAvLyBMaXN0ZW4gdG8gdmlzaWJpbGxpdHljaGFuZ2UgYW5kIGZvY3VzXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25Gb2N1cywgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbkZvY3VzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25Gb2N1cyk7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEZvY3VzTWFuYWdlcjtcbn0oU3Vic2NyaWJhYmxlKTtcblxuZXhwb3J0IHZhciBmb2N1c01hbmFnZXIgPSBuZXcgRm9jdXNNYW5hZ2VyKCk7IiwgImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICcuL3V0aWxzJztcblxudmFyIE9ubGluZU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoT25saW5lTWFuYWdlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gT25saW5lTWFuYWdlcigpIHtcbiAgICByZXR1cm4gX1N1YnNjcmliYWJsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT25saW5lTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuc2V0RGVmYXVsdEV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBzZXRFdmVudExpc3RlbmVyKHNldHVwKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHNldHVwKGZ1bmN0aW9uIChvbmxpbmUpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25saW5lID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgX3RoaXMuc2V0T25saW5lKG9ubGluZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRPbmxpbmUgPSBmdW5jdGlvbiBzZXRPbmxpbmUob25saW5lKSB7XG4gICAgdGhpcy5vbmxpbmUgPSBvbmxpbmU7XG5cbiAgICBpZiAob25saW5lKSB7XG4gICAgICB0aGlzLm9uT25saW5lKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc09ubGluZSA9IGZ1bmN0aW9uIGlzT25saW5lKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMub25saW5lO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9O1xuXG4gIF9wcm90by5zZXREZWZhdWx0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHNldERlZmF1bHRFdmVudExpc3RlbmVyKCkge1xuICAgIHZhciBfd2luZG93O1xuXG4gICAgaWYgKCFpc1NlcnZlciAmJiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpKSB7XG4gICAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXIoZnVuY3Rpb24gKG9uT25saW5lKSB7XG4gICAgICAgIC8vIExpc3RlbiB0byBvbmxpbmVcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIG9uT25saW5lLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgb25PbmxpbmUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBCZSBzdXJlIHRvIHVuc3Vic2NyaWJlIGlmIGEgbmV3IGhhbmRsZXIgaXMgc2V0XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29ubGluZScsIG9uT25saW5lKTtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIG9uT25saW5lKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gT25saW5lTWFuYWdlcjtcbn0oU3Vic2NyaWJhYmxlKTtcblxuZXhwb3J0IHZhciBvbmxpbmVNYW5hZ2VyID0gbmV3IE9ubGluZU1hbmFnZXIoKTsiLCAiaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSAnLi9mb2N1c01hbmFnZXInO1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciB9IGZyb20gJy4vb25saW5lTWFuYWdlcic7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vdXRpbHMnOyAvLyBUWVBFU1xuXG5mdW5jdGlvbiBkZWZhdWx0UmV0cnlEZWxheShmYWlsdXJlQ291bnQpIHtcbiAgcmV0dXJuIE1hdGgubWluKDEwMDAgKiBNYXRoLnBvdygyLCBmYWlsdXJlQ291bnQpLCAzMDAwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiAodmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLmNhbmNlbCkgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnQgdmFyIENhbmNlbGxlZEVycm9yID0gZnVuY3Rpb24gQ2FuY2VsbGVkRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLnJldmVydCA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucmV2ZXJ0O1xuICB0aGlzLnNpbGVudCA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lsZW50O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGxlZEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIENhbmNlbGxlZEVycm9yO1xufSAvLyBDTEFTU1xuXG5leHBvcnQgdmFyIFJldHJ5ZXIgPSBmdW5jdGlvbiBSZXRyeWVyKGNvbmZpZykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBjYW5jZWxSZXRyeSA9IGZhbHNlO1xuICB2YXIgY2FuY2VsRm47XG4gIHZhciBjb250aW51ZUZuO1xuICB2YXIgcHJvbWlzZVJlc29sdmU7XG4gIHZhciBwcm9taXNlUmVqZWN0O1xuXG4gIHRoaXMuY2FuY2VsID0gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcbiAgICByZXR1cm4gY2FuY2VsRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbEZuKGNhbmNlbE9wdGlvbnMpO1xuICB9O1xuXG4gIHRoaXMuY2FuY2VsUmV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsUmV0cnkgPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuY29udGludWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbnRpbnVlRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnRpbnVlRm4oKTtcbiAgfTtcblxuICB0aGlzLmZhaWx1cmVDb3VudCA9IDA7XG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgdGhpcy5pc1Jlc29sdmVkID0gZmFsc2U7XG4gIHRoaXMuaXNUcmFuc3BvcnRDYW5jZWxhYmxlID0gZmFsc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChvdXRlclJlc29sdmUsIG91dGVyUmVqZWN0KSB7XG4gICAgcHJvbWlzZVJlc29sdmUgPSBvdXRlclJlc29sdmU7XG4gICAgcHJvbWlzZVJlamVjdCA9IG91dGVyUmVqZWN0O1xuICB9KTtcblxuICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgICBpZiAoIV90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIF90aGlzLmlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uU3VjY2Vzcyh2YWx1ZSk7XG4gICAgICBjb250aW51ZUZuID09IG51bGwgPyB2b2lkIDAgOiBjb250aW51ZUZuKCk7XG4gICAgICBwcm9taXNlUmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbiByZWplY3QodmFsdWUpIHtcbiAgICBpZiAoIV90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIF90aGlzLmlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vbkVycm9yKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnRpbnVlRm4oKTtcbiAgICAgIHByb21pc2VSZWplY3QodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGNvbnRpbnVlUmVzb2x2ZSkge1xuICAgICAgY29udGludWVGbiA9IGNvbnRpbnVlUmVzb2x2ZTtcbiAgICAgIF90aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5vblBhdXNlID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25QYXVzZSgpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY29udGludWVGbiA9IHVuZGVmaW5lZDtcbiAgICAgIF90aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgICBjb25maWcub25Db250aW51ZSA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uQ29udGludWUoKTtcbiAgICB9KTtcbiAgfTsgLy8gQ3JlYXRlIGxvb3AgZnVuY3Rpb25cblxuXG4gIHZhciBydW4gPSBmdW5jdGlvbiBydW4oKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBhbHJlYWR5IHJlc29sdmVkXG4gICAgaWYgKF90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZU9yVmFsdWU7IC8vIEV4ZWN1dGUgcXVlcnlcblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlT3JWYWx1ZSA9IGNvbmZpZy5mbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9taXNlT3JWYWx1ZSA9IFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9IC8vIENyZWF0ZSBjYWxsYmFjayB0byBjYW5jZWwgdGhpcyBmZXRjaFxuXG5cbiAgICBjYW5jZWxGbiA9IGZ1bmN0aW9uIGNhbmNlbEZuKGNhbmNlbE9wdGlvbnMpIHtcbiAgICAgIGlmICghX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgICByZWplY3QobmV3IENhbmNlbGxlZEVycm9yKGNhbmNlbE9wdGlvbnMpKTsgLy8gQ2FuY2VsIHRyYW5zcG9ydCBpZiBzdXBwb3J0ZWRcblxuICAgICAgICBpZiAoaXNDYW5jZWxhYmxlKHByb21pc2VPclZhbHVlKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlT3JWYWx1ZS5jYW5jZWwoKTtcbiAgICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTsgLy8gQ2hlY2sgaWYgdGhlIHRyYW5zcG9ydCBsYXllciBzdXBwb3J0IGNhbmNlbGxhdGlvblxuXG5cbiAgICBfdGhpcy5pc1RyYW5zcG9ydENhbmNlbGFibGUgPSBpc0NhbmNlbGFibGUocHJvbWlzZU9yVmFsdWUpO1xuICAgIFByb21pc2UucmVzb2x2ZShwcm9taXNlT3JWYWx1ZSkudGhlbihyZXNvbHZlKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfY29uZmlnJHJldHJ5LCBfY29uZmlnJHJldHJ5RGVsYXk7XG5cbiAgICAgIC8vIFN0b3AgaWYgdGhlIGZldGNoIGlzIGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgIGlmIChfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRG8gd2UgbmVlZCB0byByZXRyeSB0aGUgcmVxdWVzdD9cblxuXG4gICAgICB2YXIgcmV0cnkgPSAoX2NvbmZpZyRyZXRyeSA9IGNvbmZpZy5yZXRyeSkgIT0gbnVsbCA/IF9jb25maWckcmV0cnkgOiAzO1xuICAgICAgdmFyIHJldHJ5RGVsYXkgPSAoX2NvbmZpZyRyZXRyeURlbGF5ID0gY29uZmlnLnJldHJ5RGVsYXkpICE9IG51bGwgPyBfY29uZmlnJHJldHJ5RGVsYXkgOiBkZWZhdWx0UmV0cnlEZWxheTtcbiAgICAgIHZhciBkZWxheSA9IHR5cGVvZiByZXRyeURlbGF5ID09PSAnZnVuY3Rpb24nID8gcmV0cnlEZWxheShfdGhpcy5mYWlsdXJlQ291bnQsIGVycm9yKSA6IHJldHJ5RGVsYXk7XG4gICAgICB2YXIgc2hvdWxkUmV0cnkgPSByZXRyeSA9PT0gdHJ1ZSB8fCB0eXBlb2YgcmV0cnkgPT09ICdudW1iZXInICYmIF90aGlzLmZhaWx1cmVDb3VudCA8IHJldHJ5IHx8IHR5cGVvZiByZXRyeSA9PT0gJ2Z1bmN0aW9uJyAmJiByZXRyeShfdGhpcy5mYWlsdXJlQ291bnQsIGVycm9yKTtcblxuICAgICAgaWYgKGNhbmNlbFJldHJ5IHx8ICFzaG91bGRSZXRyeSkge1xuICAgICAgICAvLyBXZSBhcmUgZG9uZSBpZiB0aGUgcXVlcnkgZG9lcyBub3QgbmVlZCB0byBiZSByZXRyaWVkXG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZmFpbHVyZUNvdW50Kys7IC8vIE5vdGlmeSBvbiBmYWlsXG5cbiAgICAgIGNvbmZpZy5vbkZhaWwgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vbkZhaWwoX3RoaXMuZmFpbHVyZUNvdW50LCBlcnJvcik7IC8vIERlbGF5XG5cbiAgICAgIHNsZWVwKGRlbGF5KSAvLyBQYXVzZSBpZiB0aGUgZG9jdW1lbnQgaXMgbm90IHZpc2libGUgb3Igd2hlbiB0aGUgZGV2aWNlIGlzIG9mZmxpbmVcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgfHwgIW9ubGluZU1hbmFnZXIuaXNPbmxpbmUoKSkge1xuICAgICAgICAgIHJldHVybiBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNhbmNlbFJldHJ5KSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydW4oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07IC8vIFN0YXJ0IGxvb3BcblxuXG4gIHJ1bigpO1xufTsiLCAiaW1wb3J0IHsgc2NoZWR1bGVNaWNyb3Rhc2sgfSBmcm9tICcuL3V0aWxzJzsgLy8gVFlQRVNcblxuLy8gQ0xBU1NcbnZhciBOb3RpZnlNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTm90aWZ5TWFuYWdlcigpIHtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgdGhpcy50cmFuc2FjdGlvbnMgPSAwO1xuXG4gICAgdGhpcy5ub3RpZnlGbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgdGhpcy5iYXRjaE5vdGlmeUZuID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTm90aWZ5TWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJhdGNoID0gZnVuY3Rpb24gYmF0Y2goY2FsbGJhY2spIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9ucysrO1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIHRoaXMudHJhbnNhY3Rpb25zLS07XG5cbiAgICBpZiAoIXRoaXMudHJhbnNhY3Rpb25zKSB7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uc2NoZWR1bGUgPSBmdW5jdGlvbiBzY2hlZHVsZShjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy50cmFuc2FjdGlvbnMpIHtcbiAgICAgIHRoaXMucXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMubm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBbGwgY2FsbHMgdG8gdGhlIHdyYXBwZWQgZnVuY3Rpb24gd2lsbCBiZSBiYXRjaGVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5iYXRjaENhbGxzID0gZnVuY3Rpb24gYmF0Y2hDYWxscyhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBfdGhpczIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjay5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuXG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuYmF0Y2hOb3RpZnlGbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIF90aGlzMy5ub3RpZnlGbihjYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIG5vdGlmeSBmdW5jdGlvbi5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBmb3IgZXhhbXBsZSB3cmFwIG5vdGlmaWNhdGlvbnMgd2l0aCBgUmVhY3QuYWN0YCB3aGlsZSBydW5uaW5nIHRlc3RzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXROb3RpZnlGdW5jdGlvbiA9IGZ1bmN0aW9uIHNldE5vdGlmeUZ1bmN0aW9uKGZuKSB7XG4gICAgdGhpcy5ub3RpZnlGbiA9IGZuO1xuICB9XG4gIC8qKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gc2V0IGEgY3VzdG9tIGZ1bmN0aW9uIHRvIGJhdGNoIG5vdGlmaWNhdGlvbnMgdG9nZXRoZXIgaW50byBhIHNpbmdsZSB0aWNrLlxuICAgKiBCeSBkZWZhdWx0IFJlYWN0IFF1ZXJ5IHdpbGwgdXNlIHRoZSBiYXRjaCBmdW5jdGlvbiBwcm92aWRlZCBieSBSZWFjdERPTSBvciBSZWFjdCBOYXRpdmUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldEJhdGNoTm90aWZ5RnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uKGZuKSB7XG4gICAgdGhpcy5iYXRjaE5vdGlmeUZuID0gZm47XG4gIH07XG5cbiAgcmV0dXJuIE5vdGlmeU1hbmFnZXI7XG59KCk7IC8vIFNJTkdMRVRPTlxuXG5cbmV4cG9ydCB2YXIgbm90aWZ5TWFuYWdlciA9IG5ldyBOb3RpZnlNYW5hZ2VyKCk7IiwgImltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWxzJzsgLy8gVFlQRVNcblxuLy8gRlVOQ1RJT05TXG52YXIgbG9nZ2VyID0gY29uc29sZSB8fCB7XG4gIGVycm9yOiBub29wLFxuICB3YXJuOiBub29wLFxuICBsb2c6IG5vb3Bcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICByZXR1cm4gbG9nZ2VyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ2dlcihuZXdMb2dnZXIpIHtcbiAgbG9nZ2VyID0gbmV3TG9nZ2VyO1xufSIsICJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGVuc3VyZUFycmF5LCBmdW5jdGlvbmFsVXBkYXRlLCBpc1ZhbGlkVGltZW91dCwgbm9vcCwgcmVwbGFjZUVxdWFsRGVlcCwgdGltZVVudGlsU3RhbGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgUmV0cnllciwgaXNDYW5jZWxsZWRFcnJvciB9IGZyb20gJy4vcmV0cnllcic7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIFF1ZXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVlcnkoY29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IGNvbmZpZy5kZWZhdWx0T3B0aW9ucztcbiAgICB0aGlzLnNldE9wdGlvbnMoY29uZmlnLm9wdGlvbnMpO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5jYWNoZSA9IGNvbmZpZy5jYWNoZTtcbiAgICB0aGlzLnF1ZXJ5S2V5ID0gY29uZmlnLnF1ZXJ5S2V5O1xuICAgIHRoaXMucXVlcnlIYXNoID0gY29uZmlnLnF1ZXJ5SGFzaDtcbiAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IGNvbmZpZy5zdGF0ZSB8fCB0aGlzLmdldERlZmF1bHRTdGF0ZSh0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLnNjaGVkdWxlR2MoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRjYWNoZVRpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpOyAvLyBEZWZhdWx0IHRvIDUgbWludXRlcyBpZiBub3QgY2FjaGUgdGltZSBpcyBzZXRcblxuICAgIHRoaXMuY2FjaGVUaW1lID0gTWF0aC5tYXgodGhpcy5jYWNoZVRpbWUgfHwgMCwgKF90aGlzJG9wdGlvbnMkY2FjaGVUaSA9IHRoaXMub3B0aW9ucy5jYWNoZVRpbWUpICE9IG51bGwgPyBfdGhpcyRvcHRpb25zJGNhY2hlVGkgOiA1ICogNjAgKiAxMDAwKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLnNjaGVkdWxlR2MgPSBmdW5jdGlvbiBzY2hlZHVsZUdjKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG5cbiAgICBpZiAoaXNWYWxpZFRpbWVvdXQodGhpcy5jYWNoZVRpbWUpKSB7XG4gICAgICB0aGlzLmdjVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgfSwgdGhpcy5jYWNoZVRpbWUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xlYXJHY1RpbWVvdXQgPSBmdW5jdGlvbiBjbGVhckdjVGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5nY1RpbWVvdXQpO1xuICAgIHRoaXMuZ2NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by5vcHRpb25hbFJlbW92ZSA9IGZ1bmN0aW9uIG9wdGlvbmFsUmVtb3ZlKCkge1xuICAgIGlmICghdGhpcy5vYnNlcnZlcnMubGVuZ3RoICYmICF0aGlzLnN0YXRlLmlzRmV0Y2hpbmcpIHtcbiAgICAgIHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RGF0YSA9IGZ1bmN0aW9uIHNldERhdGEodXBkYXRlciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zJGlzRGF0YUUsIF90aGlzJG9wdGlvbnM7XG5cbiAgICB2YXIgcHJldkRhdGEgPSB0aGlzLnN0YXRlLmRhdGE7IC8vIEdldCB0aGUgbmV3IGRhdGFcblxuICAgIHZhciBkYXRhID0gZnVuY3Rpb25hbFVwZGF0ZSh1cGRhdGVyLCBwcmV2RGF0YSk7IC8vIFVzZSBwcmV2IGRhdGEgaWYgYW4gaXNEYXRhRXF1YWwgZnVuY3Rpb24gaXMgZGVmaW5lZCBhbmQgcmV0dXJucyBgdHJ1ZWBcblxuICAgIGlmICgoX3RoaXMkb3B0aW9ucyRpc0RhdGFFID0gKF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMpLmlzRGF0YUVxdWFsKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRpc0RhdGFFLmNhbGwoX3RoaXMkb3B0aW9ucywgcHJldkRhdGEsIGRhdGEpKSB7XG4gICAgICBkYXRhID0gcHJldkRhdGE7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RydWN0dXJhbFNoYXJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAvLyBTdHJ1Y3R1cmFsbHkgc2hhcmUgZGF0YSBiZXR3ZWVuIHByZXYgYW5kIG5ldyBkYXRhIGlmIG5lZWRlZFxuICAgICAgZGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldkRhdGEsIGRhdGEpO1xuICAgIH0gLy8gU2V0IGRhdGEgYW5kIG1hcmsgaXQgYXMgY2FjaGVkXG5cblxuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudXBkYXRlZEF0XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgX3Byb3RvLnNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUsIHNldFN0YXRlT3B0aW9ucykge1xuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ3NldFN0YXRlJyxcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldFN0YXRlT3B0aW9uczogc2V0U3RhdGVPcHRpb25zXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJHJldHJ5ZXI7XG5cbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcbiAgICAoX3RoaXMkcmV0cnllciA9IHRoaXMucmV0cnllcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHJldHJ5ZXIuY2FuY2VsKG9wdGlvbnMpO1xuICAgIHJldHVybiBwcm9taXNlID8gcHJvbWlzZS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgICB0aGlzLmNhbmNlbCh7XG4gICAgICBzaWxlbnQ6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB0aGlzLnNldFN0YXRlKHRoaXMuaW5pdGlhbFN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlcnMuc29tZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBvYnNlcnZlci5vcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc0ZldGNoaW5nID0gZnVuY3Rpb24gaXNGZXRjaGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ZldGNoaW5nO1xuICB9O1xuXG4gIF9wcm90by5pc1N0YWxlID0gZnVuY3Rpb24gaXNTdGFsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ludmFsaWRhdGVkIHx8ICF0aGlzLnN0YXRlLmRhdGFVcGRhdGVkQXQgfHwgdGhpcy5vYnNlcnZlcnMuc29tZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCkuaXNTdGFsZTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaXNTdGFsZUJ5VGltZSA9IGZ1bmN0aW9uIGlzU3RhbGVCeVRpbWUoc3RhbGVUaW1lKSB7XG4gICAgaWYgKHN0YWxlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGFsZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzSW52YWxpZGF0ZWQgfHwgIXRoaXMuc3RhdGUuZGF0YVVwZGF0ZWRBdCB8fCAhdGltZVVudGlsU3RhbGUodGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0LCBzdGFsZVRpbWUpO1xuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcmV0cnllcjI7XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5zaG91bGRGZXRjaE9uV2luZG93Rm9jdXMoKTtcbiAgICB9KTtcblxuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIucmVmZXRjaCgpO1xuICAgIH0gLy8gQ29udGludWUgZmV0Y2ggaWYgY3VycmVudGx5IHBhdXNlZFxuXG5cbiAgICAoX3RoaXMkcmV0cnllcjIgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyMi5jb250aW51ZSgpO1xuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHZhciBfdGhpcyRyZXRyeWVyMztcblxuICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LnNob3VsZEZldGNoT25SZWNvbm5lY3QoKTtcbiAgICB9KTtcblxuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIucmVmZXRjaCgpO1xuICAgIH0gLy8gQ29udGludWUgZmV0Y2ggaWYgY3VycmVudGx5IHBhdXNlZFxuXG5cbiAgICAoX3RoaXMkcmV0cnllcjMgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyMy5jb250aW51ZSgpO1xuICB9O1xuXG4gIF9wcm90by5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpID09PSAtMSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7IC8vIFN0b3AgdGhlIHF1ZXJ5IGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWRcblxuICAgICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICAgICAgdGhpcy5jYWNoZS5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAnb2JzZXJ2ZXJBZGRlZCcsXG4gICAgICAgIHF1ZXJ5OiB0aGlzLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIGlmICh0aGlzLm9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSBvYnNlcnZlcjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGUgdHJhbnNwb3J0IGxheWVyIGRvZXMgbm90IHN1cHBvcnQgY2FuY2VsbGF0aW9uXG4gICAgICAgIC8vIHdlJ2xsIGxldCB0aGUgcXVlcnkgY29udGludWUgc28gdGhlIHJlc3VsdCBjYW4gYmUgY2FjaGVkXG4gICAgICAgIGlmICh0aGlzLnJldHJ5ZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5yZXRyeWVyLmlzVHJhbnNwb3J0Q2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5yZXRyeWVyLmNhbmNlbCh7XG4gICAgICAgICAgICAgIHJldmVydDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmV0cnllci5jYW5jZWxSZXRyeSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNhY2hlVGltZSkge1xuICAgICAgICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FjaGUubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ29ic2VydmVyUmVtb3ZlZCcsXG4gICAgICAgIHF1ZXJ5OiB0aGlzLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzSW52YWxpZGF0ZWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnaW52YWxpZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaChvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgX3RoaXMkb3B0aW9ucyRiZWhhdmlvLFxuICAgICAgICBfY29udGV4dCRmZXRjaE9wdGlvbnM7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pc0ZldGNoaW5nKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0ICYmIChmZXRjaE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoT3B0aW9ucy5jYW5jZWxSZWZldGNoKSkge1xuICAgICAgICAvLyBTaWxlbnRseSBjYW5jZWwgY3VycmVudCBmZXRjaCBpZiB0aGUgdXNlciB3YW50cyB0byBjYW5jZWwgcmVmZXRjaGVzXG4gICAgICAgIHRoaXMuY2FuY2VsKHtcbiAgICAgICAgICBzaWxlbnQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvbWlzZSkge1xuICAgICAgICAvLyBSZXR1cm4gY3VycmVudCBwcm9taXNlIGlmIHdlIGFyZSBhbHJlYWR5IGZldGNoaW5nXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgICB9XG4gICAgfSAvLyBVcGRhdGUgY29uZmlnIGlmIHBhc3NlZCwgb3RoZXJ3aXNlIHRoZSBjb25maWcgZnJvbSB0aGUgbGFzdCBleGVjdXRpb24gaXMgdXNlZFxuXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgIH0gLy8gVXNlIHRoZSBvcHRpb25zIGZyb20gdGhlIGZpcnN0IG9ic2VydmVyIHdpdGggYSBxdWVyeSBmdW5jdGlvbiBpZiBubyBmdW5jdGlvbiBpcyBmb3VuZC5cbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgcXVlcnkgaXMgaHlkcmF0ZWQgb3IgY3JlYXRlZCB3aXRoIHNldFF1ZXJ5RGF0YS5cblxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucXVlcnlGbikge1xuICAgICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geC5vcHRpb25zLnF1ZXJ5Rm47XG4gICAgICB9KTtcblxuICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvYnNlcnZlci5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IC8vIENyZWF0ZSBxdWVyeSBmdW5jdGlvbiBjb250ZXh0XG5cblxuICAgIHZhciBxdWVyeUtleSA9IGVuc3VyZUFycmF5KHRoaXMucXVlcnlLZXkpO1xuICAgIHZhciBxdWVyeUZuQ29udGV4dCA9IHtcbiAgICAgIHF1ZXJ5S2V5OiBxdWVyeUtleSxcbiAgICAgIHBhZ2VQYXJhbTogdW5kZWZpbmVkXG4gICAgfTsgLy8gQ3JlYXRlIGZldGNoIGZ1bmN0aW9uXG5cbiAgICB2YXIgZmV0Y2hGbiA9IGZ1bmN0aW9uIGZldGNoRm4oKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMucXVlcnlGbiA/IF90aGlzMi5vcHRpb25zLnF1ZXJ5Rm4ocXVlcnlGbkNvbnRleHQpIDogUHJvbWlzZS5yZWplY3QoJ01pc3NpbmcgcXVlcnlGbicpO1xuICAgIH07IC8vIFRyaWdnZXIgYmVoYXZpb3IgaG9va1xuXG5cbiAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgIGZldGNoT3B0aW9uczogZmV0Y2hPcHRpb25zLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICBmZXRjaEZuOiBmZXRjaEZuXG4gICAgfTtcblxuICAgIGlmICgoX3RoaXMkb3B0aW9ucyRiZWhhdmlvID0gdGhpcy5vcHRpb25zLmJlaGF2aW9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRiZWhhdmlvLm9uRmV0Y2gpIHtcbiAgICAgIHZhciBfdGhpcyRvcHRpb25zJGJlaGF2aW8yO1xuXG4gICAgICAoX3RoaXMkb3B0aW9ucyRiZWhhdmlvMiA9IHRoaXMub3B0aW9ucy5iZWhhdmlvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkYmVoYXZpbzIub25GZXRjaChjb250ZXh0KTtcbiAgICB9IC8vIFN0b3JlIHN0YXRlIGluIGNhc2UgdGhlIGN1cnJlbnQgZmV0Y2ggbmVlZHMgdG8gYmUgcmV2ZXJ0ZWRcblxuXG4gICAgdGhpcy5yZXZlcnRTdGF0ZSA9IHRoaXMuc3RhdGU7IC8vIFNldCB0byBmZXRjaGluZyBzdGF0ZSBpZiBub3QgYWxyZWFkeSBpbiBpdFxuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzRmV0Y2hpbmcgfHwgdGhpcy5zdGF0ZS5mZXRjaE1ldGEgIT09ICgoX2NvbnRleHQkZmV0Y2hPcHRpb25zID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRmZXRjaE9wdGlvbnMubWV0YSkpIHtcbiAgICAgIHZhciBfY29udGV4dCRmZXRjaE9wdGlvbnMyO1xuXG4gICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ2ZldGNoJyxcbiAgICAgICAgbWV0YTogKF9jb250ZXh0JGZldGNoT3B0aW9uczIgPSBjb250ZXh0LmZldGNoT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JGZldGNoT3B0aW9uczIubWV0YVxuICAgICAgfSk7XG4gICAgfSAvLyBUcnkgdG8gZmV0Y2ggdGhlIGRhdGFcblxuXG4gICAgdGhpcy5yZXRyeWVyID0gbmV3IFJldHJ5ZXIoe1xuICAgICAgZm46IGNvbnRleHQuZmV0Y2hGbixcbiAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgX3RoaXMyLnNldERhdGEoZGF0YSk7IC8vIFJlbW92ZSBxdWVyeSBhZnRlciBmZXRjaGluZyBpZiBjYWNoZSB0aW1lIGlzIDBcblxuXG4gICAgICAgIGlmIChfdGhpczIuY2FjaGVUaW1lID09PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLm9wdGlvbmFsUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgIC8vIE9wdGltaXN0aWNhbGx5IHVwZGF0ZSBzdGF0ZSBpZiBuZWVkZWRcbiAgICAgICAgaWYgKCEoaXNDYW5jZWxsZWRFcnJvcihlcnJvcikgJiYgZXJyb3Iuc2lsZW50KSkge1xuICAgICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQ2FuY2VsbGVkRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG4gICAgICAgICAgaWYgKF90aGlzMi5jYWNoZS5jb25maWcub25FcnJvcikge1xuICAgICAgICAgICAgX3RoaXMyLmNhY2hlLmNvbmZpZy5vbkVycm9yKGVycm9yLCBfdGhpczIpO1xuICAgICAgICAgIH0gLy8gTG9nIGVycm9yXG5cblxuICAgICAgICAgIGdldExvZ2dlcigpLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSAvLyBSZW1vdmUgcXVlcnkgYWZ0ZXIgZmV0Y2hpbmcgaWYgY2FjaGUgdGltZSBpcyAwXG5cblxuICAgICAgICBpZiAoX3RoaXMyLmNhY2hlVGltZSA9PT0gMCkge1xuICAgICAgICAgIF90aGlzMi5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25GYWlsOiBmdW5jdGlvbiBvbkZhaWwoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2ZhaWxlZCdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25QYXVzZTogZnVuY3Rpb24gb25QYXVzZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAncGF1c2UnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uQ29udGludWU6IGZ1bmN0aW9uIG9uQ29udGludWUoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2NvbnRpbnVlJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXRyeTogY29udGV4dC5vcHRpb25zLnJldHJ5LFxuICAgICAgcmV0cnlEZWxheTogY29udGV4dC5vcHRpb25zLnJldHJ5RGVsYXlcbiAgICB9KTtcbiAgICB0aGlzLnByb21pc2UgPSB0aGlzLnJldHJ5ZXIucHJvbWlzZTtcbiAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMucmVkdWNlcih0aGlzLnN0YXRlLCBhY3Rpb24pO1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5vblF1ZXJ5VXBkYXRlKGFjdGlvbik7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMzLmNhY2hlLm5vdGlmeSh7XG4gICAgICAgIHF1ZXJ5OiBfdGhpczMsXG4gICAgICAgIHR5cGU6ICdxdWVyeVVwZGF0ZWQnLFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldERlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRTdGF0ZShvcHRpb25zKSB7XG4gICAgdmFyIGRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsRGF0YSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuaW5pdGlhbERhdGEoKSA6IG9wdGlvbnMuaW5pdGlhbERhdGE7XG4gICAgdmFyIGhhc0luaXRpYWxEYXRhID0gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbERhdGEgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBpbml0aWFsRGF0YVVwZGF0ZWRBdCA9IGhhc0luaXRpYWxEYXRhID8gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbERhdGFVcGRhdGVkQXQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmluaXRpYWxEYXRhVXBkYXRlZEF0KCkgOiBvcHRpb25zLmluaXRpYWxEYXRhVXBkYXRlZEF0IDogMDtcbiAgICB2YXIgaGFzRGF0YSA9IHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJztcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVDb3VudDogMCxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IGhhc0RhdGEgPyBpbml0aWFsRGF0YVVwZGF0ZWRBdCAhPSBudWxsID8gaW5pdGlhbERhdGFVcGRhdGVkQXQgOiBEYXRlLm5vdygpIDogMCxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgZXJyb3JVcGRhdGVDb3VudDogMCxcbiAgICAgIGVycm9yVXBkYXRlZEF0OiAwLFxuICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IDAsXG4gICAgICBmZXRjaE1ldGE6IG51bGwsXG4gICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgIGlzSW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgc3RhdHVzOiBoYXNEYXRhID8gJ3N1Y2Nlc3MnIDogJ2lkbGUnXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ucmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAgIHZhciBfYWN0aW9uJG1ldGEsIF9hY3Rpb24kZGF0YVVwZGF0ZWRBdDtcblxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogc3RhdGUuZmV0Y2hGYWlsdXJlQ291bnQgKyAxXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdwYXVzZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc1BhdXNlZDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY29udGludWUnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdmZXRjaCc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogMCxcbiAgICAgICAgICBmZXRjaE1ldGE6IChfYWN0aW9uJG1ldGEgPSBhY3Rpb24ubWV0YSkgIT0gbnVsbCA/IF9hY3Rpb24kbWV0YSA6IG51bGwsXG4gICAgICAgICAgaXNGZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiAhc3RhdGUuZGF0YVVwZGF0ZWRBdCA/ICdsb2FkaW5nJyA6IHN0YXRlLnN0YXR1c1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBkYXRhOiBhY3Rpb24uZGF0YSxcbiAgICAgICAgICBkYXRhVXBkYXRlQ291bnQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCArIDEsXG4gICAgICAgICAgZGF0YVVwZGF0ZWRBdDogKF9hY3Rpb24kZGF0YVVwZGF0ZWRBdCA9IGFjdGlvbi5kYXRhVXBkYXRlZEF0KSAhPSBudWxsID8gX2FjdGlvbiRkYXRhVXBkYXRlZEF0IDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogMCxcbiAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc0ludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVycm9yID0gYWN0aW9uLmVycm9yO1xuXG4gICAgICAgIGlmIChpc0NhbmNlbGxlZEVycm9yKGVycm9yKSAmJiBlcnJvci5yZXZlcnQgJiYgdGhpcy5yZXZlcnRTdGF0ZSkge1xuICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhpcy5yZXZlcnRTdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIGVycm9yVXBkYXRlQ291bnQ6IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgKyAxLFxuICAgICAgICAgIGVycm9yVXBkYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICAgIGZldGNoRmFpbHVyZUNvdW50OiBzdGF0ZS5mZXRjaEZhaWx1cmVDb3VudCArIDEsXG4gICAgICAgICAgaXNGZXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnaW52YWxpZGF0ZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc0ludmFsaWRhdGVkOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdzZXRTdGF0ZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIGFjdGlvbi5zdGF0ZSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5O1xufSgpOyIsICJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IGhhc2hRdWVyeUtleUJ5T3B0aW9ucywgbWF0Y2hRdWVyeSwgcGFyc2VGaWx0ZXJBcmdzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBRdWVyeSB9IGZyb20gJy4vcXVlcnknO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeUNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFF1ZXJ5Q2FjaGUsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIFF1ZXJ5Q2FjaGUoY29uZmlnKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgX3RoaXMucXVlcmllcyA9IFtdO1xuICAgIF90aGlzLnF1ZXJpZXNNYXAgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlDYWNoZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIHZhciBfb3B0aW9ucyRxdWVyeUhhc2g7XG5cbiAgICB2YXIgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuICAgIHZhciBxdWVyeUhhc2ggPSAoX29wdGlvbnMkcXVlcnlIYXNoID0gb3B0aW9ucy5xdWVyeUhhc2gpICE9IG51bGwgPyBfb3B0aW9ucyRxdWVyeUhhc2ggOiBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIG9wdGlvbnMpO1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHF1ZXJ5SGFzaCk7XG5cbiAgICBpZiAoIXF1ZXJ5KSB7XG4gICAgICBxdWVyeSA9IG5ldyBRdWVyeSh7XG4gICAgICAgIGNhY2hlOiB0aGlzLFxuICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgIHF1ZXJ5SGFzaDogcXVlcnlIYXNoLFxuICAgICAgICBvcHRpb25zOiBjbGllbnQuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKSxcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogY2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkKHF1ZXJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVlcnk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChxdWVyeSkge1xuICAgIGlmICghdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF0pIHtcbiAgICAgIHRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdID0gcXVlcnk7XG4gICAgICB0aGlzLnF1ZXJpZXMucHVzaChxdWVyeSk7XG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdxdWVyeUFkZGVkJyxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShxdWVyeSkge1xuICAgIHZhciBxdWVyeUluTWFwID0gdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF07XG5cbiAgICBpZiAocXVlcnlJbk1hcCkge1xuICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5xdWVyaWVzID0gdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCAhPT0gcXVlcnk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHF1ZXJ5SW5NYXAgPT09IHF1ZXJ5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAncXVlcnlSZW1vdmVkJyxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIF90aGlzMi5yZW1vdmUocXVlcnkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChxdWVyeUhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5SGFzaF07XG4gIH07XG5cbiAgX3Byb3RvLmdldEFsbCA9IGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzO1xuICB9O1xuXG4gIF9wcm90by5maW5kID0gZnVuY3Rpb24gZmluZChhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzWzBdO1xuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJzLmV4YWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZmlsdGVycy5leGFjdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucXVlcmllcy5maW5kKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgcmV0dXJuIG1hdGNoUXVlcnkoZmlsdGVycywgcXVlcnkpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5maW5kQWxsID0gZnVuY3Rpb24gZmluZEFsbChhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MyID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczJbMF07XG5cbiAgICByZXR1cm4gZmlsdGVycyA/IHRoaXMucXVlcmllcy5maWx0ZXIoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbWF0Y2hRdWVyeShmaWx0ZXJzLCBxdWVyeSk7XG4gICAgfSkgOiB0aGlzLnF1ZXJpZXM7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShldmVudCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM0LnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnkub25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uT25saW5lID0gZnVuY3Rpb24gb25PbmxpbmUoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5Lm9uT25saW5lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlDYWNoZTtcbn0oU3Vic2NyaWJhYmxlKTsiLCAiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IFJldHJ5ZXIgfSBmcm9tICcuL3JldHJ5ZXInO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbHMnOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBNdXRhdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE11dGF0aW9uKGNvbmZpZykge1xuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25maWcuZGVmYXVsdE9wdGlvbnMsIGNvbmZpZy5vcHRpb25zKTtcbiAgICB0aGlzLm11dGF0aW9uSWQgPSBjb25maWcubXV0YXRpb25JZDtcbiAgICB0aGlzLm11dGF0aW9uQ2FjaGUgPSBjb25maWcubXV0YXRpb25DYWNoZTtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgIHRoaXMuc3RhdGUgPSBjb25maWcuc3RhdGUgfHwgZ2V0RGVmYXVsdFN0YXRlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTXV0YXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnc2V0U3RhdGUnLFxuICAgICAgc3RhdGU6IHN0YXRlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcikgPT09IC0xKSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IG9ic2VydmVyO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMucmV0cnllcikge1xuICAgICAgdGhpcy5yZXRyeWVyLmNhbmNlbCgpO1xuICAgICAgcmV0dXJuIHRoaXMucmV0cnllci5wcm9taXNlLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIF9wcm90by5jb250aW51ZSA9IGZ1bmN0aW9uIF9jb250aW51ZSgpIHtcbiAgICBpZiAodGhpcy5yZXRyeWVyKSB7XG4gICAgICB0aGlzLnJldHJ5ZXIuY29udGludWUoKTtcbiAgICAgIHJldHVybiB0aGlzLnJldHJ5ZXIucHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGUgPSBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgcmVzdG9yZWQgPSB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gJ2xvYWRpbmcnO1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpZiAoIXJlc3RvcmVkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ2xvYWRpbmcnLFxuICAgICAgICB2YXJpYWJsZXM6IHRoaXMub3B0aW9ucy52YXJpYWJsZXNcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uTXV0YXRlID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uTXV0YXRlKF90aGlzLnN0YXRlLnZhcmlhYmxlcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSBfdGhpcy5zdGF0ZS5jb250ZXh0KSB7XG4gICAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ2xvYWRpbmcnLFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgIHZhcmlhYmxlczogX3RoaXMuc3RhdGUudmFyaWFibGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmV4ZWN1dGVNdXRhdGlvbigpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgZGF0YSA9IHJlc3VsdDtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vblN1Y2Nlc3MoZGF0YSwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vblNldHRsZWQoZGF0YSwgbnVsbCwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcbiAgICAgIGlmIChfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vbkVycm9yKSB7XG4gICAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uRXJyb3IoZXJyb3IsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCwgX3RoaXMpO1xuICAgICAgfSAvLyBMb2cgZXJyb3JcblxuXG4gICAgICBnZXRMb2dnZXIoKS5lcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25FcnJvcihlcnJvciwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25TZXR0bGVkKHVuZGVmaW5lZCwgZXJyb3IsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGVNdXRhdGlvbiA9IGZ1bmN0aW9uIGV4ZWN1dGVNdXRhdGlvbigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgX3RoaXMkb3B0aW9ucyRyZXRyeTtcblxuICAgIHRoaXMucmV0cnllciA9IG5ldyBSZXRyeWVyKHtcbiAgICAgIGZuOiBmdW5jdGlvbiBmbigpIHtcbiAgICAgICAgaWYgKCFfdGhpczIub3B0aW9ucy5tdXRhdGlvbkZuKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdObyBtdXRhdGlvbkZuIGZvdW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMubXV0YXRpb25GbihfdGhpczIuc3RhdGUudmFyaWFibGVzKTtcbiAgICAgIH0sXG4gICAgICBvbkZhaWw6IGZ1bmN0aW9uIG9uRmFpbCgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnZmFpbGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdwYXVzZSdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25Db250aW51ZTogZnVuY3Rpb24gb25Db250aW51ZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnY29udGludWUnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJldHJ5OiAoX3RoaXMkb3B0aW9ucyRyZXRyeSA9IHRoaXMub3B0aW9ucy5yZXRyeSkgIT0gbnVsbCA/IF90aGlzJG9wdGlvbnMkcmV0cnkgOiAwLFxuICAgICAgcmV0cnlEZWxheTogdGhpcy5vcHRpb25zLnJldHJ5RGVsYXlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yZXRyeWVyLnByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnN0YXRlID0gcmVkdWNlcih0aGlzLnN0YXRlLCBhY3Rpb24pO1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5vbk11dGF0aW9uVXBkYXRlKGFjdGlvbik7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMzLm11dGF0aW9uQ2FjaGUubm90aWZ5KF90aGlzMyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE11dGF0aW9uO1xufSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YTogdW5kZWZpbmVkLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGZhaWx1cmVDb3VudDogMCxcbiAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgc3RhdHVzOiAnaWRsZScsXG4gICAgdmFyaWFibGVzOiB1bmRlZmluZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZhaWx1cmVDb3VudCArIDFcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncGF1c2UnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc1BhdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdjb250aW51ZSc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgY29udGV4dDogYWN0aW9uLmNvbnRleHQsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnbG9hZGluZycsXG4gICAgICAgIHZhcmlhYmxlczogYWN0aW9uLnZhcmlhYmxlc1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgZGF0YTogYWN0aW9uLmRhdGEsXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBlcnJvcjogYWN0aW9uLmVycm9yLFxuICAgICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZhaWx1cmVDb3VudCArIDEsXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3NldFN0YXRlJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIGFjdGlvbi5zdGF0ZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwgImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBNdXRhdGlvbiB9IGZyb20gJy4vbXV0YXRpb24nO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBNdXRhdGlvbkNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKE11dGF0aW9uQ2FjaGUsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIE11dGF0aW9uQ2FjaGUoY29uZmlnKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgX3RoaXMubXV0YXRpb25zID0gW107XG4gICAgX3RoaXMubXV0YXRpb25JZCA9IDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE11dGF0aW9uQ2FjaGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICB2YXIgbXV0YXRpb24gPSBuZXcgTXV0YXRpb24oe1xuICAgICAgbXV0YXRpb25DYWNoZTogdGhpcyxcbiAgICAgIG11dGF0aW9uSWQ6ICsrdGhpcy5tdXRhdGlvbklkLFxuICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRNdXRhdGlvbk9wdGlvbnMob3B0aW9ucyksXG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9ucy5tdXRhdGlvbktleSA/IGNsaWVudC5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMubXV0YXRpb25LZXkpIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgdGhpcy5hZGQobXV0YXRpb24pO1xuICAgIHJldHVybiBtdXRhdGlvbjtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkobXV0YXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobXV0YXRpb24pIHtcbiAgICB0aGlzLm11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IG11dGF0aW9uO1xuICAgIH0pO1xuICAgIG11dGF0aW9uLmNhbmNlbCgpO1xuICAgIHRoaXMubm90aWZ5KG11dGF0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLm11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICBfdGhpczIucmVtb3ZlKG11dGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRBbGwgPSBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkobXV0YXRpb24pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcihtdXRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1cyA9IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5yZXN1bWVQYXVzZWRNdXRhdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8ub25PbmxpbmUgPSBmdW5jdGlvbiBvbk9ubGluZSgpIHtcbiAgICB0aGlzLnJlc3VtZVBhdXNlZE11dGF0aW9ucygpO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWVQYXVzZWRNdXRhdGlvbnMgPSBmdW5jdGlvbiByZXN1bWVQYXVzZWRNdXRhdGlvbnMoKSB7XG4gICAgdmFyIHBhdXNlZE11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHguc3RhdGUuaXNQYXVzZWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHBhdXNlZE11dGF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHByb21pc2UsIG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtdXRhdGlvbi5jb250aW51ZSgpLmNhdGNoKG5vb3ApO1xuICAgICAgICB9KTtcbiAgICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTXV0YXRpb25DYWNoZTtcbn0oU3Vic2NyaWJhYmxlKTsiLCAiaW1wb3J0IHsgaXNDYW5jZWxhYmxlIH0gZnJvbSAnLi9yZXRyeWVyJztcbmV4cG9ydCBmdW5jdGlvbiBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKSB7XG4gIHJldHVybiB7XG4gICAgb25GZXRjaDogZnVuY3Rpb24gb25GZXRjaChjb250ZXh0KSB7XG4gICAgICBjb250ZXh0LmZldGNoRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfY29udGV4dCRmZXRjaE9wdGlvbnMsIF9jb250ZXh0JGZldGNoT3B0aW9uczIsIF9jb250ZXh0JHN0YXRlJGRhdGEsIF9jb250ZXh0JHN0YXRlJGRhdGEyO1xuXG4gICAgICAgIHZhciBmZXRjaE1vcmUgPSAoX2NvbnRleHQkZmV0Y2hPcHRpb25zID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX2NvbnRleHQkZmV0Y2hPcHRpb25zMiA9IF9jb250ZXh0JGZldGNoT3B0aW9ucy5tZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZmV0Y2hPcHRpb25zMi5mZXRjaE1vcmU7XG4gICAgICAgIHZhciBwYWdlUGFyYW0gPSBmZXRjaE1vcmUgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoTW9yZS5wYWdlUGFyYW07XG4gICAgICAgIHZhciBpc0ZldGNoaW5nTmV4dFBhZ2UgPSAoZmV0Y2hNb3JlID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE1vcmUuZGlyZWN0aW9uKSA9PT0gJ2ZvcndhcmQnO1xuICAgICAgICB2YXIgaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSA9IChmZXRjaE1vcmUgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoTW9yZS5kaXJlY3Rpb24pID09PSAnYmFja3dhcmQnO1xuICAgICAgICB2YXIgb2xkUGFnZXMgPSAoKF9jb250ZXh0JHN0YXRlJGRhdGEgPSBjb250ZXh0LnN0YXRlLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRzdGF0ZSRkYXRhLnBhZ2VzKSB8fCBbXTtcbiAgICAgICAgdmFyIG9sZFBhZ2VQYXJhbXMgPSAoKF9jb250ZXh0JHN0YXRlJGRhdGEyID0gY29udGV4dC5zdGF0ZS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkc3RhdGUkZGF0YTIucGFnZVBhcmFtcykgfHwgW107XG4gICAgICAgIHZhciBuZXdQYWdlUGFyYW1zID0gb2xkUGFnZVBhcmFtcztcbiAgICAgICAgdmFyIGNhbmNlbGxlZCA9IGZhbHNlOyAvLyBHZXQgcXVlcnkgZnVuY3Rpb25cblxuICAgICAgICB2YXIgcXVlcnlGbiA9IGNvbnRleHQub3B0aW9ucy5xdWVyeUZuIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ01pc3NpbmcgcXVlcnlGbicpO1xuICAgICAgICB9OyAvLyBDcmVhdGUgZnVuY3Rpb24gdG8gZmV0Y2ggYSBwYWdlXG5cblxuICAgICAgICB2YXIgZmV0Y2hQYWdlID0gZnVuY3Rpb24gZmV0Y2hQYWdlKHBhZ2VzLCBtYW51YWwsIHBhcmFtLCBwcmV2aW91cykge1xuICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQ2FuY2VsbGVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gJ3VuZGVmaW5lZCcgJiYgIW1hbnVhbCAmJiBwYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGFnZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBxdWVyeUZuQ29udGV4dCA9IHtcbiAgICAgICAgICAgIHF1ZXJ5S2V5OiBjb250ZXh0LnF1ZXJ5S2V5LFxuICAgICAgICAgICAgcGFnZVBhcmFtOiBwYXJhbVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHF1ZXJ5Rm5SZXN1bHQgPSBxdWVyeUZuKHF1ZXJ5Rm5Db250ZXh0KTtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShxdWVyeUZuUmVzdWx0KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICBuZXdQYWdlUGFyYW1zID0gcHJldmlvdXMgPyBbcGFyYW1dLmNvbmNhdChuZXdQYWdlUGFyYW1zKSA6IFtdLmNvbmNhdChuZXdQYWdlUGFyYW1zLCBbcGFyYW1dKTtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyA/IFtwYWdlXS5jb25jYXQocGFnZXMpIDogW10uY29uY2F0KHBhZ2VzLCBbcGFnZV0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGlzQ2FuY2VsYWJsZShxdWVyeUZuUmVzdWx0KSkge1xuICAgICAgICAgICAgdmFyIHByb21pc2VBc0FueSA9IHByb21pc2U7XG4gICAgICAgICAgICBwcm9taXNlQXNBbnkuY2FuY2VsID0gcXVlcnlGblJlc3VsdC5jYW5jZWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHByb21pc2U7IC8vIEZldGNoIGZpcnN0IHBhZ2U/XG5cbiAgICAgICAgaWYgKCFvbGRQYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9taXNlID0gZmV0Y2hQYWdlKFtdKTtcbiAgICAgICAgfSAvLyBGZXRjaCBuZXh0IHBhZ2U/XG4gICAgICAgIGVsc2UgaWYgKGlzRmV0Y2hpbmdOZXh0UGFnZSkge1xuICAgICAgICAgICAgdmFyIG1hbnVhbCA9IHR5cGVvZiBwYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gbWFudWFsID8gcGFnZVBhcmFtIDogZ2V0TmV4dFBhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIG9sZFBhZ2VzKTtcbiAgICAgICAgICAgIHByb21pc2UgPSBmZXRjaFBhZ2Uob2xkUGFnZXMsIG1hbnVhbCwgcGFyYW0pO1xuICAgICAgICAgIH0gLy8gRmV0Y2ggcHJldmlvdXMgcGFnZT9cbiAgICAgICAgICBlbHNlIGlmIChpc0ZldGNoaW5nUHJldmlvdXNQYWdlKSB7XG4gICAgICAgICAgICAgIHZhciBfbWFudWFsID0gdHlwZW9mIHBhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgICAgICAgICAgdmFyIF9wYXJhbSA9IF9tYW51YWwgPyBwYWdlUGFyYW0gOiBnZXRQcmV2aW91c1BhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIG9sZFBhZ2VzKTtcblxuICAgICAgICAgICAgICBwcm9taXNlID0gZmV0Y2hQYWdlKG9sZFBhZ2VzLCBfbWFudWFsLCBfcGFyYW0sIHRydWUpO1xuICAgICAgICAgICAgfSAvLyBSZWZldGNoIHBhZ2VzXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgbmV3UGFnZVBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgdmFyIG1hbnVhbCA9IHR5cGVvZiBjb250ZXh0Lm9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbSA9PT0gJ3VuZGVmaW5lZCc7IC8vIEZldGNoIGZpcnN0IHBhZ2VcblxuICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IGZldGNoUGFnZShbXSwgbWFudWFsLCBvbGRQYWdlUGFyYW1zWzBdKTsgLy8gRmV0Y2ggcmVtYWluaW5nIHBhZ2VzXG5cbiAgICAgICAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAocGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW0gPSBtYW51YWwgPyBvbGRQYWdlUGFyYW1zW2ldIDogZ2V0TmV4dFBhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIHBhZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQYWdlKHBhZ2VzLCBtYW51YWwsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG9sZFBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb29wKGkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICB2YXIgZmluYWxQcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwYWdlcykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdlczogcGFnZXMsXG4gICAgICAgICAgICBwYWdlUGFyYW1zOiBuZXdQYWdlUGFyYW1zXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmaW5hbFByb21pc2VBc0FueSA9IGZpbmFsUHJvbWlzZTtcblxuICAgICAgICBmaW5hbFByb21pc2VBc0FueS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FuY2VsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChpc0NhbmNlbGFibGUocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UuY2FuY2VsKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmaW5hbFByb21pc2U7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0UGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIHJldHVybiBvcHRpb25zLmdldE5leHRQYWdlUGFyYW0gPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbShwYWdlc1twYWdlcy5sZW5ndGggLSAxXSwgcGFnZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFByZXZpb3VzUGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIHJldHVybiBvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtKHBhZ2VzWzBdLCBwYWdlcyk7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGVyZSBpcyBhIG5leHQgcGFnZS5cbiAqIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgaXQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc05leHRQYWdlKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIGlmIChvcHRpb25zLmdldE5leHRQYWdlUGFyYW0gJiYgQXJyYXkuaXNBcnJheShwYWdlcykpIHtcbiAgICB2YXIgbmV4dFBhZ2VQYXJhbSA9IGdldE5leHRQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpO1xuICAgIHJldHVybiB0eXBlb2YgbmV4dFBhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmV4dFBhZ2VQYXJhbSAhPT0gbnVsbCAmJiBuZXh0UGFnZVBhcmFtICE9PSBmYWxzZTtcbiAgfVxufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBwcmV2aW91cyBwYWdlLlxuICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBpdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJldmlvdXNQYWdlKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIGlmIChvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtICYmIEFycmF5LmlzQXJyYXkocGFnZXMpKSB7XG4gICAgdmFyIHByZXZpb3VzUGFnZVBhcmFtID0gZ2V0UHJldmlvdXNQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpO1xuICAgIHJldHVybiB0eXBlb2YgcHJldmlvdXNQYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnICYmIHByZXZpb3VzUGFnZVBhcmFtICE9PSBudWxsICYmIHByZXZpb3VzUGFnZVBhcmFtICE9PSBmYWxzZTtcbiAgfVxufSIsICJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGhhc2hRdWVyeUtleSwgbm9vcCwgcGFyc2VGaWx0ZXJBcmdzLCBwYXJzZVF1ZXJ5QXJncywgcGFydGlhbE1hdGNoS2V5LCBoYXNoUXVlcnlLZXlCeU9wdGlvbnMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFF1ZXJ5Q2FjaGUgfSBmcm9tICcuL3F1ZXJ5Q2FjaGUnO1xuaW1wb3J0IHsgTXV0YXRpb25DYWNoZSB9IGZyb20gJy4vbXV0YXRpb25DYWNoZSc7XG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlcic7XG5pbXBvcnQgeyBvbmxpbmVNYW5hZ2VyIH0gZnJvbSAnLi9vbmxpbmVNYW5hZ2VyJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgaW5maW5pdGVRdWVyeUJlaGF2aW9yIH0gZnJvbSAnLi9pbmZpbml0ZVF1ZXJ5QmVoYXZpb3InOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeUNsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1ZXJ5Q2xpZW50KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5xdWVyeUNhY2hlID0gY29uZmlnLnF1ZXJ5Q2FjaGUgfHwgbmV3IFF1ZXJ5Q2FjaGUoKTtcbiAgICB0aGlzLm11dGF0aW9uQ2FjaGUgPSBjb25maWcubXV0YXRpb25DYWNoZSB8fCBuZXcgTXV0YXRpb25DYWNoZSgpO1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBjb25maWcuZGVmYXVsdE9wdGlvbnMgfHwge307XG4gICAgdGhpcy5xdWVyeURlZmF1bHRzID0gW107XG4gICAgdGhpcy5tdXRhdGlvbkRlZmF1bHRzID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlDbGllbnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5tb3VudCA9IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLnVuc3Vic2NyaWJlRm9jdXMgPSBmb2N1c01hbmFnZXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgJiYgb25saW5lTWFuYWdlci5pc09ubGluZSgpKSB7XG4gICAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUub25Gb2N1cygpO1xuXG4gICAgICAgIF90aGlzLnF1ZXJ5Q2FjaGUub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudW5zdWJzY3JpYmVPbmxpbmUgPSBvbmxpbmVNYW5hZ2VyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpICYmIG9ubGluZU1hbmFnZXIuaXNPbmxpbmUoKSkge1xuICAgICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLm9uT25saW5lKCk7XG5cbiAgICAgICAgX3RoaXMucXVlcnlDYWNoZS5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by51bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICB2YXIgX3RoaXMkdW5zdWJzY3JpYmVGb2N1LCBfdGhpcyR1bnN1YnNjcmliZU9ubGk7XG5cbiAgICAoX3RoaXMkdW5zdWJzY3JpYmVGb2N1ID0gdGhpcy51bnN1YnNjcmliZUZvY3VzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkdW5zdWJzY3JpYmVGb2N1LmNhbGwodGhpcyk7XG4gICAgKF90aGlzJHVuc3Vic2NyaWJlT25saSA9IHRoaXMudW5zdWJzY3JpYmVPbmxpbmUpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR1bnN1YnNjcmliZU9ubGkuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uaXNGZXRjaGluZyA9IGZ1bmN0aW9uIGlzRmV0Y2hpbmcoYXJnMSwgYXJnMikge1xuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnc1swXTtcblxuICAgIGZpbHRlcnMuZmV0Y2hpbmcgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5sZW5ndGg7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uIGdldFF1ZXJ5RGF0YShxdWVyeUtleSwgZmlsdGVycykge1xuICAgIHZhciBfdGhpcyRxdWVyeUNhY2hlJGZpbmQ7XG5cbiAgICByZXR1cm4gKF90aGlzJHF1ZXJ5Q2FjaGUkZmluZCA9IHRoaXMucXVlcnlDYWNoZS5maW5kKHF1ZXJ5S2V5LCBmaWx0ZXJzKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHF1ZXJ5Q2FjaGUkZmluZC5zdGF0ZS5kYXRhO1xuICB9O1xuXG4gIF9wcm90by5zZXRRdWVyeURhdGEgPSBmdW5jdGlvbiBzZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKHF1ZXJ5S2V5KTtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhwYXJzZWRPcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5xdWVyeUNhY2hlLmJ1aWxkKHRoaXMsIGRlZmF1bHRlZE9wdGlvbnMpLnNldERhdGEodXBkYXRlciwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5U3RhdGUgPSBmdW5jdGlvbiBnZXRRdWVyeVN0YXRlKHF1ZXJ5S2V5LCBmaWx0ZXJzKSB7XG4gICAgdmFyIF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDI7XG5cbiAgICByZXR1cm4gKF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDIgPSB0aGlzLnF1ZXJ5Q2FjaGUuZmluZChxdWVyeUtleSwgZmlsdGVycykpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRxdWVyeUNhY2hlJGZpbmQyLnN0YXRlO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVRdWVyaWVzID0gZnVuY3Rpb24gcmVtb3ZlUXVlcmllcyhhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MyID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczJbMF07XG5cbiAgICB2YXIgcXVlcnlDYWNoZSA9IHRoaXMucXVlcnlDYWNoZTtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeUNhY2hlLnJlbW92ZShxdWVyeSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzZXRRdWVyaWVzID0gZnVuY3Rpb24gcmVzZXRRdWVyaWVzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzMyA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3MzWzBdLFxuICAgICAgICBvcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczNbMV07XG5cbiAgICB2YXIgcXVlcnlDYWNoZSA9IHRoaXMucXVlcnlDYWNoZTtcblxuICAgIHZhciByZWZldGNoRmlsdGVycyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJzLCB7XG4gICAgICBhY3RpdmU6IHRydWVcbiAgICB9KTtcblxuICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXMyLnJlZmV0Y2hRdWVyaWVzKHJlZmV0Y2hGaWx0ZXJzLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsUXVlcmllcyA9IGZ1bmN0aW9uIGNhbmNlbFF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3M0ID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczRbMF0sXG4gICAgICAgIF9wYXJzZUZpbHRlckFyZ3M0JCA9IF9wYXJzZUZpbHRlckFyZ3M0WzFdLFxuICAgICAgICBjYW5jZWxPcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczQkID09PSB2b2lkIDAgPyB7fSA6IF9wYXJzZUZpbHRlckFyZ3M0JDtcblxuICAgIGlmICh0eXBlb2YgY2FuY2VsT3B0aW9ucy5yZXZlcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYW5jZWxPcHRpb25zLnJldmVydCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2VzID0gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMzLnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5tYXAoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBxdWVyeS5jYW5jZWwoY2FuY2VsT3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGVRdWVyaWVzID0gZnVuY3Rpb24gaW52YWxpZGF0ZVF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfZmlsdGVycyRyZWZldGNoQWN0aXYsXG4gICAgICAgIF9maWx0ZXJzJHJlZmV0Y2hJbmFjdCxcbiAgICAgICAgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzNSA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3M1WzBdLFxuICAgICAgICBvcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczVbMV07XG5cbiAgICB2YXIgcmVmZXRjaEZpbHRlcnMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVycywge1xuICAgICAgYWN0aXZlOiAoX2ZpbHRlcnMkcmVmZXRjaEFjdGl2ID0gZmlsdGVycy5yZWZldGNoQWN0aXZlKSAhPSBudWxsID8gX2ZpbHRlcnMkcmVmZXRjaEFjdGl2IDogdHJ1ZSxcbiAgICAgIGluYWN0aXZlOiAoX2ZpbHRlcnMkcmVmZXRjaEluYWN0ID0gZmlsdGVycy5yZWZldGNoSW5hY3RpdmUpICE9IG51bGwgPyBfZmlsdGVycyRyZWZldGNoSW5hY3QgOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM0LnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5pbnZhbGlkYXRlKCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzNC5yZWZldGNoUXVlcmllcyhyZWZldGNoRmlsdGVycywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmV0Y2hRdWVyaWVzID0gZnVuY3Rpb24gcmVmZXRjaFF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3M2ID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczZbMF0sXG4gICAgICAgIG9wdGlvbnMgPSBfcGFyc2VGaWx0ZXJBcmdzNlsxXTtcblxuICAgIHZhciBwcm9taXNlcyA9IG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNS5xdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykubWFwKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICByZXR1cm4gcXVlcnkuZmV0Y2goKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obm9vcCk7XG5cbiAgICBpZiAoIShvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnRocm93T25FcnJvcikpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by5mZXRjaFF1ZXJ5ID0gZnVuY3Rpb24gZmV0Y2hRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHBhcnNlZE9wdGlvbnMgPSBwYXJzZVF1ZXJ5QXJncyhhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhwYXJzZWRPcHRpb25zKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Rhbm5lcmxpbnNsZXkvcmVhY3QtcXVlcnkvaXNzdWVzLzY1MlxuXG4gICAgaWYgKHR5cGVvZiBkZWZhdWx0ZWRPcHRpb25zLnJldHJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5yZXRyeSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnlDYWNoZS5idWlsZCh0aGlzLCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICByZXR1cm4gcXVlcnkuaXNTdGFsZUJ5VGltZShkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSkgPyBxdWVyeS5mZXRjaChkZWZhdWx0ZWRPcHRpb25zKSA6IFByb21pc2UucmVzb2x2ZShxdWVyeS5zdGF0ZS5kYXRhKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlZmV0Y2hRdWVyeSA9IGZ1bmN0aW9uIHByZWZldGNoUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiB0aGlzLmZldGNoUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2hJbmZpbml0ZVF1ZXJ5ID0gZnVuY3Rpb24gZmV0Y2hJbmZpbml0ZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIHBhcnNlZE9wdGlvbnMuYmVoYXZpb3IgPSBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaFF1ZXJ5KHBhcnNlZE9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5wcmVmZXRjaEluZmluaXRlUXVlcnkgPSBmdW5jdGlvbiBwcmVmZXRjaEluZmluaXRlUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHJldHVybiB0aGlzLmZldGNoSW5maW5pdGVRdWVyeShhcmcxLCBhcmcyLCBhcmczKS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxNdXRhdGlvbnMgPSBmdW5jdGlvbiBjYW5jZWxNdXRhdGlvbnMoKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZXMgPSBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczYubXV0YXRpb25DYWNoZS5nZXRBbGwoKS5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtdXRhdGlvbi5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lUGF1c2VkTXV0YXRpb25zID0gZnVuY3Rpb24gcmVzdW1lUGF1c2VkTXV0YXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmdldE11dGF0aW9uQ2FjaGUoKS5yZXN1bWVQYXVzZWRNdXRhdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZU11dGF0aW9uID0gZnVuY3Rpb24gZXhlY3V0ZU11dGF0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbkNhY2hlLmJ1aWxkKHRoaXMsIG9wdGlvbnMpLmV4ZWN1dGUoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcnlDYWNoZSA9IGZ1bmN0aW9uIGdldFF1ZXJ5Q2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlDYWNoZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TXV0YXRpb25DYWNoZSA9IGZ1bmN0aW9uIGdldE11dGF0aW9uQ2FjaGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25DYWNoZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0T3B0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLnNldFF1ZXJ5RGVmYXVsdHMgPSBmdW5jdGlvbiBzZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucXVlcnlEZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaGFzaFF1ZXJ5S2V5KHF1ZXJ5S2V5KSA9PT0gaGFzaFF1ZXJ5S2V5KHgucXVlcnlLZXkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWVyeURlZmF1bHRzLnB1c2goe1xuICAgICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5RGVmYXVsdHMgPSBmdW5jdGlvbiBnZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5KSB7XG4gICAgdmFyIF90aGlzJHF1ZXJ5RGVmYXVsdHMkZjtcblxuICAgIHJldHVybiBxdWVyeUtleSA/IChfdGhpcyRxdWVyeURlZmF1bHRzJGYgPSB0aGlzLnF1ZXJ5RGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHBhcnRpYWxNYXRjaEtleShxdWVyeUtleSwgeC5xdWVyeUtleSk7XG4gICAgfSkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRxdWVyeURlZmF1bHRzJGYuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLnNldE11dGF0aW9uRGVmYXVsdHMgPSBmdW5jdGlvbiBzZXRNdXRhdGlvbkRlZmF1bHRzKG11dGF0aW9uS2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMubXV0YXRpb25EZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaGFzaFF1ZXJ5S2V5KG11dGF0aW9uS2V5KSA9PT0gaGFzaFF1ZXJ5S2V5KHgubXV0YXRpb25LZXkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0LmRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tdXRhdGlvbkRlZmF1bHRzLnB1c2goe1xuICAgICAgICBtdXRhdGlvbktleTogbXV0YXRpb25LZXksXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE11dGF0aW9uRGVmYXVsdHMgPSBmdW5jdGlvbiBnZXRNdXRhdGlvbkRlZmF1bHRzKG11dGF0aW9uS2V5KSB7XG4gICAgdmFyIF90aGlzJG11dGF0aW9uRGVmYXVsdDtcblxuICAgIHJldHVybiBtdXRhdGlvbktleSA/IChfdGhpcyRtdXRhdGlvbkRlZmF1bHQgPSB0aGlzLm11dGF0aW9uRGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHBhcnRpYWxNYXRjaEtleShtdXRhdGlvbktleSwgeC5tdXRhdGlvbktleSk7XG4gICAgfSkpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRtdXRhdGlvbkRlZmF1bHQuZGVmYXVsdE9wdGlvbnMgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmRlZmF1bHRRdWVyeU9wdGlvbnMgPSBmdW5jdGlvbiBkZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5fZGVmYXVsdGVkKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IF9leHRlbmRzKHt9LCB0aGlzLmRlZmF1bHRPcHRpb25zLnF1ZXJpZXMsIHRoaXMuZ2V0UXVlcnlEZWZhdWx0cyhvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5S2V5KSwgb3B0aW9ucywge1xuICAgICAgX2RlZmF1bHRlZDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKCFkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5SGFzaCAmJiBkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5S2V5KSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5SGFzaCA9IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhkZWZhdWx0ZWRPcHRpb25zLnF1ZXJ5S2V5LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdGVkT3B0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5kZWZhdWx0TXV0YXRpb25PcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdE11dGF0aW9uT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuX2RlZmF1bHRlZCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLmRlZmF1bHRPcHRpb25zLm11dGF0aW9ucywgdGhpcy5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubXV0YXRpb25LZXkpLCBvcHRpb25zLCB7XG4gICAgICBfZGVmYXVsdGVkOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5xdWVyeUNhY2hlLmNsZWFyKCk7XG4gICAgdGhpcy5tdXRhdGlvbkNhY2hlLmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5Q2xpZW50O1xufSgpOyIsICJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIsIGlzVmFsaWRUaW1lb3V0LCBub29wLCByZXBsYWNlRXF1YWxEZWVwLCBzaGFsbG93RXF1YWxPYmplY3RzLCB0aW1lVW50aWxTdGFsZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlcic7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5leHBvcnQgdmFyIFF1ZXJ5T2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoUXVlcnlPYnNlcnZlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gUXVlcnlPYnNlcnZlcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBfdGhpcy50cmFja2VkUHJvcHMgPSBbXTtcblxuICAgIF90aGlzLmJpbmRNZXRob2RzKCk7XG5cbiAgICBfdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFF1ZXJ5T2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5iaW5kTWV0aG9kcyA9IGZ1bmN0aW9uIGJpbmRNZXRob2RzKCkge1xuICAgIHRoaXMucmVtb3ZlID0gdGhpcy5yZW1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZmV0Y2ggPSB0aGlzLnJlZmV0Y2guYmluZCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ub25TdWJzY3JpYmUgPSBmdW5jdGlvbiBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLmN1cnJlbnRRdWVyeS5hZGRPYnNlcnZlcih0aGlzKTtcblxuICAgICAgaWYgKHNob3VsZEZldGNoT25Nb3VudCh0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zKSkge1xuICAgICAgICB0aGlzLmV4ZWN1dGVGZXRjaCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25VbnN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2hvdWxkRmV0Y2hPblJlY29ubmVjdCA9IGZ1bmN0aW9uIHNob3VsZEZldGNoT25SZWNvbm5lY3QoKSB7XG4gICAgcmV0dXJuIF9zaG91bGRGZXRjaE9uUmVjb25uZWN0KHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5zaG91bGRGZXRjaE9uV2luZG93Rm9jdXMgPSBmdW5jdGlvbiBzaG91bGRGZXRjaE9uV2luZG93Rm9jdXMoKSB7XG4gICAgcmV0dXJuIF9zaG91bGRGZXRjaE9uV2luZG93Rm9jdXModGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jbGVhclRpbWVycygpO1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5LnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5zZXRPcHRpb25zID0gZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zLCBub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIHByZXZPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHZhciBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlbmFibGVkIHRvIGJlIGEgYm9vbGVhbicpO1xuICAgIH0gLy8gS2VlcCBwcmV2aW91cyBxdWVyeSBrZXkgaWYgdGhlIHVzZXIgZG9lcyBub3Qgc3VwcGx5IG9uZVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5xdWVyeUtleSkge1xuICAgICAgdGhpcy5vcHRpb25zLnF1ZXJ5S2V5ID0gcHJldk9wdGlvbnMucXVlcnlLZXk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVRdWVyeSgpO1xuICAgIHZhciBtb3VudGVkID0gdGhpcy5oYXNMaXN0ZW5lcnMoKTsgLy8gRmV0Y2ggaWYgdGhlcmUgYXJlIHN1YnNjcmliZXJzXG5cbiAgICBpZiAobW91bnRlZCAmJiBzaG91bGRGZXRjaE9wdGlvbmFsbHkodGhpcy5jdXJyZW50UXVlcnksIHByZXZRdWVyeSwgdGhpcy5vcHRpb25zLCBwcmV2T3B0aW9ucykpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUZldGNoKCk7XG4gICAgfSAvLyBVcGRhdGUgcmVzdWx0XG5cblxuICAgIHRoaXMudXBkYXRlUmVzdWx0KG5vdGlmeU9wdGlvbnMpOyAvLyBVcGRhdGUgc3RhbGUgaW50ZXJ2YWwgaWYgbmVlZGVkXG5cbiAgICBpZiAobW91bnRlZCAmJiAodGhpcy5jdXJyZW50UXVlcnkgIT09IHByZXZRdWVyeSB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gcHJldk9wdGlvbnMuZW5hYmxlZCB8fCB0aGlzLm9wdGlvbnMuc3RhbGVUaW1lICE9PSBwcmV2T3B0aW9ucy5zdGFsZVRpbWUpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YWxlVGltZW91dCgpO1xuICAgIH0gLy8gVXBkYXRlIHJlZmV0Y2ggaW50ZXJ2YWwgaWYgbmVlZGVkXG5cblxuICAgIGlmIChtb3VudGVkICYmICh0aGlzLmN1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwgIT09IHByZXZPcHRpb25zLnJlZmV0Y2hJbnRlcnZhbCkpIHtcbiAgICAgIHRoaXMudXBkYXRlUmVmZXRjaEludGVydmFsKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRPcHRpbWlzdGljUmVzdWx0ID0gZnVuY3Rpb24gZ2V0T3B0aW1pc3RpY1Jlc3VsdChvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXN1bHQocXVlcnksIGRlZmF1bHRlZE9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5nZXRDdXJyZW50UmVzdWx0ID0gZnVuY3Rpb24gZ2V0Q3VycmVudFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by50cmFja1Jlc3VsdCA9IGZ1bmN0aW9uIHRyYWNrUmVzdWx0KHJlc3VsdCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHRyYWNrZWRSZXN1bHQgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRyYWNrZWRSZXN1bHQsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB2YXIgdHlwZWRLZXkgPSBrZXk7XG5cbiAgICAgICAgICBpZiAoIV90aGlzMi50cmFja2VkUHJvcHMuaW5jbHVkZXModHlwZWRLZXkpKSB7XG4gICAgICAgICAgICBfdGhpczIudHJhY2tlZFByb3BzLnB1c2godHlwZWRLZXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHRbdHlwZWRLZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhY2tlZFJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TmV4dFJlc3VsdCA9IGZ1bmN0aW9uIGdldE5leHRSZXN1bHQob3B0aW9ucykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciB1bnN1YnNjcmliZSA9IF90aGlzMy5zdWJzY3JpYmUoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAoIXJlc3VsdC5pc0ZldGNoaW5nKSB7XG4gICAgICAgICAgdW5zdWJzY3JpYmUoKTtcblxuICAgICAgICAgIGlmIChyZXN1bHQuaXNFcnJvciAmJiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy50aHJvd09uRXJyb3IpKSB7XG4gICAgICAgICAgICByZWplY3QocmVzdWx0LmVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEN1cnJlbnRRdWVyeSA9IGZ1bmN0aW9uIGdldEN1cnJlbnRRdWVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UXVlcnk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkucmVtb3ZlKHRoaXMuY3VycmVudFF1ZXJ5KTtcbiAgfTtcblxuICBfcHJvdG8ucmVmZXRjaCA9IGZ1bmN0aW9uIHJlZmV0Y2gob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmZldGNoKG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5mZXRjaE9wdGltaXN0aWMgPSBmdW5jdGlvbiBmZXRjaE9wdGltaXN0aWMob3B0aW9ucykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICByZXR1cm4gcXVlcnkuZmV0Y2goKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczQuY3JlYXRlUmVzdWx0KHF1ZXJ5LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaChmZXRjaE9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVGZXRjaChmZXRjaE9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1LnVwZGF0ZVJlc3VsdCgpO1xuXG4gICAgICByZXR1cm4gX3RoaXM1LmN1cnJlbnRSZXN1bHQ7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGVGZXRjaCA9IGZ1bmN0aW9uIGV4ZWN1dGVGZXRjaChmZXRjaE9wdGlvbnMpIHtcbiAgICAvLyBNYWtlIHN1cmUgd2UgcmVmZXJlbmNlIHRoZSBsYXRlc3QgcXVlcnkgYXMgdGhlIGN1cnJlbnQgb25lIG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkXG4gICAgdGhpcy51cGRhdGVRdWVyeSgpOyAvLyBGZXRjaFxuXG4gICAgdmFyIHByb21pc2UgPSB0aGlzLmN1cnJlbnRRdWVyeS5mZXRjaCh0aGlzLm9wdGlvbnMsIGZldGNoT3B0aW9ucyk7XG5cbiAgICBpZiAoIShmZXRjaE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoT3B0aW9ucy50aHJvd09uRXJyb3IpKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS5jYXRjaChub29wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhbGVUaW1lb3V0ID0gZnVuY3Rpb24gdXBkYXRlU3RhbGVUaW1lb3V0KCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdGhpcy5jbGVhclN0YWxlVGltZW91dCgpO1xuXG4gICAgaWYgKGlzU2VydmVyIHx8IHRoaXMuY3VycmVudFJlc3VsdC5pc1N0YWxlIHx8ICFpc1ZhbGlkVGltZW91dCh0aGlzLm9wdGlvbnMuc3RhbGVUaW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0aW1lID0gdGltZVVudGlsU3RhbGUodGhpcy5jdXJyZW50UmVzdWx0LmRhdGFVcGRhdGVkQXQsIHRoaXMub3B0aW9ucy5zdGFsZVRpbWUpOyAvLyBUaGUgdGltZW91dCBpcyBzb21ldGltZXMgdHJpZ2dlcmVkIDEgbXMgYmVmb3JlIHRoZSBzdGFsZSB0aW1lIGV4cGlyYXRpb24uXG4gICAgLy8gVG8gbWl0aWdhdGUgdGhpcyBpc3N1ZSB3ZSBhbHdheXMgYWRkIDEgbXMgdG8gdGhlIHRpbWVvdXQuXG5cbiAgICB2YXIgdGltZW91dCA9IHRpbWUgKyAxO1xuICAgIHRoaXMuc3RhbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXM2LmN1cnJlbnRSZXN1bHQuaXNTdGFsZSkge1xuICAgICAgICBfdGhpczYudXBkYXRlUmVzdWx0KCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dCk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCA9IGZ1bmN0aW9uIHVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCgpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJSZWZldGNoSW50ZXJ2YWwoKTtcblxuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgIWlzVmFsaWRUaW1lb3V0KHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZWZldGNoSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczcub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWxJbkJhY2tncm91bmQgfHwgZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpKSB7XG4gICAgICAgIF90aGlzNy5leGVjdXRlRmV0Y2goKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlVGltZXJzID0gZnVuY3Rpb24gdXBkYXRlVGltZXJzKCkge1xuICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgdGhpcy51cGRhdGVSZWZldGNoSW50ZXJ2YWwoKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJUaW1lcnMgPSBmdW5jdGlvbiBjbGVhclRpbWVycygpIHtcbiAgICB0aGlzLmNsZWFyU3RhbGVUaW1lb3V0KCk7XG4gICAgdGhpcy5jbGVhclJlZmV0Y2hJbnRlcnZhbCgpO1xuICB9O1xuXG4gIF9wcm90by5jbGVhclN0YWxlVGltZW91dCA9IGZ1bmN0aW9uIGNsZWFyU3RhbGVUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YWxlVGltZW91dElkKTtcbiAgICB0aGlzLnN0YWxlVGltZW91dElkID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by5jbGVhclJlZmV0Y2hJbnRlcnZhbCA9IGZ1bmN0aW9uIGNsZWFyUmVmZXRjaEludGVydmFsKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZldGNoSW50ZXJ2YWxJZCk7XG4gICAgdGhpcy5yZWZldGNoSW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8uY3JlYXRlUmVzdWx0ID0gZnVuY3Rpb24gY3JlYXRlUmVzdWx0KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHZhciBwcmV2T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICB2YXIgcHJldlJlc3VsdCA9IHRoaXMuY3VycmVudFJlc3VsdDtcbiAgICB2YXIgcHJldlJlc3VsdFN0YXRlID0gdGhpcy5jdXJyZW50UmVzdWx0U3RhdGU7XG4gICAgdmFyIHByZXZSZXN1bHRPcHRpb25zID0gdGhpcy5jdXJyZW50UmVzdWx0T3B0aW9ucztcbiAgICB2YXIgcXVlcnlDaGFuZ2UgPSBxdWVyeSAhPT0gcHJldlF1ZXJ5O1xuICAgIHZhciBxdWVyeUluaXRpYWxTdGF0ZSA9IHF1ZXJ5Q2hhbmdlID8gcXVlcnkuc3RhdGUgOiB0aGlzLmN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZTtcbiAgICB2YXIgcHJldlF1ZXJ5UmVzdWx0ID0gcXVlcnlDaGFuZ2UgPyB0aGlzLmN1cnJlbnRSZXN1bHQgOiB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQ7XG4gICAgdmFyIHN0YXRlID0gcXVlcnkuc3RhdGU7XG4gICAgdmFyIGRhdGFVcGRhdGVkQXQgPSBzdGF0ZS5kYXRhVXBkYXRlZEF0LFxuICAgICAgICBlcnJvciA9IHN0YXRlLmVycm9yLFxuICAgICAgICBlcnJvclVwZGF0ZWRBdCA9IHN0YXRlLmVycm9yVXBkYXRlZEF0LFxuICAgICAgICBpc0ZldGNoaW5nID0gc3RhdGUuaXNGZXRjaGluZyxcbiAgICAgICAgc3RhdHVzID0gc3RhdGUuc3RhdHVzO1xuICAgIHZhciBpc1ByZXZpb3VzRGF0YSA9IGZhbHNlO1xuICAgIHZhciBpc1BsYWNlaG9sZGVyRGF0YSA9IGZhbHNlO1xuICAgIHZhciBkYXRhOyAvLyBPcHRpbWlzdGljYWxseSBzZXQgcmVzdWx0IGluIGZldGNoaW5nIHN0YXRlIGlmIG5lZWRlZFxuXG4gICAgaWYgKG9wdGlvbnMub3B0aW1pc3RpY1Jlc3VsdHMpIHtcbiAgICAgIHZhciBtb3VudGVkID0gdGhpcy5oYXNMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBmZXRjaE9uTW91bnQgPSAhbW91bnRlZCAmJiBzaG91bGRGZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpO1xuICAgICAgdmFyIGZldGNoT3B0aW9uYWxseSA9IG1vdW50ZWQgJiYgc2hvdWxkRmV0Y2hPcHRpb25hbGx5KHF1ZXJ5LCBwcmV2UXVlcnksIG9wdGlvbnMsIHByZXZPcHRpb25zKTtcblxuICAgICAgaWYgKGZldGNoT25Nb3VudCB8fCBmZXRjaE9wdGlvbmFsbHkpIHtcbiAgICAgICAgaXNGZXRjaGluZyA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFkYXRhVXBkYXRlZEF0KSB7XG4gICAgICAgICAgc3RhdHVzID0gJ2xvYWRpbmcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBLZWVwIHByZXZpb3VzIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmIChvcHRpb25zLmtlZXBQcmV2aW91c0RhdGEgJiYgIXN0YXRlLmRhdGFVcGRhdGVDb3VudCAmJiAocHJldlF1ZXJ5UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnlSZXN1bHQuaXNTdWNjZXNzKSAmJiBzdGF0dXMgIT09ICdlcnJvcicpIHtcbiAgICAgIGRhdGEgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YTtcbiAgICAgIGRhdGFVcGRhdGVkQXQgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YVVwZGF0ZWRBdDtcbiAgICAgIHN0YXR1cyA9IHByZXZRdWVyeVJlc3VsdC5zdGF0dXM7XG4gICAgICBpc1ByZXZpb3VzRGF0YSA9IHRydWU7XG4gICAgfSAvLyBTZWxlY3QgZGF0YSBpZiBuZWVkZWRcbiAgICBlbHNlIGlmIChvcHRpb25zLnNlbGVjdCAmJiB0eXBlb2Ygc3RhdGUuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTWVtb2l6ZSBzZWxlY3QgcmVzdWx0XG4gICAgICAgIGlmIChwcmV2UmVzdWx0ICYmIHN0YXRlLmRhdGEgPT09IChwcmV2UmVzdWx0U3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHRTdGF0ZS5kYXRhKSAmJiBvcHRpb25zLnNlbGVjdCA9PT0gKHByZXZSZXN1bHRPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0T3B0aW9ucy5zZWxlY3QpKSB7XG4gICAgICAgICAgZGF0YSA9IHByZXZSZXN1bHQuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YSA9IG9wdGlvbnMuc2VsZWN0KHN0YXRlLmRhdGEpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgZGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChzZWxlY3RFcnJvcikge1xuICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3Ioc2VsZWN0RXJyb3IpO1xuICAgICAgICAgICAgZXJyb3IgPSBzZWxlY3RFcnJvcjtcbiAgICAgICAgICAgIGVycm9yVXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIFVzZSBxdWVyeSBkYXRhXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gc3RhdGUuZGF0YTtcbiAgICAgICAgfSAvLyBTaG93IHBsYWNlaG9sZGVyIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyAmJiBzdGF0dXMgPT09ICdsb2FkaW5nJykge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyRGF0YTsgLy8gTWVtb2l6ZSBwbGFjZWhvbGRlciBkYXRhXG5cbiAgICAgIGlmICgocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5pc1BsYWNlaG9sZGVyRGF0YSkgJiYgb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgPT09IChwcmV2UmVzdWx0T3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdE9wdGlvbnMucGxhY2Vob2xkZXJEYXRhKSkge1xuICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSBwcmV2UmVzdWx0LmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSgpIDogb3B0aW9ucy5wbGFjZWhvbGRlckRhdGE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcGxhY2Vob2xkZXJEYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgIGRhdGEgPSBwbGFjZWhvbGRlckRhdGE7XG4gICAgICAgIGlzUGxhY2Vob2xkZXJEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICBpc0xvYWRpbmc6IHN0YXR1cyA9PT0gJ2xvYWRpbmcnLFxuICAgICAgaXNTdWNjZXNzOiBzdGF0dXMgPT09ICdzdWNjZXNzJyxcbiAgICAgIGlzRXJyb3I6IHN0YXR1cyA9PT0gJ2Vycm9yJyxcbiAgICAgIGlzSWRsZTogc3RhdHVzID09PSAnaWRsZScsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgZGF0YVVwZGF0ZWRBdDogZGF0YVVwZGF0ZWRBdCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGVycm9yVXBkYXRlZEF0OiBlcnJvclVwZGF0ZWRBdCxcbiAgICAgIGZhaWx1cmVDb3VudDogc3RhdGUuZmV0Y2hGYWlsdXJlQ291bnQsXG4gICAgICBpc0ZldGNoZWQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCA+IDAgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IDAsXG4gICAgICBpc0ZldGNoZWRBZnRlck1vdW50OiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgPiBxdWVyeUluaXRpYWxTdGF0ZS5kYXRhVXBkYXRlQ291bnQgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IHF1ZXJ5SW5pdGlhbFN0YXRlLmVycm9yVXBkYXRlQ291bnQsXG4gICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nLFxuICAgICAgaXNMb2FkaW5nRXJyb3I6IHN0YXR1cyA9PT0gJ2Vycm9yJyAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ID09PSAwLFxuICAgICAgaXNQbGFjZWhvbGRlckRhdGE6IGlzUGxhY2Vob2xkZXJEYXRhLFxuICAgICAgaXNQcmV2aW91c0RhdGE6IGlzUHJldmlvdXNEYXRhLFxuICAgICAgaXNSZWZldGNoRXJyb3I6IHN0YXR1cyA9PT0gJ2Vycm9yJyAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ICE9PSAwLFxuICAgICAgaXNTdGFsZTogaXNTdGFsZShxdWVyeSwgb3B0aW9ucyksXG4gICAgICByZWZldGNoOiB0aGlzLnJlZmV0Y2gsXG4gICAgICByZW1vdmU6IHRoaXMucmVtb3ZlXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5zaG91bGROb3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzaG91bGROb3RpZnlMaXN0ZW5lcnMocmVzdWx0LCBwcmV2UmVzdWx0KSB7XG4gICAgaWYgKCFwcmV2UmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ID09PSBwcmV2UmVzdWx0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHMgPSBfdGhpcyRvcHRpb25zLm5vdGlmeU9uQ2hhbmdlUHJvcHMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zID0gX3RoaXMkb3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucztcblxuICAgIGlmICghbm90aWZ5T25DaGFuZ2VQcm9wcyAmJiAhbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgJiYgIXRoaXMudHJhY2tlZFByb3BzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGluY2x1ZGVkUHJvcHMgPSBub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgPyB0aGlzLnRyYWNrZWRQcm9wcyA6IG5vdGlmeU9uQ2hhbmdlUHJvcHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlc3VsdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdHlwZWRLZXkgPSBrZXk7XG4gICAgICB2YXIgY2hhbmdlZCA9IHJlc3VsdFt0eXBlZEtleV0gIT09IHByZXZSZXN1bHRbdHlwZWRLZXldO1xuICAgICAgdmFyIGlzSW5jbHVkZWQgPSBpbmNsdWRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbmNsdWRlZFByb3BzLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGlzRXhjbHVkZWQgPSBub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucyA9PSBudWxsID8gdm9pZCAwIDogbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA9PT0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2hhbmdlZCAmJiAhaXNFeGNsdWRlZCAmJiAoIWluY2x1ZGVkUHJvcHMgfHwgaXNJbmNsdWRlZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVJlc3VsdCA9IGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0ID0gdGhpcy5jcmVhdGVSZXN1bHQodGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0U3RhdGUgPSB0aGlzLmN1cnJlbnRRdWVyeS5zdGF0ZTtcbiAgICB0aGlzLmN1cnJlbnRSZXN1bHRPcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBPbmx5IG5vdGlmeSBpZiBzb21ldGhpbmcgaGFzIGNoYW5nZWRcblxuICAgIGlmIChzaGFsbG93RXF1YWxPYmplY3RzKHRoaXMuY3VycmVudFJlc3VsdCwgcHJldlJlc3VsdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIERldGVybWluZSB3aGljaCBjYWxsYmFja3MgdG8gdHJpZ2dlclxuXG5cbiAgICB2YXIgZGVmYXVsdE5vdGlmeU9wdGlvbnMgPSB7XG4gICAgICBjYWNoZTogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoKG5vdGlmeU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSAhPT0gZmFsc2UgJiYgdGhpcy5zaG91bGROb3RpZnlMaXN0ZW5lcnModGhpcy5jdXJyZW50UmVzdWx0LCBwcmV2UmVzdWx0KSkge1xuICAgICAgZGVmYXVsdE5vdGlmeU9wdGlvbnMubGlzdGVuZXJzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLm5vdGlmeShfZXh0ZW5kcyh7fSwgZGVmYXVsdE5vdGlmeU9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlUXVlcnkgPSBmdW5jdGlvbiB1cGRhdGVRdWVyeSgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAocXVlcnkgPT09IHRoaXMuY3VycmVudFF1ZXJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeS5zdGF0ZTtcbiAgICB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgcHJldlF1ZXJ5ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICBxdWVyeS5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uUXVlcnlVcGRhdGUgPSBmdW5jdGlvbiBvblF1ZXJ5VXBkYXRlKGFjdGlvbikge1xuICAgIHZhciBub3RpZnlPcHRpb25zID0ge307XG5cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIG5vdGlmeU9wdGlvbnMub25FcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucyk7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdGhpcy51cGRhdGVUaW1lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEZpcnN0IHRyaWdnZXIgdGhlIGNvbmZpZ3VyYXRpb24gY2FsbGJhY2tzXG4gICAgICBpZiAobm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblN1Y2Nlc3MoX3RoaXM4LmN1cnJlbnRSZXN1bHQuZGF0YSk7XG4gICAgICAgIF90aGlzOC5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkKF90aGlzOC5jdXJyZW50UmVzdWx0LmRhdGEsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChub3RpZnlPcHRpb25zLm9uRXJyb3IpIHtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25FcnJvcihfdGhpczguY3VycmVudFJlc3VsdC5lcnJvcik7XG4gICAgICAgIF90aGlzOC5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkKHVuZGVmaW5lZCwgX3RoaXM4LmN1cnJlbnRSZXN1bHQuZXJyb3IpO1xuICAgICAgfSAvLyBUaGVuIHRyaWdnZXIgdGhlIGxpc3RlbmVyc1xuXG5cbiAgICAgIGlmIChub3RpZnlPcHRpb25zLmxpc3RlbmVycykge1xuICAgICAgICBfdGhpczgubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIoX3RoaXM4LmN1cnJlbnRSZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gVGhlbiB0aGUgY2FjaGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMuY2FjaGUpIHtcbiAgICAgICAgX3RoaXM4LmNsaWVudC5nZXRRdWVyeUNhY2hlKCkubm90aWZ5KHtcbiAgICAgICAgICBxdWVyeTogX3RoaXM4LmN1cnJlbnRRdWVyeSxcbiAgICAgICAgICB0eXBlOiAnb2JzZXJ2ZXJSZXN1bHRzVXBkYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5T2JzZXJ2ZXI7XG59KFN1YnNjcmliYWJsZSk7XG5cbmZ1bmN0aW9uIHNob3VsZExvYWRPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmICFxdWVyeS5zdGF0ZS5kYXRhVXBkYXRlZEF0ICYmICEocXVlcnkuc3RhdGUuc3RhdHVzID09PSAnZXJyb3InICYmIG9wdGlvbnMucmV0cnlPbk1vdW50ID09PSBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJlZmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmIHF1ZXJ5LnN0YXRlLmRhdGFVcGRhdGVkQXQgPiAwICYmIChvcHRpb25zLnJlZmV0Y2hPbk1vdW50ID09PSAnYWx3YXlzJyB8fCBvcHRpb25zLnJlZmV0Y2hPbk1vdW50ICE9PSBmYWxzZSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT25Nb3VudChxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gc2hvdWxkTG9hZE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHx8IHNob3VsZFJlZmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gX3Nob3VsZEZldGNoT25SZWNvbm5lY3QocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgKG9wdGlvbnMucmVmZXRjaE9uUmVjb25uZWN0ID09PSAnYWx3YXlzJyB8fCBvcHRpb25zLnJlZmV0Y2hPblJlY29ubmVjdCAhPT0gZmFsc2UgJiYgaXNTdGFsZShxdWVyeSwgb3B0aW9ucykpO1xufVxuXG5mdW5jdGlvbiBfc2hvdWxkRmV0Y2hPbldpbmRvd0ZvY3VzKHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmIChvcHRpb25zLnJlZmV0Y2hPbldpbmRvd0ZvY3VzID09PSAnYWx3YXlzJyB8fCBvcHRpb25zLnJlZmV0Y2hPbldpbmRvd0ZvY3VzICE9PSBmYWxzZSAmJiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT3B0aW9uYWxseShxdWVyeSwgcHJldlF1ZXJ5LCBvcHRpb25zLCBwcmV2T3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZSAmJiAocXVlcnkgIT09IHByZXZRdWVyeSB8fCBwcmV2T3B0aW9ucy5lbmFibGVkID09PSBmYWxzZSkgJiYgaXNTdGFsZShxdWVyeSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHF1ZXJ5LmlzU3RhbGVCeVRpbWUob3B0aW9ucy5zdGFsZVRpbWUpO1xufSIsICJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFN0YXRlIH0gZnJvbSAnLi9tdXRhdGlvbic7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbi8vIENMQVNTXG5leHBvcnQgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoTXV0YXRpb25PYnNlcnZlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gTXV0YXRpb25PYnNlcnZlcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNsaWVudCA9IGNsaWVudDtcblxuICAgIF90aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBfdGhpcy5iaW5kTWV0aG9kcygpO1xuXG4gICAgX3RoaXMudXBkYXRlUmVzdWx0KCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTXV0YXRpb25PYnNlcnZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJpbmRNZXRob2RzID0gZnVuY3Rpb24gYmluZE1ldGhvZHMoKSB7XG4gICAgdGhpcy5tdXRhdGUgPSB0aGlzLm11dGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVzZXQgPSB0aGlzLnJlc2V0LmJpbmQodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0TXV0YXRpb25PcHRpb25zKG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5vblVuc3Vic2NyaWJlID0gZnVuY3Rpb24gb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgdmFyIF90aGlzJGN1cnJlbnRNdXRhdGlvbjtcblxuICAgICAgKF90aGlzJGN1cnJlbnRNdXRhdGlvbiA9IHRoaXMuY3VycmVudE11dGF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY3VycmVudE11dGF0aW9uLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25NdXRhdGlvblVwZGF0ZSA9IGZ1bmN0aW9uIG9uTXV0YXRpb25VcGRhdGUoYWN0aW9uKSB7XG4gICAgdGhpcy51cGRhdGVSZXN1bHQoKTsgLy8gRGV0ZXJtaW5lIHdoaWNoIGNhbGxiYWNrcyB0byB0cmlnZ2VyXG5cbiAgICB2YXIgbm90aWZ5T3B0aW9ucyA9IHtcbiAgICAgIGxpc3RlbmVyczogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIG5vdGlmeU9wdGlvbnMub25FcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZnkobm90aWZ5T3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEN1cnJlbnRSZXN1bHQgPSBmdW5jdGlvbiBnZXRDdXJyZW50UmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5jdXJyZW50TXV0YXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy51cGRhdGVSZXN1bHQoKTtcbiAgICB0aGlzLm5vdGlmeSh7XG4gICAgICBsaXN0ZW5lcnM6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubXV0YXRlID0gZnVuY3Rpb24gbXV0YXRlKHZhcmlhYmxlcywgb3B0aW9ucykge1xuICAgIHRoaXMubXV0YXRlT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50TXV0YXRpb24pIHtcbiAgICAgIHRoaXMuY3VycmVudE11dGF0aW9uLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudE11dGF0aW9uID0gdGhpcy5jbGllbnQuZ2V0TXV0YXRpb25DYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLCB7XG4gICAgICB2YXJpYWJsZXM6IHR5cGVvZiB2YXJpYWJsZXMgIT09ICd1bmRlZmluZWQnID8gdmFyaWFibGVzIDogdGhpcy5vcHRpb25zLnZhcmlhYmxlc1xuICAgIH0pKTtcbiAgICB0aGlzLmN1cnJlbnRNdXRhdGlvbi5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TXV0YXRpb24uZXhlY3V0ZSgpO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVSZXN1bHQgPSBmdW5jdGlvbiB1cGRhdGVSZXN1bHQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jdXJyZW50TXV0YXRpb24gPyB0aGlzLmN1cnJlbnRNdXRhdGlvbi5zdGF0ZSA6IGdldERlZmF1bHRTdGF0ZSgpO1xuICAgIHRoaXMuY3VycmVudFJlc3VsdCA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgaXNMb2FkaW5nOiBzdGF0ZS5zdGF0dXMgPT09ICdsb2FkaW5nJyxcbiAgICAgIGlzU3VjY2Vzczogc3RhdGUuc3RhdHVzID09PSAnc3VjY2VzcycsXG4gICAgICBpc0Vycm9yOiBzdGF0ZS5zdGF0dXMgPT09ICdlcnJvcicsXG4gICAgICBpc0lkbGU6IHN0YXRlLnN0YXR1cyA9PT0gJ2lkbGUnLFxuICAgICAgbXV0YXRlOiB0aGlzLm11dGF0ZSxcbiAgICAgIHJlc2V0OiB0aGlzLnJlc2V0XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEZpcnN0IHRyaWdnZXIgdGhlIG11dGF0ZSBjYWxsYmFja3NcbiAgICAgIGlmIChfdGhpczIubXV0YXRlT3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgICBfdGhpczIubXV0YXRlT3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMi5tdXRhdGVPcHRpb25zLm9uU3VjY2VzcyhfdGhpczIuY3VycmVudFJlc3VsdC5kYXRhLCBfdGhpczIuY3VycmVudFJlc3VsdC52YXJpYWJsZXMsIF90aGlzMi5jdXJyZW50UmVzdWx0LmNvbnRleHQpO1xuICAgICAgICAgIF90aGlzMi5tdXRhdGVPcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyLm11dGF0ZU9wdGlvbnMub25TZXR0bGVkKF90aGlzMi5jdXJyZW50UmVzdWx0LmRhdGEsIG51bGwsIF90aGlzMi5jdXJyZW50UmVzdWx0LnZhcmlhYmxlcywgX3RoaXMyLmN1cnJlbnRSZXN1bHQuY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vbkVycm9yKSB7XG4gICAgICAgICAgX3RoaXMyLm11dGF0ZU9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyLm11dGF0ZU9wdGlvbnMub25FcnJvcihfdGhpczIuY3VycmVudFJlc3VsdC5lcnJvciwgX3RoaXMyLmN1cnJlbnRSZXN1bHQudmFyaWFibGVzLCBfdGhpczIuY3VycmVudFJlc3VsdC5jb250ZXh0KTtcbiAgICAgICAgICBfdGhpczIubXV0YXRlT3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMi5tdXRhdGVPcHRpb25zLm9uU2V0dGxlZCh1bmRlZmluZWQsIF90aGlzMi5jdXJyZW50UmVzdWx0LmVycm9yLCBfdGhpczIuY3VycmVudFJlc3VsdC52YXJpYWJsZXMsIF90aGlzMi5jdXJyZW50UmVzdWx0LmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFRoZW4gdHJpZ2dlciB0aGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG9wdGlvbnMubGlzdGVuZXJzKSB7XG4gICAgICAgIF90aGlzMi5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lcihfdGhpczIuY3VycmVudFJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNdXRhdGlvbk9ic2VydmVyO1xufShTdWJzY3JpYmFibGUpOyIsICJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIGRlZmF1bHRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTsgLy8gV2Ugc2hhcmUgdGhlIGZpcnN0IGFuZCBhdCBsZWFzdCBvbmVcbi8vIGluc3RhbmNlIG9mIHRoZSBjb250ZXh0IGFjcm9zcyB0aGUgd2luZG93XG4vLyB0byBlbnN1cmUgdGhhdCBpZiBSZWFjdCBRdWVyeSBpcyB1c2VkIGFjcm9zc1xuLy8gZGlmZmVyZW50IGJ1bmRsZXMgb3IgbWljcm9mcm9udGVuZHMgdGhleSB3aWxsXG4vLyBhbGwgdXNlIHRoZSBzYW1lICoqaW5zdGFuY2UqKiBvZiBjb250ZXh0LCByZWdhcmRsZXNzXG4vLyBvZiBtb2R1bGUgc2NvcGluZy5cblxuZnVuY3Rpb24gZ2V0UXVlcnlDbGllbnRDb250ZXh0KCkge1xuICAvLyBAdHMtaWdub3JlIChmb3IgZ2xvYmFsKVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIXdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCkge1xuICAgICAgd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0ID0gZGVmYXVsdENvbnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0Q29udGV4dDtcbn1cblxuZXhwb3J0IHZhciB1c2VRdWVyeUNsaWVudCA9IGZ1bmN0aW9uIHVzZVF1ZXJ5Q2xpZW50KCkge1xuICB2YXIgcXVlcnlDbGllbnQgPSBSZWFjdC51c2VDb250ZXh0KGdldFF1ZXJ5Q2xpZW50Q29udGV4dCgpKTtcblxuICBpZiAoIXF1ZXJ5Q2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBRdWVyeUNsaWVudCBzZXQsIHVzZSBRdWVyeUNsaWVudFByb3ZpZGVyIHRvIHNldCBvbmUnKTtcbiAgfVxuXG4gIHJldHVybiBxdWVyeUNsaWVudDtcbn07XG5leHBvcnQgdmFyIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSBmdW5jdGlvbiBRdWVyeUNsaWVudFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNsaWVudCA9IF9yZWYuY2xpZW50LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNsaWVudC5tb3VudCgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGllbnQudW5tb3VudCgpO1xuICAgIH07XG4gIH0sIFtjbGllbnRdKTtcbiAgdmFyIENvbnRleHQgPSBnZXRRdWVyeUNsaWVudENvbnRleHQoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2xpZW50XG4gIH0sIGNoaWxkcmVuKTtcbn07IiwgImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7IC8vIENPTlRFWFRcblxuZnVuY3Rpb24gY3JlYXRlVmFsdWUoKSB7XG4gIHZhciBfaXNSZXNldCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGNsZWFyUmVzZXQ6IGZ1bmN0aW9uIGNsZWFyUmVzZXQoKSB7XG4gICAgICBfaXNSZXNldCA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgX2lzUmVzZXQgPSB0cnVlO1xuICAgIH0sXG4gICAgaXNSZXNldDogZnVuY3Rpb24gaXNSZXNldCgpIHtcbiAgICAgIHJldHVybiBfaXNSZXNldDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChjcmVhdGVWYWx1ZSgpKTsgLy8gSE9PS1xuXG5leHBvcnQgdmFyIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gZnVuY3Rpb24gdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCk7XG59OyAvLyBDT01QT05FTlRcblxuZXhwb3J0IHZhciBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSA9IGZ1bmN0aW9uIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5KF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIHZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZhbHVlKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbih2YWx1ZSkgOiBjaGlsZHJlbik7XG59OyIsICJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IG5vb3AsIHBhcnNlTXV0YXRpb25BcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBNdXRhdGlvbk9ic2VydmVyIH0gZnJvbSAnLi4vY29yZS9tdXRhdGlvbk9ic2VydmVyJztcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9RdWVyeUNsaWVudFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VNdXRhdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gIHZhciBtb3VudGVkUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoMCksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgb3B0aW9ucyA9IHBhcnNlTXV0YXRpb25BcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICB2YXIgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICB2YXIgb2JzUmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKCFvYnNSZWYuY3VycmVudCkge1xuICAgIG9ic1JlZi5jdXJyZW50ID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIocXVlcnlDbGllbnQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIG9ic1JlZi5jdXJyZW50LnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlc3VsdCA9IG9ic1JlZi5jdXJyZW50LmdldEN1cnJlbnRSZXN1bHQoKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIHZhciB1bnN1YnNjcmliZSA9IG9ic1JlZi5jdXJyZW50LnN1YnNjcmliZShub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG1vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICBmb3JjZVVwZGF0ZShmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4ICsgMTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb3VudGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgbXV0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHZhcmlhYmxlcywgbXV0YXRlT3B0aW9ucykge1xuICAgIG9ic1JlZi5jdXJyZW50Lm11dGF0ZSh2YXJpYWJsZXMsIG11dGF0ZU9wdGlvbnMpLmNhdGNoKG5vb3ApO1xuICB9LCBbXSk7XG5cbiAgaWYgKGN1cnJlbnRSZXN1bHQuZXJyb3IgJiYgb2JzUmVmLmN1cnJlbnQub3B0aW9ucy51c2VFcnJvckJvdW5kYXJ5KSB7XG4gICAgdGhyb3cgY3VycmVudFJlc3VsdC5lcnJvcjtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY3VycmVudFJlc3VsdCwge1xuICAgIG11dGF0ZTogbXV0YXRlLFxuICAgIG11dGF0ZUFzeW5jOiBjdXJyZW50UmVzdWx0Lm11dGF0ZVxuICB9KTtcbn0iLCAiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuLi9jb3JlL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgfSBmcm9tICcuL1F1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5JztcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9RdWVyeUNsaWVudFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VCYXNlUXVlcnkob3B0aW9ucywgT2JzZXJ2ZXIpIHtcbiAgdmFyIG1vdW50ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSgwKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIHZhciBlcnJvclJlc2V0Qm91bmRhcnkgPSB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSgpO1xuICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHF1ZXJ5Q2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTsgLy8gTWFrZSBzdXJlIHJlc3VsdHMgYXJlIG9wdGltaXN0aWNhbGx5IHNldCBpbiBmZXRjaGluZyBzdGF0ZSBiZWZvcmUgc3Vic2NyaWJpbmcgb3IgdXBkYXRpbmcgb3B0aW9uc1xuXG4gIGRlZmF1bHRlZE9wdGlvbnMub3B0aW1pc3RpY1Jlc3VsdHMgPSB0cnVlOyAvLyBJbmNsdWRlIGNhbGxiYWNrcyBpbiBiYXRjaCByZW5kZXJzXG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcikge1xuICAgIGRlZmF1bHRlZE9wdGlvbnMub25FcnJvciA9IG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UpIHtcbiAgICAvLyBBbHdheXMgc2V0IHN0YWxlIHRpbWUgd2hlbiB1c2luZyBzdXNwZW5zZSB0byBwcmV2ZW50XG4gICAgLy8gZmV0Y2hpbmcgYWdhaW4gd2hlbiBkaXJlY3RseSBtb3VudGluZyBhZnRlciBzdXNwZW5kaW5nXG4gICAgaWYgKHR5cGVvZiBkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lID0gMTAwMDtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSB8fCBkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBQcmV2ZW50IHJldHJ5aW5nIGZhaWxlZCBxdWVyeSBpZiB0aGUgZXJyb3IgYm91bmRhcnkgaGFzIG5vdCBiZWVuIHJlc2V0IHlldFxuICAgIGlmICghZXJyb3JSZXNldEJvdW5kYXJ5LmlzUmVzZXQoKSkge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5yZXRyeU9uTW91bnQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgb2JzUmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKCFvYnNSZWYuY3VycmVudCkge1xuICAgIG9ic1JlZi5jdXJyZW50ID0gbmV3IE9ic2VydmVyKHF1ZXJ5Q2xpZW50LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBvYnNSZWYuY3VycmVudC5nZXRPcHRpbWlzdGljUmVzdWx0KGRlZmF1bHRlZE9wdGlvbnMpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgZXJyb3JSZXNldEJvdW5kYXJ5LmNsZWFyUmVzZXQoKTtcbiAgICB2YXIgdW5zdWJzY3JpYmUgPSBvYnNSZWYuY3VycmVudC5zdWJzY3JpYmUobm90aWZ5TWFuYWdlci5iYXRjaENhbGxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICByZXR1cm4geCArIDE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pKTsgLy8gVXBkYXRlIHJlc3VsdCB0byBtYWtlIHN1cmUgd2UgZGlkIG5vdCBtaXNzIGFueSBxdWVyeSB1cGRhdGVzXG4gICAgLy8gYmV0d2VlbiBjcmVhdGluZyB0aGUgb2JzZXJ2ZXIgYW5kIHN1YnNjcmliaW5nIHRvIGl0LlxuXG4gICAgb2JzUmVmLmN1cnJlbnQudXBkYXRlUmVzdWx0KCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZXJyb3JSZXNldEJvdW5kYXJ5XSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90IG5vdGlmeSBvbiB1cGRhdGVzIGJlY2F1c2Ugb2YgY2hhbmdlcyBpbiB0aGUgb3B0aW9ucyBiZWNhdXNlXG4gICAgLy8gdGhlc2UgY2hhbmdlcyBzaG91bGQgYWxyZWFkeSBiZSByZWZsZWN0ZWQgaW4gdGhlIG9wdGltaXN0aWMgcmVzdWx0LlxuICAgIG9ic1JlZi5jdXJyZW50LnNldE9wdGlvbnMoZGVmYXVsdGVkT3B0aW9ucywge1xuICAgICAgbGlzdGVuZXJzOiBmYWxzZVxuICAgIH0pO1xuICB9LCBbZGVmYXVsdGVkT3B0aW9uc10pOyAvLyBIYW5kbGUgc3VzcGVuc2VcblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSAmJiByZXN1bHQuaXNMb2FkaW5nKSB7XG4gICAgdGhyb3cgb2JzUmVmLmN1cnJlbnQuZmV0Y2hPcHRpbWlzdGljKGRlZmF1bHRlZE9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBkYXRhID0gX3JlZi5kYXRhO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKGRhdGEpO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKGRhdGEsIG51bGwpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgZXJyb3JSZXNldEJvdW5kYXJ5LmNsZWFyUmVzZXQoKTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yKGVycm9yKTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCh1bmRlZmluZWQsIGVycm9yKTtcbiAgICB9KTtcbiAgfSAvLyBIYW5kbGUgZXJyb3IgYm91bmRhcnlcblxuXG4gIGlmICgoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSB8fCBkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnkpICYmIHJlc3VsdC5pc0Vycm9yKSB7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9IC8vIEhhbmRsZSByZXN1bHQgcHJvcGVydHkgdXNhZ2UgdHJhY2tpbmdcblxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLm5vdGlmeU9uQ2hhbmdlUHJvcHMgPT09ICd0cmFja2VkJykge1xuICAgIHJlc3VsdCA9IG9ic1JlZi5jdXJyZW50LnRyYWNrUmVzdWx0KHJlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsICJpbXBvcnQgeyBRdWVyeU9ic2VydmVyIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgdXNlQmFzZVF1ZXJ5IH0gZnJvbSAnLi91c2VCYXNlUXVlcnknOyAvLyBIT09LXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gIHZhciBwYXJzZWRPcHRpb25zID0gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMyk7XG4gIHJldHVybiB1c2VCYXNlUXVlcnkocGFyc2VkT3B0aW9ucywgUXVlcnlPYnNlcnZlcik7XG59IiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEFwcEhlYWRlcigpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGltZyBzcmM9XCIvc2hhY2FsX2xvZ28uc3ZnXCIgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsICJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBOb3RGb3VuZFBhZ2UoKSB7XG4gIHJldHVybiA8ZGl2Pk5PVCBGT1VORC4uLjwvZGl2Pjtcbn1cbiIsICJpbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tIFwicmVhY3QtaGVsbWV0XCI7XG5pbXBvcnQgeyBBcHBMb2FkZXIgfSBmcm9tIFwiLi9hcHAtbG9hZGVyXCI7XG5pbXBvcnQgeyBBdXRoUGFnZSB9IGZyb20gXCIuL2F1dGgtcGFnZVwiO1xuaW1wb3J0IHsgTm90Rm91bmRQYWdlIH0gZnJvbSBcIi4vbm90LWZvdW5kLXBhZ2VcIjtcblxuZXhwb3J0IHR5cGUgUGFnZVByb3BzID0ge1xuICB0aXRsZTogc3RyaW5nO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBzaG93QXV0aD86IGJvb2xlYW47XG4gIHNob3c0MDQ/OiBib29sZWFuO1xuICBjaGlsZHJlbjogKCkgPT4gUmVhY3RFbGVtZW50O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFBhZ2Uoe1xuICB0aXRsZSxcbiAgbG9hZGluZyxcbiAgc2hvd0F1dGggPSBmYWxzZSxcbiAgc2hvdzQwNCA9IGZhbHNlLFxuICBjaGlsZHJlbixcbn06IFBhZ2VQcm9wcykge1xuICBjb25zdCByZW5kZXJNYWluID0gKCkgPT4ge1xuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICByZXR1cm4gPEFwcExvYWRlciAvPjtcbiAgICB9XG4gICAgaWYgKHNob3dBdXRoKSB7XG4gICAgICByZXR1cm4gPEF1dGhQYWdlIC8+O1xuICAgIH1cbiAgICBpZiAoc2hvdzQwNCkge1xuICAgICAgcmV0dXJuIDxOb3RGb3VuZFBhZ2UgLz47XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbigpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPEhlbG1ldD5cbiAgICAgICAgPHRpdGxlPlNoYUNhbDoge3RpdGxlfTwvdGl0bGU+XG4gICAgICA8L0hlbG1ldD5cbiAgICAgIHtyZW5kZXJNYWluKCl9XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsICJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdpdGhTaWRlRWZmZWN0IGZyb20gJ3JlYWN0LXNpZGUtZWZmZWN0JztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ3JlYWN0LWZhc3QtY29tcGFyZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG9iamVjdEFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcblxudmFyIEFUVFJJQlVURV9OQU1FUyA9IHtcbiAgICBCT0RZOiBcImJvZHlBdHRyaWJ1dGVzXCIsXG4gICAgSFRNTDogXCJodG1sQXR0cmlidXRlc1wiLFxuICAgIFRJVExFOiBcInRpdGxlQXR0cmlidXRlc1wiXG59O1xuXG52YXIgVEFHX05BTUVTID0ge1xuICAgIEJBU0U6IFwiYmFzZVwiLFxuICAgIEJPRFk6IFwiYm9keVwiLFxuICAgIEhFQUQ6IFwiaGVhZFwiLFxuICAgIEhUTUw6IFwiaHRtbFwiLFxuICAgIExJTks6IFwibGlua1wiLFxuICAgIE1FVEE6IFwibWV0YVwiLFxuICAgIE5PU0NSSVBUOiBcIm5vc2NyaXB0XCIsXG4gICAgU0NSSVBUOiBcInNjcmlwdFwiLFxuICAgIFNUWUxFOiBcInN0eWxlXCIsXG4gICAgVElUTEU6IFwidGl0bGVcIlxufTtcblxudmFyIFZBTElEX1RBR19OQU1FUyA9IE9iamVjdC5rZXlzKFRBR19OQU1FUykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFRBR19OQU1FU1tuYW1lXTtcbn0pO1xuXG52YXIgVEFHX1BST1BFUlRJRVMgPSB7XG4gICAgQ0hBUlNFVDogXCJjaGFyc2V0XCIsXG4gICAgQ1NTX1RFWFQ6IFwiY3NzVGV4dFwiLFxuICAgIEhSRUY6IFwiaHJlZlwiLFxuICAgIEhUVFBFUVVJVjogXCJodHRwLWVxdWl2XCIsXG4gICAgSU5ORVJfSFRNTDogXCJpbm5lckhUTUxcIixcbiAgICBJVEVNX1BST1A6IFwiaXRlbXByb3BcIixcbiAgICBOQU1FOiBcIm5hbWVcIixcbiAgICBQUk9QRVJUWTogXCJwcm9wZXJ0eVwiLFxuICAgIFJFTDogXCJyZWxcIixcbiAgICBTUkM6IFwic3JjXCIsXG4gICAgVEFSR0VUOiBcInRhcmdldFwiXG59O1xuXG52YXIgUkVBQ1RfVEFHX01BUCA9IHtcbiAgICBhY2Nlc3NrZXk6IFwiYWNjZXNzS2V5XCIsXG4gICAgY2hhcnNldDogXCJjaGFyU2V0XCIsXG4gICAgY2xhc3M6IFwiY2xhc3NOYW1lXCIsXG4gICAgY29udGVudGVkaXRhYmxlOiBcImNvbnRlbnRFZGl0YWJsZVwiLFxuICAgIGNvbnRleHRtZW51OiBcImNvbnRleHRNZW51XCIsXG4gICAgXCJodHRwLWVxdWl2XCI6IFwiaHR0cEVxdWl2XCIsXG4gICAgaXRlbXByb3A6IFwiaXRlbVByb3BcIixcbiAgICB0YWJpbmRleDogXCJ0YWJJbmRleFwiXG59O1xuXG52YXIgSEVMTUVUX1BST1BTID0ge1xuICAgIERFRkFVTFRfVElUTEU6IFwiZGVmYXVsdFRpdGxlXCIsXG4gICAgREVGRVI6IFwiZGVmZXJcIixcbiAgICBFTkNPREVfU1BFQ0lBTF9DSEFSQUNURVJTOiBcImVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzXCIsXG4gICAgT05fQ0hBTkdFX0NMSUVOVF9TVEFURTogXCJvbkNoYW5nZUNsaWVudFN0YXRlXCIsXG4gICAgVElUTEVfVEVNUExBVEU6IFwidGl0bGVUZW1wbGF0ZVwiXG59O1xuXG52YXIgSFRNTF9UQUdfTUFQID0gT2JqZWN0LmtleXMoUkVBQ1RfVEFHX01BUCkucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAgIG9ialtSRUFDVF9UQUdfTUFQW2tleV1dID0ga2V5O1xuICAgIHJldHVybiBvYmo7XG59LCB7fSk7XG5cbnZhciBTRUxGX0NMT1NJTkdfVEFHUyA9IFtUQUdfTkFNRVMuTk9TQ1JJUFQsIFRBR19OQU1FUy5TQ1JJUFQsIFRBR19OQU1FUy5TVFlMRV07XG5cbnZhciBIRUxNRVRfQVRUUklCVVRFID0gXCJkYXRhLXJlYWN0LWhlbG1ldFwiO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbnZhciBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyA9IGZ1bmN0aW9uIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzKHN0cikge1xuICAgIHZhciBlbmNvZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICBpZiAoZW5jb2RlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKS5yZXBsYWNlKC8nL2csIFwiJiN4Mjc7XCIpO1xufTtcblxudmFyIGdldFRpdGxlRnJvbVByb3BzTGlzdCA9IGZ1bmN0aW9uIGdldFRpdGxlRnJvbVByb3BzTGlzdChwcm9wc0xpc3QpIHtcbiAgICB2YXIgaW5uZXJtb3N0VGl0bGUgPSBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIFRBR19OQU1FUy5USVRMRSk7XG4gICAgdmFyIGlubmVybW9zdFRlbXBsYXRlID0gZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBIRUxNRVRfUFJPUFMuVElUTEVfVEVNUExBVEUpO1xuXG4gICAgaWYgKGlubmVybW9zdFRlbXBsYXRlICYmIGlubmVybW9zdFRpdGxlKSB7XG4gICAgICAgIC8vIHVzZSBmdW5jdGlvbiBhcmcgdG8gYXZvaWQgbmVlZCB0byBlc2NhcGUgJCBjaGFyYWN0ZXJzXG4gICAgICAgIHJldHVybiBpbm5lcm1vc3RUZW1wbGF0ZS5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbm5lcm1vc3RUaXRsZSkgPyBpbm5lcm1vc3RUaXRsZS5qb2luKFwiXCIpIDogaW5uZXJtb3N0VGl0bGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbm5lcm1vc3REZWZhdWx0VGl0bGUgPSBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5ERUZBVUxUX1RJVExFKTtcblxuICAgIHJldHVybiBpbm5lcm1vc3RUaXRsZSB8fCBpbm5lcm1vc3REZWZhdWx0VGl0bGUgfHwgdW5kZWZpbmVkO1xufTtcblxudmFyIGdldE9uQ2hhbmdlQ2xpZW50U3RhdGUgPSBmdW5jdGlvbiBnZXRPbkNoYW5nZUNsaWVudFN0YXRlKHByb3BzTGlzdCkge1xuICAgIHJldHVybiBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5PTl9DSEFOR0VfQ0xJRU5UX1NUQVRFKSB8fCBmdW5jdGlvbiAoKSB7fTtcbn07XG5cbnZhciBnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdCA9IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0KHRhZ1R5cGUsIHByb3BzTGlzdCkge1xuICAgIHJldHVybiBwcm9wc0xpc3QuZmlsdGVyKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb3BzW3RhZ1R5cGVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIH0pLm1hcChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW3RhZ1R5cGVdO1xuICAgIH0pLnJlZHVjZShmdW5jdGlvbiAodGFnQXR0cnMsIGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0YWdBdHRycywgY3VycmVudCk7XG4gICAgfSwge30pO1xufTtcblxudmFyIGdldEJhc2VUYWdGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QocHJpbWFyeUF0dHJpYnV0ZXMsIHByb3BzTGlzdCkge1xuICAgIHJldHVybiBwcm9wc0xpc3QuZmlsdGVyKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb3BzW1RBR19OQU1FUy5CQVNFXSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBwcm9wc1tUQUdfTkFNRVMuQkFTRV07XG4gICAgfSkucmV2ZXJzZSgpLnJlZHVjZShmdW5jdGlvbiAoaW5uZXJtb3N0QmFzZVRhZywgdGFnKSB7XG4gICAgICAgIGlmICghaW5uZXJtb3N0QmFzZVRhZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGFnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZUtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGxvd2VyQ2FzZUF0dHJpYnV0ZUtleSA9IGF0dHJpYnV0ZUtleS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlBdHRyaWJ1dGVzLmluZGV4T2YobG93ZXJDYXNlQXR0cmlidXRlS2V5KSAhPT0gLTEgJiYgdGFnW2xvd2VyQ2FzZUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVybW9zdEJhc2VUYWcuY29uY2F0KHRhZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlubmVybW9zdEJhc2VUYWc7XG4gICAgfSwgW10pO1xufTtcblxudmFyIGdldFRhZ3NGcm9tUHJvcHNMaXN0ID0gZnVuY3Rpb24gZ2V0VGFnc0Zyb21Qcm9wc0xpc3QodGFnTmFtZSwgcHJpbWFyeUF0dHJpYnV0ZXMsIHByb3BzTGlzdCkge1xuICAgIC8vIENhbGN1bGF0ZSBsaXN0IG9mIHRhZ3MsIGdpdmluZyBwcmlvcml0eSBpbm5lcm1vc3QgY29tcG9uZW50IChlbmQgb2YgdGhlIHByb3BzbGlzdClcbiAgICB2YXIgYXBwcm92ZWRTZWVuVGFncyA9IHt9O1xuXG4gICAgcmV0dXJuIHByb3BzTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzW3RhZ05hbWVdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wc1t0YWdOYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgd2FybihcIkhlbG1ldDogXCIgKyB0YWdOYW1lICsgXCIgc2hvdWxkIGJlIG9mIHR5cGUgXFxcIkFycmF5XFxcIi4gSW5zdGVhZCBmb3VuZCB0eXBlIFxcXCJcIiArIF90eXBlb2YocHJvcHNbdGFnTmFtZV0pICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBwcm9wc1t0YWdOYW1lXTtcbiAgICB9KS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChhcHByb3ZlZFRhZ3MsIGluc3RhbmNlVGFncykge1xuICAgICAgICB2YXIgaW5zdGFuY2VTZWVuVGFncyA9IHt9O1xuXG4gICAgICAgIGluc3RhbmNlVGFncy5maWx0ZXIoZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgdmFyIHByaW1hcnlBdHRyaWJ1dGVLZXkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRhZyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlS2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ZXJDYXNlQXR0cmlidXRlS2V5ID0gYXR0cmlidXRlS2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIHJ1bGUgd2l0aCBsaW5rIHRhZ3MsIHNpbmNlIHJlbCBhbmQgaHJlZiBhcmUgYm90aCBwcmltYXJ5IHRhZ3MsIHJlbCB0YWtlcyBwcmlvcml0eVxuICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5QXR0cmlidXRlcy5pbmRleE9mKGxvd2VyQ2FzZUF0dHJpYnV0ZUtleSkgIT09IC0xICYmICEocHJpbWFyeUF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuUkVMICYmIHRhZ1twcmltYXJ5QXR0cmlidXRlS2V5XS50b0xvd2VyQ2FzZSgpID09PSBcImNhbm9uaWNhbFwiKSAmJiAhKGxvd2VyQ2FzZUF0dHJpYnV0ZUtleSA9PT0gVEFHX1BST1BFUlRJRVMuUkVMICYmIHRhZ1tsb3dlckNhc2VBdHRyaWJ1dGVLZXldLnRvTG93ZXJDYXNlKCkgPT09IFwic3R5bGVzaGVldFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5QXR0cmlidXRlS2V5ID0gbG93ZXJDYXNlQXR0cmlidXRlS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGlubmVySFRNTCB3aGljaCBkb2Vzbid0IHdvcmsgbG93ZXJjYXNlZFxuICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5QXR0cmlidXRlcy5pbmRleE9mKGF0dHJpYnV0ZUtleSkgIT09IC0xICYmIChhdHRyaWJ1dGVLZXkgPT09IFRBR19QUk9QRVJUSUVTLklOTkVSX0hUTUwgfHwgYXR0cmlidXRlS2V5ID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCB8fCBhdHRyaWJ1dGVLZXkgPT09IFRBR19QUk9QRVJUSUVTLklURU1fUFJPUCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUF0dHJpYnV0ZUtleSA9IGF0dHJpYnV0ZUtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghcHJpbWFyeUF0dHJpYnV0ZUtleSB8fCAhdGFnW3ByaW1hcnlBdHRyaWJ1dGVLZXldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0YWdbcHJpbWFyeUF0dHJpYnV0ZUtleV0udG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYgKCFhcHByb3ZlZFNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldKSB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZWRTZWVuVGFnc1twcmltYXJ5QXR0cmlidXRlS2V5XSA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlU2VlblRhZ3NbcHJpbWFyeUF0dHJpYnV0ZUtleV0pIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghYXBwcm92ZWRTZWVuVGFnc1twcmltYXJ5QXR0cmlidXRlS2V5XVt2YWx1ZV0pIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVNlZW5UYWdzW3ByaW1hcnlBdHRyaWJ1dGVLZXldW3ZhbHVlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgcmV0dXJuIGFwcHJvdmVkVGFncy5wdXNoKHRhZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBzZWVuIHRhZ3Mgd2l0aCB0YWdzIGZyb20gdGhpcyBpbnN0YW5jZVxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGluc3RhbmNlU2VlblRhZ3MpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVLZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgdmFyIHRhZ1VuaW9uID0gb2JqZWN0QXNzaWduKHt9LCBhcHByb3ZlZFNlZW5UYWdzW2F0dHJpYnV0ZUtleV0sIGluc3RhbmNlU2VlblRhZ3NbYXR0cmlidXRlS2V5XSk7XG5cbiAgICAgICAgICAgIGFwcHJvdmVkU2VlblRhZ3NbYXR0cmlidXRlS2V5XSA9IHRhZ1VuaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwcHJvdmVkVGFncztcbiAgICB9LCBbXSkucmV2ZXJzZSgpO1xufTtcblxudmFyIGdldElubmVybW9zdFByb3BlcnR5ID0gZnVuY3Rpb24gZ2V0SW5uZXJtb3N0UHJvcGVydHkocHJvcHNMaXN0LCBwcm9wZXJ0eSkge1xuICAgIGZvciAodmFyIGkgPSBwcm9wc0xpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIHByb3BzID0gcHJvcHNMaXN0W2ldO1xuXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wc1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciByZWR1Y2VQcm9wc1RvU3RhdGUgPSBmdW5jdGlvbiByZWR1Y2VQcm9wc1RvU3RhdGUocHJvcHNMaXN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZVRhZzogZ2V0QmFzZVRhZ0Zyb21Qcm9wc0xpc3QoW1RBR19QUk9QRVJUSUVTLkhSRUYsIFRBR19QUk9QRVJUSUVTLlRBUkdFVF0sIHByb3BzTGlzdCksXG4gICAgICAgIGJvZHlBdHRyaWJ1dGVzOiBnZXRBdHRyaWJ1dGVzRnJvbVByb3BzTGlzdChBVFRSSUJVVEVfTkFNRVMuQk9EWSwgcHJvcHNMaXN0KSxcbiAgICAgICAgZGVmZXI6IGdldElubmVybW9zdFByb3BlcnR5KHByb3BzTGlzdCwgSEVMTUVUX1BST1BTLkRFRkVSKSxcbiAgICAgICAgZW5jb2RlOiBnZXRJbm5lcm1vc3RQcm9wZXJ0eShwcm9wc0xpc3QsIEhFTE1FVF9QUk9QUy5FTkNPREVfU1BFQ0lBTF9DSEFSQUNURVJTKSxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0KEFUVFJJQlVURV9OQU1FUy5IVE1MLCBwcm9wc0xpc3QpLFxuICAgICAgICBsaW5rVGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLkxJTkssIFtUQUdfUFJPUEVSVElFUy5SRUwsIFRBR19QUk9QRVJUSUVTLkhSRUZdLCBwcm9wc0xpc3QpLFxuICAgICAgICBtZXRhVGFnczogZ2V0VGFnc0Zyb21Qcm9wc0xpc3QoVEFHX05BTUVTLk1FVEEsIFtUQUdfUFJPUEVSVElFUy5OQU1FLCBUQUdfUFJPUEVSVElFUy5DSEFSU0VULCBUQUdfUFJPUEVSVElFUy5IVFRQRVFVSVYsIFRBR19QUk9QRVJUSUVTLlBST1BFUlRZLCBUQUdfUFJPUEVSVElFUy5JVEVNX1BST1BdLCBwcm9wc0xpc3QpLFxuICAgICAgICBub3NjcmlwdFRhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFRBR19OQU1FUy5OT1NDUklQVCwgW1RBR19QUk9QRVJUSUVTLklOTkVSX0hUTUxdLCBwcm9wc0xpc3QpLFxuICAgICAgICBvbkNoYW5nZUNsaWVudFN0YXRlOiBnZXRPbkNoYW5nZUNsaWVudFN0YXRlKHByb3BzTGlzdCksXG4gICAgICAgIHNjcmlwdFRhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFRBR19OQU1FUy5TQ1JJUFQsIFtUQUdfUFJPUEVSVElFUy5TUkMsIFRBR19QUk9QRVJUSUVTLklOTkVSX0hUTUxdLCBwcm9wc0xpc3QpLFxuICAgICAgICBzdHlsZVRhZ3M6IGdldFRhZ3NGcm9tUHJvcHNMaXN0KFRBR19OQU1FUy5TVFlMRSwgW1RBR19QUk9QRVJUSUVTLkNTU19URVhUXSwgcHJvcHNMaXN0KSxcbiAgICAgICAgdGl0bGU6IGdldFRpdGxlRnJvbVByb3BzTGlzdChwcm9wc0xpc3QpLFxuICAgICAgICB0aXRsZUF0dHJpYnV0ZXM6IGdldEF0dHJpYnV0ZXNGcm9tUHJvcHNMaXN0KEFUVFJJQlVURV9OQU1FUy5USVRMRSwgcHJvcHNMaXN0KVxuICAgIH07XG59O1xuXG52YXIgcmFmUG9seWZpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsb2NrID0gRGF0ZS5ub3coKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBpZiAoY3VycmVudFRpbWUgLSBjbG9jayA+IDE2KSB7XG4gICAgICAgICAgICBjbG9jayA9IGN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgY2FsbGJhY2soY3VycmVudFRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmFmUG9seWZpbGwoY2FsbGJhY2spO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpO1xuXG52YXIgY2FmUG9seWZpbGwgPSBmdW5jdGlvbiBjYWZQb2x5ZmlsbChpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByYWZQb2x5ZmlsbCA6IGdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgcmFmUG9seWZpbGw7XG5cbnZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fCBjYWZQb2x5ZmlsbCA6IGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBjYWZQb2x5ZmlsbDtcblxudmFyIHdhcm4gPSBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgIHJldHVybiBjb25zb2xlICYmIHR5cGVvZiBjb25zb2xlLndhcm4gPT09IFwiZnVuY3Rpb25cIiAmJiBjb25zb2xlLndhcm4obXNnKTtcbn07XG5cbnZhciBfaGVsbWV0Q2FsbGJhY2sgPSBudWxsO1xuXG52YXIgaGFuZGxlQ2xpZW50U3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDbGllbnRTdGF0ZUNoYW5nZShuZXdTdGF0ZSkge1xuICAgIGlmIChfaGVsbWV0Q2FsbGJhY2spIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoX2hlbG1ldENhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUuZGVmZXIpIHtcbiAgICAgICAgX2hlbG1ldENhbGxiYWNrID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbW1pdFRhZ0NoYW5nZXMobmV3U3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfaGVsbWV0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbW1pdFRhZ0NoYW5nZXMobmV3U3RhdGUpO1xuICAgICAgICBfaGVsbWV0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbn07XG5cbnZhciBjb21taXRUYWdDaGFuZ2VzID0gZnVuY3Rpb24gY29tbWl0VGFnQ2hhbmdlcyhuZXdTdGF0ZSwgY2IpIHtcbiAgICB2YXIgYmFzZVRhZyA9IG5ld1N0YXRlLmJhc2VUYWcsXG4gICAgICAgIGJvZHlBdHRyaWJ1dGVzID0gbmV3U3RhdGUuYm9keUF0dHJpYnV0ZXMsXG4gICAgICAgIGh0bWxBdHRyaWJ1dGVzID0gbmV3U3RhdGUuaHRtbEF0dHJpYnV0ZXMsXG4gICAgICAgIGxpbmtUYWdzID0gbmV3U3RhdGUubGlua1RhZ3MsXG4gICAgICAgIG1ldGFUYWdzID0gbmV3U3RhdGUubWV0YVRhZ3MsXG4gICAgICAgIG5vc2NyaXB0VGFncyA9IG5ld1N0YXRlLm5vc2NyaXB0VGFncyxcbiAgICAgICAgb25DaGFuZ2VDbGllbnRTdGF0ZSA9IG5ld1N0YXRlLm9uQ2hhbmdlQ2xpZW50U3RhdGUsXG4gICAgICAgIHNjcmlwdFRhZ3MgPSBuZXdTdGF0ZS5zY3JpcHRUYWdzLFxuICAgICAgICBzdHlsZVRhZ3MgPSBuZXdTdGF0ZS5zdHlsZVRhZ3MsXG4gICAgICAgIHRpdGxlID0gbmV3U3RhdGUudGl0bGUsXG4gICAgICAgIHRpdGxlQXR0cmlidXRlcyA9IG5ld1N0YXRlLnRpdGxlQXR0cmlidXRlcztcblxuICAgIHVwZGF0ZUF0dHJpYnV0ZXMoVEFHX05BTUVTLkJPRFksIGJvZHlBdHRyaWJ1dGVzKTtcbiAgICB1cGRhdGVBdHRyaWJ1dGVzKFRBR19OQU1FUy5IVE1MLCBodG1sQXR0cmlidXRlcyk7XG5cbiAgICB1cGRhdGVUaXRsZSh0aXRsZSwgdGl0bGVBdHRyaWJ1dGVzKTtcblxuICAgIHZhciB0YWdVcGRhdGVzID0ge1xuICAgICAgICBiYXNlVGFnOiB1cGRhdGVUYWdzKFRBR19OQU1FUy5CQVNFLCBiYXNlVGFnKSxcbiAgICAgICAgbGlua1RhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLkxJTkssIGxpbmtUYWdzKSxcbiAgICAgICAgbWV0YVRhZ3M6IHVwZGF0ZVRhZ3MoVEFHX05BTUVTLk1FVEEsIG1ldGFUYWdzKSxcbiAgICAgICAgbm9zY3JpcHRUYWdzOiB1cGRhdGVUYWdzKFRBR19OQU1FUy5OT1NDUklQVCwgbm9zY3JpcHRUYWdzKSxcbiAgICAgICAgc2NyaXB0VGFnczogdXBkYXRlVGFncyhUQUdfTkFNRVMuU0NSSVBULCBzY3JpcHRUYWdzKSxcbiAgICAgICAgc3R5bGVUYWdzOiB1cGRhdGVUYWdzKFRBR19OQU1FUy5TVFlMRSwgc3R5bGVUYWdzKVxuICAgIH07XG5cbiAgICB2YXIgYWRkZWRUYWdzID0ge307XG4gICAgdmFyIHJlbW92ZWRUYWdzID0ge307XG5cbiAgICBPYmplY3Qua2V5cyh0YWdVcGRhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWdUeXBlKSB7XG4gICAgICAgIHZhciBfdGFnVXBkYXRlcyR0YWdUeXBlID0gdGFnVXBkYXRlc1t0YWdUeXBlXSxcbiAgICAgICAgICAgIG5ld1RhZ3MgPSBfdGFnVXBkYXRlcyR0YWdUeXBlLm5ld1RhZ3MsXG4gICAgICAgICAgICBvbGRUYWdzID0gX3RhZ1VwZGF0ZXMkdGFnVHlwZS5vbGRUYWdzO1xuXG5cbiAgICAgICAgaWYgKG5ld1RhZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBhZGRlZFRhZ3NbdGFnVHlwZV0gPSBuZXdUYWdzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbGRUYWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVtb3ZlZFRhZ3NbdGFnVHlwZV0gPSB0YWdVcGRhdGVzW3RhZ1R5cGVdLm9sZFRhZ3M7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNiICYmIGNiKCk7XG5cbiAgICBvbkNoYW5nZUNsaWVudFN0YXRlKG5ld1N0YXRlLCBhZGRlZFRhZ3MsIHJlbW92ZWRUYWdzKTtcbn07XG5cbnZhciBmbGF0dGVuQXJyYXkgPSBmdW5jdGlvbiBmbGF0dGVuQXJyYXkocG9zc2libGVBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBvc3NpYmxlQXJyYXkpID8gcG9zc2libGVBcnJheS5qb2luKFwiXCIpIDogcG9zc2libGVBcnJheTtcbn07XG5cbnZhciB1cGRhdGVUaXRsZSA9IGZ1bmN0aW9uIHVwZGF0ZVRpdGxlKHRpdGxlLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHR5cGVvZiB0aXRsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC50aXRsZSAhPT0gdGl0bGUpIHtcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBmbGF0dGVuQXJyYXkodGl0bGUpO1xuICAgIH1cblxuICAgIHVwZGF0ZUF0dHJpYnV0ZXMoVEFHX05BTUVTLlRJVExFLCBhdHRyaWJ1dGVzKTtcbn07XG5cbnZhciB1cGRhdGVBdHRyaWJ1dGVzID0gZnVuY3Rpb24gdXBkYXRlQXR0cmlidXRlcyh0YWdOYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGVsZW1lbnRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKVswXTtcblxuICAgIGlmICghZWxlbWVudFRhZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhlbG1ldEF0dHJpYnV0ZVN0cmluZyA9IGVsZW1lbnRUYWcuZ2V0QXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUpO1xuICAgIHZhciBoZWxtZXRBdHRyaWJ1dGVzID0gaGVsbWV0QXR0cmlidXRlU3RyaW5nID8gaGVsbWV0QXR0cmlidXRlU3RyaW5nLnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgIHZhciBhdHRyaWJ1dGVzVG9SZW1vdmUgPSBbXS5jb25jYXQoaGVsbWV0QXR0cmlidXRlcyk7XG4gICAgdmFyIGF0dHJpYnV0ZUtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlS2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVdIHx8IFwiXCI7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRUYWcuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50VGFnLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoZWxtZXRBdHRyaWJ1dGVzLmluZGV4T2YoYXR0cmlidXRlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGhlbG1ldEF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZGV4VG9TYXZlID0gYXR0cmlidXRlc1RvUmVtb3ZlLmluZGV4T2YoYXR0cmlidXRlKTtcbiAgICAgICAgaWYgKGluZGV4VG9TYXZlICE9PSAtMSkge1xuICAgICAgICAgICAgYXR0cmlidXRlc1RvUmVtb3ZlLnNwbGljZShpbmRleFRvU2F2ZSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IGF0dHJpYnV0ZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBfaSA+PSAwOyBfaS0tKSB7XG4gICAgICAgIGVsZW1lbnRUYWcucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXNUb1JlbW92ZVtfaV0pO1xuICAgIH1cblxuICAgIGlmIChoZWxtZXRBdHRyaWJ1dGVzLmxlbmd0aCA9PT0gYXR0cmlidXRlc1RvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50VGFnLnJlbW92ZUF0dHJpYnV0ZShIRUxNRVRfQVRUUklCVVRFKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnRUYWcuZ2V0QXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUpICE9PSBhdHRyaWJ1dGVLZXlzLmpvaW4oXCIsXCIpKSB7XG4gICAgICAgIGVsZW1lbnRUYWcuc2V0QXR0cmlidXRlKEhFTE1FVF9BVFRSSUJVVEUsIGF0dHJpYnV0ZUtleXMuam9pbihcIixcIikpO1xuICAgIH1cbn07XG5cbnZhciB1cGRhdGVUYWdzID0gZnVuY3Rpb24gdXBkYXRlVGFncyh0eXBlLCB0YWdzKSB7XG4gICAgdmFyIGhlYWRFbGVtZW50ID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFRBR19OQU1FUy5IRUFEKTtcbiAgICB2YXIgdGFnTm9kZXMgPSBoZWFkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHR5cGUgKyBcIltcIiArIEhFTE1FVF9BVFRSSUJVVEUgKyBcIl1cIik7XG4gICAgdmFyIG9sZFRhZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YWdOb2Rlcyk7XG4gICAgdmFyIG5ld1RhZ3MgPSBbXTtcbiAgICB2YXIgaW5kZXhUb0RlbGV0ZSA9IHZvaWQgMDtcblxuICAgIGlmICh0YWdzICYmIHRhZ3MubGVuZ3RoKSB7XG4gICAgICAgIHRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGF0dHJpYnV0ZSBpbiB0YWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gVEFHX1BST1BFUlRJRVMuSU5ORVJfSFRNTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5pbm5lckhUTUwgPSB0YWcuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZSA9PT0gVEFHX1BST1BFUlRJRVMuQ1NTX1RFWFQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRhZy5jc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhZy5jc3NUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdGFnW2F0dHJpYnV0ZV0gPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogdGFnW2F0dHJpYnV0ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoSEVMTUVUX0FUVFJJQlVURSwgXCJ0cnVlXCIpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgYSBkdXBsaWNhdGUgdGFnIGZyb20gZG9tVGFnc3RvUmVtb3ZlLCBzbyBpdCBpc24ndCBjbGVhcmVkLlxuICAgICAgICAgICAgaWYgKG9sZFRhZ3Muc29tZShmdW5jdGlvbiAoZXhpc3RpbmdUYWcsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaW5kZXhUb0RlbGV0ZSA9IGluZGV4O1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdFbGVtZW50LmlzRXF1YWxOb2RlKGV4aXN0aW5nVGFnKTtcbiAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgb2xkVGFncy5zcGxpY2UoaW5kZXhUb0RlbGV0ZSwgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1RhZ3MucHVzaChuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2xkVGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgbmV3VGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRFbGVtZW50LmFwcGVuZENoaWxkKHRhZyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvbGRUYWdzOiBvbGRUYWdzLFxuICAgICAgICBuZXdUYWdzOiBuZXdUYWdzXG4gICAgfTtcbn07XG5cbnZhciBnZW5lcmF0ZUVsZW1lbnRBdHRyaWJ1dGVzQXNTdHJpbmcgPSBmdW5jdGlvbiBnZW5lcmF0ZUVsZW1lbnRBdHRyaWJ1dGVzQXNTdHJpbmcoYXR0cmlidXRlcykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwga2V5KSB7XG4gICAgICAgIHZhciBhdHRyID0gdHlwZW9mIGF0dHJpYnV0ZXNba2V5XSAhPT0gXCJ1bmRlZmluZWRcIiA/IGtleSArIFwiPVxcXCJcIiArIGF0dHJpYnV0ZXNba2V5XSArIFwiXFxcIlwiIDogXCJcIiArIGtleTtcbiAgICAgICAgcmV0dXJuIHN0ciA/IHN0ciArIFwiIFwiICsgYXR0ciA6IGF0dHI7XG4gICAgfSwgXCJcIik7XG59O1xuXG52YXIgZ2VuZXJhdGVUaXRsZUFzU3RyaW5nID0gZnVuY3Rpb24gZ2VuZXJhdGVUaXRsZUFzU3RyaW5nKHR5cGUsIHRpdGxlLCBhdHRyaWJ1dGVzLCBlbmNvZGUpIHtcbiAgICB2YXIgYXR0cmlidXRlU3RyaW5nID0gZ2VuZXJhdGVFbGVtZW50QXR0cmlidXRlc0FzU3RyaW5nKGF0dHJpYnV0ZXMpO1xuICAgIHZhciBmbGF0dGVuZWRUaXRsZSA9IGZsYXR0ZW5BcnJheSh0aXRsZSk7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZVN0cmluZyA/IFwiPFwiICsgdHlwZSArIFwiIFwiICsgSEVMTUVUX0FUVFJJQlVURSArIFwiPVxcXCJ0cnVlXFxcIiBcIiArIGF0dHJpYnV0ZVN0cmluZyArIFwiPlwiICsgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnMoZmxhdHRlbmVkVGl0bGUsIGVuY29kZSkgKyBcIjwvXCIgKyB0eXBlICsgXCI+XCIgOiBcIjxcIiArIHR5cGUgKyBcIiBcIiArIEhFTE1FVF9BVFRSSUJVVEUgKyBcIj1cXFwidHJ1ZVxcXCI+XCIgKyBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVycyhmbGF0dGVuZWRUaXRsZSwgZW5jb2RlKSArIFwiPC9cIiArIHR5cGUgKyBcIj5cIjtcbn07XG5cbnZhciBnZW5lcmF0ZVRhZ3NBc1N0cmluZyA9IGZ1bmN0aW9uIGdlbmVyYXRlVGFnc0FzU3RyaW5nKHR5cGUsIHRhZ3MsIGVuY29kZSkge1xuICAgIHJldHVybiB0YWdzLnJlZHVjZShmdW5jdGlvbiAoc3RyLCB0YWcpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZUh0bWwgPSBPYmplY3Qua2V5cyh0YWcpLmZpbHRlcihmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gIShhdHRyaWJ1dGUgPT09IFRBR19QUk9QRVJUSUVTLklOTkVSX0hUTUwgfHwgYXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5DU1NfVEVYVCk7XG4gICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoc3RyaW5nLCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHZhciBhdHRyID0gdHlwZW9mIHRhZ1thdHRyaWJ1dGVdID09PSBcInVuZGVmaW5lZFwiID8gYXR0cmlidXRlIDogYXR0cmlidXRlICsgXCI9XFxcIlwiICsgZW5jb2RlU3BlY2lhbENoYXJhY3RlcnModGFnW2F0dHJpYnV0ZV0sIGVuY29kZSkgKyBcIlxcXCJcIjtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcgPyBzdHJpbmcgKyBcIiBcIiArIGF0dHIgOiBhdHRyO1xuICAgICAgICB9LCBcIlwiKTtcblxuICAgICAgICB2YXIgdGFnQ29udGVudCA9IHRhZy5pbm5lckhUTUwgfHwgdGFnLmNzc1RleHQgfHwgXCJcIjtcblxuICAgICAgICB2YXIgaXNTZWxmQ2xvc2luZyA9IFNFTEZfQ0xPU0lOR19UQUdTLmluZGV4T2YodHlwZSkgPT09IC0xO1xuXG4gICAgICAgIHJldHVybiBzdHIgKyBcIjxcIiArIHR5cGUgKyBcIiBcIiArIEhFTE1FVF9BVFRSSUJVVEUgKyBcIj1cXFwidHJ1ZVxcXCIgXCIgKyBhdHRyaWJ1dGVIdG1sICsgKGlzU2VsZkNsb3NpbmcgPyBcIi8+XCIgOiBcIj5cIiArIHRhZ0NvbnRlbnQgKyBcIjwvXCIgKyB0eXBlICsgXCI+XCIpO1xuICAgIH0sIFwiXCIpO1xufTtcblxudmFyIGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyA9IGZ1bmN0aW9uIGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyhhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGluaXRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAgICAgICBvYmpbUkVBQ1RfVEFHX01BUFtrZXldIHx8IGtleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSwgaW5pdFByb3BzKTtcbn07XG5cbnZhciBjb252ZXJ0UmVhY3RQcm9wc3RvSHRtbEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBjb252ZXJ0UmVhY3RQcm9wc3RvSHRtbEF0dHJpYnV0ZXMocHJvcHMpIHtcbiAgICB2YXIgaW5pdEF0dHJpYnV0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gICAgICAgIG9ialtIVE1MX1RBR19NQVBba2V5XSB8fCBrZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCBpbml0QXR0cmlidXRlcyk7XG59O1xuXG52YXIgZ2VuZXJhdGVUaXRsZUFzUmVhY3RDb21wb25lbnQgPSBmdW5jdGlvbiBnZW5lcmF0ZVRpdGxlQXNSZWFjdENvbXBvbmVudCh0eXBlLCB0aXRsZSwgYXR0cmlidXRlcykge1xuICAgIHZhciBfaW5pdFByb3BzO1xuXG4gICAgLy8gYXNzaWduaW5nIGludG8gYW4gYXJyYXkgdG8gZGVmaW5lIHRvU3RyaW5nIGZ1bmN0aW9uIG9uIGl0XG4gICAgdmFyIGluaXRQcm9wcyA9IChfaW5pdFByb3BzID0ge1xuICAgICAgICBrZXk6IHRpdGxlXG4gICAgfSwgX2luaXRQcm9wc1tIRUxNRVRfQVRUUklCVVRFXSA9IHRydWUsIF9pbml0UHJvcHMpO1xuICAgIHZhciBwcm9wcyA9IGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyhhdHRyaWJ1dGVzLCBpbml0UHJvcHMpO1xuXG4gICAgcmV0dXJuIFtSZWFjdC5jcmVhdGVFbGVtZW50KFRBR19OQU1FUy5USVRMRSwgcHJvcHMsIHRpdGxlKV07XG59O1xuXG52YXIgZ2VuZXJhdGVUYWdzQXNSZWFjdENvbXBvbmVudCA9IGZ1bmN0aW9uIGdlbmVyYXRlVGFnc0FzUmVhY3RDb21wb25lbnQodHlwZSwgdGFncykge1xuICAgIHJldHVybiB0YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpKSB7XG4gICAgICAgIHZhciBfbWFwcGVkVGFnO1xuXG4gICAgICAgIHZhciBtYXBwZWRUYWcgPSAoX21hcHBlZFRhZyA9IHtcbiAgICAgICAgICAgIGtleTogaVxuICAgICAgICB9LCBfbWFwcGVkVGFnW0hFTE1FVF9BVFRSSUJVVEVdID0gdHJ1ZSwgX21hcHBlZFRhZyk7XG5cbiAgICAgICAgT2JqZWN0LmtleXModGFnKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHZhciBtYXBwZWRBdHRyaWJ1dGUgPSBSRUFDVF9UQUdfTUFQW2F0dHJpYnV0ZV0gfHwgYXR0cmlidXRlO1xuXG4gICAgICAgICAgICBpZiAobWFwcGVkQXR0cmlidXRlID09PSBUQUdfUFJPUEVSVElFUy5JTk5FUl9IVE1MIHx8IG1hcHBlZEF0dHJpYnV0ZSA9PT0gVEFHX1BST1BFUlRJRVMuQ1NTX1RFWFQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHRhZy5pbm5lckhUTUwgfHwgdGFnLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgbWFwcGVkVGFnLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0geyBfX2h0bWw6IGNvbnRlbnQgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFwcGVkVGFnW21hcHBlZEF0dHJpYnV0ZV0gPSB0YWdbYXR0cmlidXRlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQodHlwZSwgbWFwcGVkVGFnKTtcbiAgICB9KTtcbn07XG5cbnZhciBnZXRNZXRob2RzRm9yVGFnID0gZnVuY3Rpb24gZ2V0TWV0aG9kc0ZvclRhZyh0eXBlLCB0YWdzLCBlbmNvZGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBUQUdfTkFNRVMuVElUTEU6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvQ29tcG9uZW50OiBmdW5jdGlvbiB0b0NvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlVGl0bGVBc1JlYWN0Q29tcG9uZW50KHR5cGUsIHRhZ3MudGl0bGUsIHRhZ3MudGl0bGVBdHRyaWJ1dGVzLCBlbmNvZGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVUaXRsZUFzU3RyaW5nKHR5cGUsIHRhZ3MudGl0bGUsIHRhZ3MudGl0bGVBdHRyaWJ1dGVzLCBlbmNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQVRUUklCVVRFX05BTUVTLkJPRFk6XG4gICAgICAgIGNhc2UgQVRUUklCVVRFX05BTUVTLkhUTUw6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvQ29tcG9uZW50OiBmdW5jdGlvbiB0b0NvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRFbGVtZW50QXR0cmlidXRlc3RvUmVhY3RQcm9wcyh0YWdzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlRWxlbWVudEF0dHJpYnV0ZXNBc1N0cmluZyh0YWdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b0NvbXBvbmVudDogZnVuY3Rpb24gdG9Db21wb25lbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVRhZ3NBc1JlYWN0Q29tcG9uZW50KHR5cGUsIHRhZ3MpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVUYWdzQXNTdHJpbmcodHlwZSwgdGFncywgZW5jb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgIH1cbn07XG5cbnZhciBtYXBTdGF0ZU9uU2VydmVyID0gZnVuY3Rpb24gbWFwU3RhdGVPblNlcnZlcihfcmVmKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBfcmVmLmJhc2VUYWcsXG4gICAgICAgIGJvZHlBdHRyaWJ1dGVzID0gX3JlZi5ib2R5QXR0cmlidXRlcyxcbiAgICAgICAgZW5jb2RlID0gX3JlZi5lbmNvZGUsXG4gICAgICAgIGh0bWxBdHRyaWJ1dGVzID0gX3JlZi5odG1sQXR0cmlidXRlcyxcbiAgICAgICAgbGlua1RhZ3MgPSBfcmVmLmxpbmtUYWdzLFxuICAgICAgICBtZXRhVGFncyA9IF9yZWYubWV0YVRhZ3MsXG4gICAgICAgIG5vc2NyaXB0VGFncyA9IF9yZWYubm9zY3JpcHRUYWdzLFxuICAgICAgICBzY3JpcHRUYWdzID0gX3JlZi5zY3JpcHRUYWdzLFxuICAgICAgICBzdHlsZVRhZ3MgPSBfcmVmLnN0eWxlVGFncyxcbiAgICAgICAgX3JlZiR0aXRsZSA9IF9yZWYudGl0bGUsXG4gICAgICAgIHRpdGxlID0gX3JlZiR0aXRsZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IF9yZWYkdGl0bGUsXG4gICAgICAgIHRpdGxlQXR0cmlidXRlcyA9IF9yZWYudGl0bGVBdHRyaWJ1dGVzO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLkJBU0UsIGJhc2VUYWcsIGVuY29kZSksXG4gICAgICAgIGJvZHlBdHRyaWJ1dGVzOiBnZXRNZXRob2RzRm9yVGFnKEFUVFJJQlVURV9OQU1FUy5CT0RZLCBib2R5QXR0cmlidXRlcywgZW5jb2RlKSxcbiAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IGdldE1ldGhvZHNGb3JUYWcoQVRUUklCVVRFX05BTUVTLkhUTUwsIGh0bWxBdHRyaWJ1dGVzLCBlbmNvZGUpLFxuICAgICAgICBsaW5rOiBnZXRNZXRob2RzRm9yVGFnKFRBR19OQU1FUy5MSU5LLCBsaW5rVGFncywgZW5jb2RlKSxcbiAgICAgICAgbWV0YTogZ2V0TWV0aG9kc0ZvclRhZyhUQUdfTkFNRVMuTUVUQSwgbWV0YVRhZ3MsIGVuY29kZSksXG4gICAgICAgIG5vc2NyaXB0OiBnZXRNZXRob2RzRm9yVGFnKFRBR19OQU1FUy5OT1NDUklQVCwgbm9zY3JpcHRUYWdzLCBlbmNvZGUpLFxuICAgICAgICBzY3JpcHQ6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLlNDUklQVCwgc2NyaXB0VGFncywgZW5jb2RlKSxcbiAgICAgICAgc3R5bGU6IGdldE1ldGhvZHNGb3JUYWcoVEFHX05BTUVTLlNUWUxFLCBzdHlsZVRhZ3MsIGVuY29kZSksXG4gICAgICAgIHRpdGxlOiBnZXRNZXRob2RzRm9yVGFnKFRBR19OQU1FUy5USVRMRSwgeyB0aXRsZTogdGl0bGUsIHRpdGxlQXR0cmlidXRlczogdGl0bGVBdHRyaWJ1dGVzIH0sIGVuY29kZSlcbiAgICB9O1xufTtcblxudmFyIEhlbG1ldCA9IGZ1bmN0aW9uIEhlbG1ldChDb21wb25lbnQpIHtcbiAgICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICAgIHJldHVybiBfdGVtcCA9IF9jbGFzcyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgICAgIGluaGVyaXRzKEhlbG1ldFdyYXBwZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIEhlbG1ldFdyYXBwZXIoKSB7XG4gICAgICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBIZWxtZXRXcmFwcGVyKTtcbiAgICAgICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzRXF1YWwodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5tYXBOZXN0ZWRDaGlsZHJlblRvUHJvcHMgPSBmdW5jdGlvbiBtYXBOZXN0ZWRDaGlsZHJlblRvUHJvcHMoY2hpbGQsIG5lc3RlZENoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoIW5lc3RlZENoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLlNDUklQVDpcbiAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5OT1NDUklQVDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogbmVzdGVkQ2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLlNUWUxFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dDogbmVzdGVkQ2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPFwiICsgY2hpbGQudHlwZSArIFwiIC8+IGVsZW1lbnRzIGFyZSBzZWxmLWNsb3NpbmcgYW5kIGNhbiBub3QgY29udGFpbiBjaGlsZHJlbi4gUmVmZXIgdG8gb3VyIEFQSSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUuZmxhdHRlbkFycmF5VHlwZUNoaWxkcmVuID0gZnVuY3Rpb24gZmxhdHRlbkFycmF5VHlwZUNoaWxkcmVuKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBfYmFiZWxIZWxwZXJzJGV4dGVuZHM7XG5cbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9yZWYuY2hpbGQsXG4gICAgICAgICAgICAgICAgYXJyYXlUeXBlQ2hpbGRyZW4gPSBfcmVmLmFycmF5VHlwZUNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBfcmVmLm5ld0NoaWxkUHJvcHMsXG4gICAgICAgICAgICAgICAgbmVzdGVkQ2hpbGRyZW4gPSBfcmVmLm5lc3RlZENoaWxkcmVuO1xuXG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFycmF5VHlwZUNoaWxkcmVuLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tjaGlsZC50eXBlXSA9IFtdLmNvbmNhdChhcnJheVR5cGVDaGlsZHJlbltjaGlsZC50eXBlXSB8fCBbXSwgW19leHRlbmRzKHt9LCBuZXdDaGlsZFByb3BzLCB0aGlzLm1hcE5lc3RlZENoaWxkcmVuVG9Qcm9wcyhjaGlsZCwgbmVzdGVkQ2hpbGRyZW4pKV0pLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBIZWxtZXRXcmFwcGVyLnByb3RvdHlwZS5tYXBPYmplY3RUeXBlQ2hpbGRyZW4gPSBmdW5jdGlvbiBtYXBPYmplY3RUeXBlQ2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgICAgICAgIHZhciBfYmFiZWxIZWxwZXJzJGV4dGVuZHMyLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMzO1xuXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBfcmVmMi5jaGlsZCxcbiAgICAgICAgICAgICAgICBuZXdQcm9wcyA9IF9yZWYyLm5ld1Byb3BzLFxuICAgICAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBfcmVmMi5uZXdDaGlsZFByb3BzLFxuICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuID0gX3JlZjIubmVzdGVkQ2hpbGRyZW47XG5cbiAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLlRJVExFOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzMiA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMyW2NoaWxkLnR5cGVdID0gbmVzdGVkQ2hpbGRyZW4sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczIudGl0bGVBdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMyKSk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFRBR19OQU1FUy5CT0RZOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QXR0cmlidXRlczogX2V4dGVuZHMoe30sIG5ld0NoaWxkUHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuSFRNTDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBuZXdQcm9wcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBuZXdDaGlsZFByb3BzKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBuZXdQcm9wcywgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kczMgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzM1tjaGlsZC50eXBlXSA9IF9leHRlbmRzKHt9LCBuZXdDaGlsZFByb3BzKSwgX2JhYmVsSGVscGVycyRleHRlbmRzMykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLm1hcEFycmF5VHlwZUNoaWxkcmVuVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcEFycmF5VHlwZUNoaWxkcmVuVG9Qcm9wcyhhcnJheVR5cGVDaGlsZHJlbiwgbmV3UHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBuZXdGbGF0dGVuZWRQcm9wcyA9IF9leHRlbmRzKHt9LCBuZXdQcm9wcyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGFycmF5VHlwZUNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChhcnJheUNoaWxkTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYmFiZWxIZWxwZXJzJGV4dGVuZHM0O1xuXG4gICAgICAgICAgICAgICAgbmV3RmxhdHRlbmVkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgbmV3RmxhdHRlbmVkUHJvcHMsIChfYmFiZWxIZWxwZXJzJGV4dGVuZHM0ID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kczRbYXJyYXlDaGlsZE5hbWVdID0gYXJyYXlUeXBlQ2hpbGRyZW5bYXJyYXlDaGlsZE5hbWVdLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHM0KSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ld0ZsYXR0ZW5lZFByb3BzO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLndhcm5PbkludmFsaWRDaGlsZHJlbiA9IGZ1bmN0aW9uIHdhcm5PbkludmFsaWRDaGlsZHJlbihjaGlsZCwgbmVzdGVkQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIVZBTElEX1RBR19OQU1FUy5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC50eXBlID09PSBuYW1lO1xuICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2hpbGQudHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2FybihcIllvdSBtYXkgYmUgYXR0ZW1wdGluZyB0byBuZXN0IDxIZWxtZXQ+IGNvbXBvbmVudHMgd2l0aGluIGVhY2ggb3RoZXIsIHdoaWNoIGlzIG5vdCBhbGxvd2VkLiBSZWZlciB0byBvdXIgQVBJIGZvciBtb3JlIGluZm9ybWF0aW9uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXJuKFwiT25seSBlbGVtZW50cyB0eXBlcyBcIiArIFZBTElEX1RBR19OQU1FUy5qb2luKFwiLCBcIikgKyBcIiBhcmUgYWxsb3dlZC4gSGVsbWV0IGRvZXMgbm90IHN1cHBvcnQgcmVuZGVyaW5nIDxcIiArIGNoaWxkLnR5cGUgKyBcIj4gZWxlbWVudHMuIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRDaGlsZHJlbiAmJiB0eXBlb2YgbmVzdGVkQ2hpbGRyZW4gIT09IFwic3RyaW5nXCIgJiYgKCFBcnJheS5pc0FycmF5KG5lc3RlZENoaWxkcmVuKSB8fCBuZXN0ZWRDaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChuZXN0ZWRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIG5lc3RlZENoaWxkICE9PSBcInN0cmluZ1wiO1xuICAgICAgICAgICAgICAgIH0pKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJIZWxtZXQgZXhwZWN0cyBhIHN0cmluZyBhcyBhIGNoaWxkIG9mIDxcIiArIGNoaWxkLnR5cGUgKyBcIj4uIERpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBjaGlsZHJlbiBpbiBicmFjZXM/ICggPFwiICsgY2hpbGQudHlwZSArIFwiPntgYH08L1wiICsgY2hpbGQudHlwZSArIFwiPiApIFJlZmVyIHRvIG91ciBBUEkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgSGVsbWV0V3JhcHBlci5wcm90b3R5cGUubWFwQ2hpbGRyZW5Ub1Byb3BzID0gZnVuY3Rpb24gbWFwQ2hpbGRyZW5Ub1Byb3BzKGNoaWxkcmVuLCBuZXdQcm9wcykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBhcnJheVR5cGVDaGlsZHJlbiA9IHt9O1xuXG4gICAgICAgICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5wcm9wcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIF9jaGlsZCRwcm9wcyA9IGNoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgICBuZXN0ZWRDaGlsZHJlbiA9IF9jaGlsZCRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRQcm9wcyA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9jaGlsZCRwcm9wcywgW1wiY2hpbGRyZW5cIl0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMgPSBjb252ZXJ0UmVhY3RQcm9wc3RvSHRtbEF0dHJpYnV0ZXMoY2hpbGRQcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIud2Fybk9uSW52YWxpZENoaWxkcmVuKGNoaWxkLCBuZXN0ZWRDaGlsZHJlbik7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoaWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuTElOSzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuTUVUQTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuTk9TQ1JJUFQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVEFHX05BTUVTLlNDUklQVDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUQUdfTkFNRVMuU1RZTEU6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbiA9IF90aGlzMi5mbGF0dGVuQXJyYXlUeXBlQ2hpbGRyZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVR5cGVDaGlsZHJlbjogYXJyYXlUeXBlQ2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGRQcm9wczogbmV3Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWRDaGlsZHJlbjogbmVzdGVkQ2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gX3RoaXMyLm1hcE9iamVjdFR5cGVDaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Byb3BzOiBuZXdQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZFByb3BzOiBuZXdDaGlsZFByb3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZENoaWxkcmVuOiBuZXN0ZWRDaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3UHJvcHMgPSB0aGlzLm1hcEFycmF5VHlwZUNoaWxkcmVuVG9Qcm9wcyhhcnJheVR5cGVDaGlsZHJlbiwgbmV3UHJvcHMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1Byb3BzO1xuICAgICAgICB9O1xuXG4gICAgICAgIEhlbG1ldFdyYXBwZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgIHByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJjaGlsZHJlblwiXSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdQcm9wcyA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gdGhpcy5tYXBDaGlsZHJlblRvUHJvcHMoY2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBuZXdQcm9wcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY3JlYXRlQ2xhc3MoSGVsbWV0V3JhcHBlciwgbnVsbCwgW3tcbiAgICAgICAgICAgIGtleTogXCJjYW5Vc2VET01cIixcblxuXG4gICAgICAgICAgICAvLyBDb21wb25lbnQucGVlayBjb21lcyBmcm9tIHJlYWN0LXNpZGUtZWZmZWN0OlxuICAgICAgICAgICAgLy8gRm9yIHRlc3RpbmcsIHlvdSBtYXkgdXNlIGEgc3RhdGljIHBlZWsoKSBtZXRob2QgYXZhaWxhYmxlIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQuXG4gICAgICAgICAgICAvLyBJdCBsZXRzIHlvdSBnZXQgdGhlIGN1cnJlbnQgc3RhdGUgd2l0aG91dCByZXNldHRpbmcgdGhlIG1vdW50ZWQgaW5zdGFuY2Ugc3RhY2suXG4gICAgICAgICAgICAvLyBEb25cdTIwMTl0IHVzZSBpdCBmb3IgYW55dGhpbmcgb3RoZXIgdGhhbiB0ZXN0aW5nLlxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBiYXNlOiB7XCJ0YXJnZXRcIjogXCJfYmxhbmtcIiwgXCJocmVmXCI6IFwiaHR0cDovL215c2l0ZS5jb20vXCJ9XG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gYm9keUF0dHJpYnV0ZXM6IHtcImNsYXNzTmFtZVwiOiBcInJvb3RcIn1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkZWZhdWx0VGl0bGU6IFwiRGVmYXVsdCBUaXRsZVwiXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGRlZmVyOiB0cnVlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gaHRtbEF0dHJpYnV0ZXM6IHtcImxhbmdcIjogXCJlblwiLCBcImFtcFwiOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBsaW5rOiBbe1wicmVsXCI6IFwiY2Fub25pY2FsXCIsIFwiaHJlZlwiOiBcImh0dHA6Ly9teXNpdGUuY29tL2V4YW1wbGVcIn1dXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBtZXRhOiBbe1wibmFtZVwiOiBcImRlc2NyaXB0aW9uXCIsIFwiY29udGVudFwiOiBcIlRlc3QgZGVzY3JpcHRpb25cIn1dXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBub3NjcmlwdDogW3tcImlubmVySFRNTFwiOiBcIjxpbWcgc3JjPSdodHRwOi8vbXlzaXRlLmNvbS9qcy90ZXN0LmpzJ1wifV1cbiAgICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQ2hhbmdlQ2xpZW50U3RhdGU6IFwiKG5ld1N0YXRlKSA9PiBjb25zb2xlLmxvZyhuZXdTdGF0ZSlcIlxuICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gc2NyaXB0OiBbe1widHlwZVwiOiBcInRleHQvamF2YXNjcmlwdFwiLCBcInNyY1wiOiBcImh0dHA6Ly9teXNpdGUuY29tL2pzL3Rlc3QuanNcIn1dXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzdHlsZTogW3tcInR5cGVcIjogXCJ0ZXh0L2Nzc1wiLCBcImNzc1RleHRcIjogXCJkaXYgeyBkaXNwbGF5OiBibG9jazsgY29sb3I6IGJsdWU7IH1cIn1dXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGl0bGU6IFwiVGl0bGVcIlxuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHRpdGxlQXR0cmlidXRlczoge1wiaXRlbXByb3BcIjogXCJuYW1lXCJ9XG4gICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGl0bGVUZW1wbGF0ZTogXCJNeVNpdGUuY29tIC0gJXNcIlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShjYW5Vc2VET00pIHtcbiAgICAgICAgICAgICAgICBDb21wb25lbnQuY2FuVXNlRE9NID0gY2FuVXNlRE9NO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG4gICAgICAgIHJldHVybiBIZWxtZXRXcmFwcGVyO1xuICAgIH0oUmVhY3QuQ29tcG9uZW50KSwgX2NsYXNzLnByb3BUeXBlcyA9IHtcbiAgICAgICAgYmFzZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgYm9keUF0dHJpYnV0ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubm9kZSksIFByb3BUeXBlcy5ub2RlXSksXG4gICAgICAgIGRlZmF1bHRUaXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVmZXI6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVyczogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGh0bWxBdHRyaWJ1dGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICBsaW5rOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgbWV0YTogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG4gICAgICAgIG5vc2NyaXB0OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgb25DaGFuZ2VDbGllbnRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIHNjcmlwdDogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG4gICAgICAgIHN0eWxlOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgICAgICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHRpdGxlQXR0cmlidXRlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgdGl0bGVUZW1wbGF0ZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0sIF9jbGFzcy5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRlZmVyOiB0cnVlLFxuICAgICAgICBlbmNvZGVTcGVjaWFsQ2hhcmFjdGVyczogdHJ1ZVxuICAgIH0sIF9jbGFzcy5wZWVrID0gQ29tcG9uZW50LnBlZWssIF9jbGFzcy5yZXdpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYXBwZWRTdGF0ZSA9IENvbXBvbmVudC5yZXdpbmQoKTtcbiAgICAgICAgaWYgKCFtYXBwZWRTdGF0ZSkge1xuICAgICAgICAgICAgLy8gcHJvdmlkZSBmYWxsYmFjayBpZiBtYXBwZWRTdGF0ZSBpcyB1bmRlZmluZWRcbiAgICAgICAgICAgIG1hcHBlZFN0YXRlID0gbWFwU3RhdGVPblNlcnZlcih7XG4gICAgICAgICAgICAgICAgYmFzZVRhZzogW10sXG4gICAgICAgICAgICAgICAgYm9keUF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICAgICAgICAgIGVuY29kZVNwZWNpYWxDaGFyYWN0ZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGh0bWxBdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgICAgICAgICBsaW5rVGFnczogW10sXG4gICAgICAgICAgICAgICAgbWV0YVRhZ3M6IFtdLFxuICAgICAgICAgICAgICAgIG5vc2NyaXB0VGFnczogW10sXG4gICAgICAgICAgICAgICAgc2NyaXB0VGFnczogW10sXG4gICAgICAgICAgICAgICAgc3R5bGVUYWdzOiBbXSxcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJcIixcbiAgICAgICAgICAgICAgICB0aXRsZUF0dHJpYnV0ZXM6IHt9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXBwZWRTdGF0ZTtcbiAgICB9LCBfdGVtcDtcbn07XG5cbnZhciBOdWxsQ29tcG9uZW50ID0gZnVuY3Rpb24gTnVsbENvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBIZWxtZXRTaWRlRWZmZWN0cyA9IHdpdGhTaWRlRWZmZWN0KHJlZHVjZVByb3BzVG9TdGF0ZSwgaGFuZGxlQ2xpZW50U3RhdGVDaGFuZ2UsIG1hcFN0YXRlT25TZXJ2ZXIpKE51bGxDb21wb25lbnQpO1xuXG52YXIgSGVsbWV0RXhwb3J0ID0gSGVsbWV0KEhlbG1ldFNpZGVFZmZlY3RzKTtcbkhlbG1ldEV4cG9ydC5yZW5kZXJTdGF0aWMgPSBIZWxtZXRFeHBvcnQucmV3aW5kO1xuXG5leHBvcnQgZGVmYXVsdCBIZWxtZXRFeHBvcnQ7XG5leHBvcnQgeyBIZWxtZXRFeHBvcnQgYXMgSGVsbWV0IH07XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQXBwTG9hZGVyKCkge1xuICByZXR1cm4gPGRpdj5MT0FESU5HLi4uPC9kaXY+O1xufVxuIiwgImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gZ2V0Um9vdFVybCgpOiBzdHJpbmcge1xuICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2ggfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgcmV0dXJuIHBhdGhuYW1lICsgc2VhcmNoO1xufVxuZnVuY3Rpb24gZ2V0RW5jb2RlZFJvb3RVcmwoKTogc3RyaW5nIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChnZXRSb290VXJsKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQXV0aFBhZ2UoKSB7XG4gIGNvbnN0IGF1dGhVcmwgPSBgL2F1dGgvZ29vZ2xlP3I9JHtnZXRFbmNvZGVkUm9vdFVybCgpfWA7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxwPlxuICAgICAgICBXZWxjb21lIHRvIDxiPlNIQTwvYj5yZWQgPGI+Q0FMPC9iPmVuZGFyXG4gICAgICA8L3A+XG4gICAgICA8YSBocmVmPXthdXRoVXJsfT5bR09PR0xFXSBTdGFydDwvYT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsICIvKiogUmVwcmVzZW50cyBrZXktdmFsdWUgbWFwIHdpdGggc3RyaW5nIGtleXMgKi9cbmV4cG9ydCB0eXBlIERpY3Rpb25hcnk8VCA9IHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgVD47XG5cbmV4cG9ydCB0eXBlIEZhaWx1cmVSZWFzb24gPSBcInVua25vd25cIiB8IFwiNDAxXCI7XG5cbmV4cG9ydCB0eXBlIFN1Y2Nlc3M8VD4gPSB7XG4gIHN1Y2Nlc3M6IHRydWU7XG4gIHZhbHVlOiBUO1xufTtcbmV4cG9ydCB0eXBlIEZhaWx1cmUgPSB7XG4gIHN1Y2Nlc3M6IGZhbHNlO1xuICByZWFzb246IEZhaWx1cmVSZWFzb247XG59O1xuZXhwb3J0IHR5cGUgUmVzdWx0PFQ+ID0gU3VjY2VzczxUPiB8IEZhaWx1cmU7XG5leHBvcnQgdHlwZSBBc3luY1Jlc3VsdDxUPiA9IFByb21pc2U8UmVzdWx0PFQ+PjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyeUdldEpzb25NZXNzYWdlKHM6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHMpO1xuICAgIHJldHVybiBqc29uLm1lc3NhZ2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF1c2UobXM6IG51bWJlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuY29uc3QgZGF0ZUZvcm1hdHRlciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFtcInJ1XCJdLCB7XG4gIHdlZWtkYXk6IFwibG9uZ1wiLFxuICBkYXk6IFwiMi1kaWdpdFwiLFxuICBtb250aDogXCJsb25nXCIsXG4gIHllYXI6IFwibnVtZXJpY1wiLFxuICBob3VyOiBcIjItZGlnaXRcIixcbiAgbWludXRlOiBcIjItZGlnaXRcIixcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlOiBEYXRlKSB7XG4gIHJldHVybiBkYXRlRm9ybWF0dGVyLmZvcm1hdChkYXRlKTtcbn1cblxuZXhwb3J0IGNvbnN0IE1TX0lOX01JTlVURSA9IDYwICogMTAwMDtcbmV4cG9ydCBmdW5jdGlvbiBnZXREdXJhdGlvbih7IHN0YXJ0LCBlbmQgfTogeyBzdGFydDogc3RyaW5nOyBlbmQ6IHN0cmluZyB9KSB7XG4gIGNvbnN0IGRpZmYgPSBuZXcgRGF0ZShlbmQpLmdldFRpbWUoKSAtIG5ldyBEYXRlKHN0YXJ0KS5nZXRUaW1lKCk7XG4gIHJldHVybiBkaWZmIC8gTVNfSU5fTUlOVVRFO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llVmFsdWUoXG4gIGNvb2tpZXM6IHN0cmluZ1tdLFxuICBjb29raWVOYW1lOiBzdHJpbmdcbik6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCBwcmVmaXggPSBgJHtjb29raWVOYW1lfT1gO1xuICBjb25zdCBjb29raWUgPSBjb29raWVzLmZpbmQoKGMpID0+IGMuc3RhcnRzV2l0aChwcmVmaXgpKTtcbiAgcmV0dXJuIGNvb2tpZT8ucmVwbGFjZShwcmVmaXgsIFwiXCIpID8/IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbWFpbHMoKTogc3RyaW5nW10ge1xuICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiO1wiKS5tYXAoKGMpID0+IGMudHJpbSgpKTtcbiAgY29uc3QgZW1haWxzVG9rZW4gPSBnZXRDb29raWVWYWx1ZShjb29raWVzLCBcImVtYWlsc1wiKSA/PyBcIlwiO1xuICBjb25zdCBbXywgcGF5bG9hZEJhc2U2NCwgX19dID0gZW1haWxzVG9rZW4uc3BsaXQoXCIuXCIpO1xuICB0cnkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBKU09OLnBhcnNlKGF0b2IocGF5bG9hZEJhc2U2NCA/PyBcIlwiKSk7XG4gICAgcmV0dXJuIHBheWxvYWQuZW1haWxzO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgdHJ5R2V0SnNvbk1lc3NhZ2UgfSBmcm9tIFwidXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgU2hhY2FsRXZlbnRBdHRlbmRlZSA9IHtcbiAgZW1haWw6IHN0cmluZztcbiAgc3RhdHVzOiBcImRlY2xpbmVkXCIgfCBcInRlbnRhdGl2ZVwiIHwgXCJhY2NlcHRlZFwiO1xufTtcblxuZXhwb3J0IHR5cGUgU2hhY2FsRXZlbnQgPSB7XG4gIHB1YmxpY0lkOiBzdHJpbmc7XG4gIG93bmVkOiBib29sZWFuO1xuICBzdW1tYXJ5OiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHN0YXJ0OiBzdHJpbmc7XG4gIGVuZDogc3RyaW5nO1xuICBsb2NhdGlvbjogc3RyaW5nO1xuICBhdHRlbmRlZXM/OiBTaGFjYWxFdmVudEF0dGVuZGVlW107XG59O1xuXG5leHBvcnQgdHlwZSBFdmVudFBheWxvYWQgPSB7XG4gIHN1bW1hcnk6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc3RhcnQ6IHN0cmluZztcbiAgZW5kOiBzdHJpbmc7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBDcmVhdGVFdmVudFBhcmFtcyA9IHtcbiAgc2hhY2FsUHVibGljSWQ6IHN0cmluZztcbiAgZXZlbnQ6IEV2ZW50UGF5bG9hZDtcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRXZlbnQoe1xuICBzaGFjYWxQdWJsaWNJZCxcbiAgZXZlbnQsXG59OiBDcmVhdGVFdmVudFBhcmFtcyk6IFByb21pc2U8U2hhY2FsRXZlbnQ+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYC9hcGkvYy9zLyR7c2hhY2FsUHVibGljSWR9L2VgLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShldmVudCksXG4gIH0pO1xuICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24udmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIHJlcy5zdGF0dXMgPT09IDQwMFxuICAgICAgPyB0cnlHZXRKc29uTWVzc2FnZShhd2FpdCByZXMudGV4dCgpKVxuICAgICAgOiByZXMuc3RhdHVzLnRvU3RyaW5nKClcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRFdmVudChwdWJsaWNJZDogc3RyaW5nKTogUHJvbWlzZTxTaGFjYWxFdmVudD4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgL2FwaS9lLyR7cHVibGljSWR9YCk7XG4gIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgcmVzLnN0YXR1cyA9PT0gNDAwXG4gICAgICA/IHRyeUdldEpzb25NZXNzYWdlKGF3YWl0IHJlcy50ZXh0KCkpXG4gICAgICA6IHJlcy5zdGF0dXMudG9TdHJpbmcoKVxuICApO1xufVxuXG5leHBvcnQgdHlwZSBVcGRhdGVFdmVudFBhcmFtcyA9IHtcbiAgcHVibGljSWQ6IHN0cmluZztcbiAgZXZlbnQ6IEV2ZW50UGF5bG9hZDtcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlRXZlbnQoe1xuICBwdWJsaWNJZCxcbiAgZXZlbnQsXG59OiBVcGRhdGVFdmVudFBhcmFtcyk6IFByb21pc2U8U2hhY2FsRXZlbnQ+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYC9hcGkvZS8ke3B1YmxpY0lkfWAsIHtcbiAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZXZlbnQpLFxuICB9KTtcbiAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnZhbHVlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICByZXMuc3RhdHVzID09PSA0MDBcbiAgICAgID8gdHJ5R2V0SnNvbk1lc3NhZ2UoYXdhaXQgcmVzLnRleHQoKSlcbiAgICAgIDogcmVzLnN0YXR1cy50b1N0cmluZygpXG4gICk7XG59XG5cbmV4cG9ydCB0eXBlIEpvaW5FdmVudFBhcmFtcyA9IHtcbiAgcHVibGljSWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gam9pbkV2ZW50KHtcbiAgcHVibGljSWQsXG4gIGVtYWlsLFxufTogSm9pbkV2ZW50UGFyYW1zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAvYXBpL2UvJHtwdWJsaWNJZH0vam9pbmAsIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZW1haWwgfSksXG4gIH0pO1xuICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICByZXMuc3RhdHVzID09PSA0MDBcbiAgICAgID8gdHJ5R2V0SnNvbk1lc3NhZ2UoYXdhaXQgcmVzLnRleHQoKSlcbiAgICAgIDogcmVzLnN0YXR1cy50b1N0cmluZygpXG4gICk7XG59XG4iLCAiaW1wb3J0IHsgdHJ5R2V0SnNvbk1lc3NhZ2UgfSBmcm9tIFwidXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgQ2FsZW5kYXIgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHN1bW1hcnk6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgY29sb3I6IHN0cmluZztcbiAgcHVibGljSWQ/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDYWxlbmRhcnNMaXN0KCk6IFByb21pc2U8Q2FsZW5kYXJbXT4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChcIi9hcGkvYy9saXN0XCIpO1xuICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgcmV0dXJuIGF3YWl0IHJlcy5qc29uKCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIHJlcy5zdGF0dXMgPT09IDQwMFxuICAgICAgPyB0cnlHZXRKc29uTWVzc2FnZShhd2FpdCByZXMudGV4dCgpKVxuICAgICAgOiByZXMuc3RhdHVzLnRvU3RyaW5nKClcbiAgKTtcbn1cbiIsICJpbXBvcnQgeyB0cnlHZXRKc29uTWVzc2FnZSB9IGZyb20gXCJ1dGlsc1wiO1xuaW1wb3J0IHsgU2hhY2FsRXZlbnQgfSBmcm9tIFwiLi9ldmVudFwiO1xuXG5leHBvcnQgdHlwZSBTaGFjYWwgPSB7XG4gIG93bmVkOiBib29sZWFuO1xuICBjYW5BZGQ6IGJvb2xlYW47XG4gIGFkZFBlcm1pc3Npb25HcmFudGVkVG8/OiBzdHJpbmdbXTtcbiAgZXZlbnRzOiBTaGFjYWxFdmVudFtdO1xufTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkU2hhY2FsKHB1YmxpY0lkOiBzdHJpbmcpOiBQcm9taXNlPFNoYWNhbD4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgL2FwaS9jL3MvJHtwdWJsaWNJZH1gKTtcbiAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgIHJldHVybiBhd2FpdCByZXMuanNvbigpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICByZXMuc3RhdHVzID09PSA0MDBcbiAgICAgID8gdHJ5R2V0SnNvbk1lc3NhZ2UoYXdhaXQgcmVzLnRleHQoKSlcbiAgICAgIDogcmVzLnN0YXR1cy50b1N0cmluZygpXG4gICk7XG59XG4iLCAiaW1wb3J0IHsgdHJ5R2V0SnNvbk1lc3NhZ2UgfSBmcm9tIFwidXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgU2F2ZVNoYWNhbFBlcm1pc3Npb25zUGFyYW1zID0ge1xuICBwdWJsaWNJZDogc3RyaW5nO1xuICBhZGRQZXJtaXNzaW9uR3JhbnRlZFRvOiBzdHJpbmdbXTtcbn07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZVNoYWNhbFBlcm1pc3Npb25zKHtcbiAgcHVibGljSWQsXG4gIGFkZFBlcm1pc3Npb25HcmFudGVkVG8sXG59OiBTYXZlU2hhY2FsUGVybWlzc2lvbnNQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYC9hcGkvYy9zLyR7cHVibGljSWR9L3BgLCB7XG4gICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYWRkUGVybWlzc2lvbkdyYW50ZWRUbyB9KSxcbiAgfSk7XG4gIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIHJlcy5zdGF0dXMgPT09IDQwMFxuICAgICAgPyB0cnlHZXRKc29uTWVzc2FnZShhd2FpdCByZXMudGV4dCgpKVxuICAgICAgOiByZXMuc3RhdHVzLnRvU3RyaW5nKClcbiAgKTtcbn1cbiIsICJpbXBvcnQgeyB0cnlHZXRKc29uTWVzc2FnZSB9IGZyb20gXCJ1dGlsc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hhcmVDYWxlbmRhcihnb29nbGVDYWxlbmRhcklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgL2FwaS9jL3MvJHtlbmNvZGVVUklDb21wb25lbnQoZ29vZ2xlQ2FsZW5kYXJJZCl9YCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gIH0pO1xuICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGRhdGEucHVibGljSWQ7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIHJlcy5zdGF0dXMgPT09IDQwMFxuICAgICAgPyB0cnlHZXRKc29uTWVzc2FnZShhd2FpdCByZXMudGV4dCgpKVxuICAgICAgOiByZXMuc3RhdHVzLnRvU3RyaW5nKClcbiAgKTtcbn1cbiIsICJpbXBvcnQgeyBDYWxlbmRhciwgbG9hZENhbGVuZGFyc0xpc3QgfSBmcm9tIFwiQHNoYWNhbC91aS9kYXRhLWFjY2Vzc1wiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5LCB1c2VRdWVyeUNsaWVudCwgVXNlUXVlcnlSZXN1bHQgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcblxuY29uc3QgQ0FMRU5EQVJfTElTVF9LRVkgPSBcIkNBTEVOREFSX0xJU1RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhbGVuZGFyc0xpc3QoKTogVXNlUXVlcnlSZXN1bHQ8Q2FsZW5kYXJbXSwgRXJyb3I+IHtcbiAgcmV0dXJuIHVzZVF1ZXJ5KENBTEVOREFSX0xJU1RfS0VZLCBsb2FkQ2FsZW5kYXJzTGlzdCwge1xuICAgIHJldHJ5KGZhaWx1cmVDb3VudDogbnVtYmVyLCBlcnJvcjogRXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlICE9PSBcIjQwMVwiICYmIGZhaWx1cmVDb3VudCA8IDM7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbnZhbGlkYXRlQ2FsZW5kYXJzTGlzdCgpOiAoKSA9PiB2b2lkIHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKENBTEVOREFSX0xJU1RfS0VZKTtcbiAgfSwgW3F1ZXJ5Q2xpZW50XSk7XG59XG4iLCAiaW1wb3J0IHsgbG9hZEV2ZW50LCBTaGFjYWxFdmVudCB9IGZyb20gXCJAc2hhY2FsL3VpL2RhdGEtYWNjZXNzXCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlUXVlcnksIHVzZVF1ZXJ5Q2xpZW50LCBVc2VRdWVyeVJlc3VsdCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuXG5jb25zdCBTSEFDQUxfS0VZID0gXCJFVkVOVFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRXZlbnQocHVibGljSWQ6IHN0cmluZyk6IFVzZVF1ZXJ5UmVzdWx0PFNoYWNhbEV2ZW50LCBFcnJvcj4ge1xuICByZXR1cm4gdXNlUXVlcnkoW1NIQUNBTF9LRVksIHB1YmxpY0lkXSwgKCkgPT4gbG9hZEV2ZW50KHB1YmxpY0lkKSwge1xuICAgIHJldHJ5KGZhaWx1cmVDb3VudDogbnVtYmVyLCBlcnJvcjogRXJyb3IpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGVycm9yLm1lc3NhZ2UgIT09IFwiNDAxXCIgJiYgZXJyb3IubWVzc2FnZSAhPT0gXCI0MDRcIiAmJiBmYWlsdXJlQ291bnQgPCAzXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlSW52YWxpZGF0ZUV2ZW50KCk6IChwdWJsaWNJZDogc3RyaW5nKSA9PiB2b2lkIHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soXG4gICAgKHB1YmxpY0lkKSA9PiB7XG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyhbU0hBQ0FMX0tFWSwgcHVibGljSWRdKTtcbiAgICB9LFxuICAgIFtxdWVyeUNsaWVudF1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNldEV2ZW50KCk6IChldmVudDogU2hhY2FsRXZlbnQpID0+IHZvaWQge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoZXZlbnQpID0+IHtcbiAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShbU0hBQ0FMX0tFWSwgZXZlbnQucHVibGljSWRdLCBldmVudCk7XG4gICAgfSxcbiAgICBbcXVlcnlDbGllbnRdXG4gICk7XG59XG4iLCAiaW1wb3J0IHtcbiAgY3JlYXRlRXZlbnQsXG4gIENyZWF0ZUV2ZW50UGFyYW1zLFxuICBTaGFjYWxFdmVudCxcbn0gZnJvbSBcIkBzaGFjYWwvdWkvZGF0YS1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uLCBVc2VNdXRhdGlvblJlc3VsdCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgdXNlU2V0RXZlbnQgfSBmcm9tIFwiLi91c2VFdmVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlRXZlbnQoKTogVXNlTXV0YXRpb25SZXN1bHQ8XG4gIFNoYWNhbEV2ZW50LFxuICBFcnJvcixcbiAgQ3JlYXRlRXZlbnRQYXJhbXNcbj4ge1xuICBjb25zdCBzZXRFdmVudCA9IHVzZVNldEV2ZW50KCk7XG4gIGNvbnN0IG0gPSB1c2VNdXRhdGlvbjxTaGFjYWxFdmVudCwgRXJyb3IsIENyZWF0ZUV2ZW50UGFyYW1zPihjcmVhdGVFdmVudCwge1xuICAgIG9uU3VjY2VzcyhldmVudCkge1xuICAgICAgc2V0RXZlbnQoZXZlbnQpO1xuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gbTtcbn1cbiIsICJpbXBvcnQge1xuICBqb2luRXZlbnQsXG4gIEpvaW5FdmVudFBhcmFtcyxcbn0gZnJvbSBcIkBzaGFjYWwvdWkvZGF0YS1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uLCBVc2VNdXRhdGlvblJlc3VsdCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgdXNlSW52YWxpZGF0ZUV2ZW50IH0gZnJvbSBcIi4vdXNlRXZlbnRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUpvaW5FdmVudCgpOiBVc2VNdXRhdGlvblJlc3VsdDxcbiAgdm9pZCxcbiAgRXJyb3IsXG4gIEpvaW5FdmVudFBhcmFtc1xuPiB7XG4gIGNvbnN0IGludmFsaWRhdGVFdmVudCA9IHVzZUludmFsaWRhdGVFdmVudCgpO1xuICBjb25zdCBtID0gdXNlTXV0YXRpb248dm9pZCwgRXJyb3IsIEpvaW5FdmVudFBhcmFtcz4oam9pbkV2ZW50LCB7XG4gICAgb25TdWNjZXNzKF8sIHsgcHVibGljSWQgfSkge1xuICAgICAgaW52YWxpZGF0ZUV2ZW50KHB1YmxpY0lkKTtcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIG07XG59XG4iLCAiaW1wb3J0IHsgbG9hZFNoYWNhbCwgU2hhY2FsIH0gZnJvbSBcIkBzaGFjYWwvdWkvZGF0YS1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQsIFVzZVF1ZXJ5UmVzdWx0IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5cbmNvbnN0IFNIQUNBTF9LRVkgPSBcIkNBTEVOREFSXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTaGFjYWwocHVibGljSWQ6IHN0cmluZyk6IFVzZVF1ZXJ5UmVzdWx0PFNoYWNhbCwgRXJyb3I+IHtcbiAgcmV0dXJuIHVzZVF1ZXJ5KFtTSEFDQUxfS0VZLCBwdWJsaWNJZF0sICgpID0+IGxvYWRTaGFjYWwocHVibGljSWQpLCB7XG4gICAgcmV0cnkoZmFpbHVyZUNvdW50OiBudW1iZXIsIGVycm9yOiBFcnJvcikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgZXJyb3IubWVzc2FnZSAhPT0gXCI0MDFcIiAmJiBlcnJvci5tZXNzYWdlICE9PSBcIjQwNFwiICYmIGZhaWx1cmVDb3VudCA8IDNcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJbnZhbGlkYXRlU2hhY2FsKCk6IChwdWJsaWNJZDogc3RyaW5nKSA9PiB2b2lkIHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soXG4gICAgKHB1YmxpY0lkOiBzdHJpbmcpID0+IHtcbiAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKFtTSEFDQUxfS0VZLCBwdWJsaWNJZF0pO1xuICAgIH0sXG4gICAgW3F1ZXJ5Q2xpZW50XVxuICApO1xufVxuIiwgImltcG9ydCB7IHNoYXJlQ2FsZW5kYXIgfSBmcm9tIFwiQHNoYWNhbC91aS9kYXRhLWFjY2Vzc1wiO1xuaW1wb3J0IHsgdXNlTXV0YXRpb24sIFVzZU11dGF0aW9uUmVzdWx0IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyB1c2VJbnZhbGlkYXRlQ2FsZW5kYXJzTGlzdCB9IGZyb20gXCIuL3VzZUNhbGVuZGFyc0xpc3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNoYXJlQ2FsZW5kYXIoKTogVXNlTXV0YXRpb25SZXN1bHQ8XG4gIHN0cmluZyxcbiAgRXJyb3IsXG4gIHN0cmluZyxcbiAgc3RyaW5nXG4+IHtcbiAgY29uc3QgaW52YWxpZGF0ZUNhbGVuZGFyc0xpc3QgPSB1c2VJbnZhbGlkYXRlQ2FsZW5kYXJzTGlzdCgpO1xuICBjb25zdCBtID0gdXNlTXV0YXRpb248c3RyaW5nLCBFcnJvciwgc3RyaW5nLCBzdHJpbmc+KHNoYXJlQ2FsZW5kYXIsIHtcbiAgICBvbk11dGF0ZShnb29nbGVDYWxlbmRhcklkOiBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBnb29nbGVDYWxlbmRhcklkO1xuICAgIH0sXG4gICAgb25TdWNjZXNzKCkge1xuICAgICAgaW52YWxpZGF0ZUNhbGVuZGFyc0xpc3QoKTtcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIG07XG59XG4iLCAiaW1wb3J0IHtcbiAgdXBkYXRlRXZlbnQsXG4gIFVwZGF0ZUV2ZW50UGFyYW1zLFxuICBTaGFjYWxFdmVudCxcbn0gZnJvbSBcIkBzaGFjYWwvdWkvZGF0YS1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uLCBVc2VNdXRhdGlvblJlc3VsdCB9IGZyb20gXCJyZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHsgdXNlU2V0RXZlbnQgfSBmcm9tIFwiLi91c2VFdmVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVXBkYXRlRXZlbnQoKTogVXNlTXV0YXRpb25SZXN1bHQ8XG4gIFNoYWNhbEV2ZW50LFxuICBFcnJvcixcbiAgVXBkYXRlRXZlbnRQYXJhbXNcbj4ge1xuICBjb25zdCBzZXRFdmVudCA9IHVzZVNldEV2ZW50KCk7XG4gIGNvbnN0IG0gPSB1c2VNdXRhdGlvbjxTaGFjYWxFdmVudCwgRXJyb3IsIFVwZGF0ZUV2ZW50UGFyYW1zPih1cGRhdGVFdmVudCwge1xuICAgIG9uU3VjY2VzcyhldmVudCkge1xuICAgICAgc2V0RXZlbnQoZXZlbnQpO1xuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gbTtcbn1cbiIsICJpbXBvcnQgeyBQYWdlIH0gZnJvbSBcIkBzaGFjYWwvdWkvY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgdXNlQ2FsZW5kYXJzTGlzdCB9IGZyb20gXCJAc2hhY2FsL3VpL2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VTaGFyZUNhbGVuZGFyIH0gZnJvbSBcImhvb2tzL3VzZVNoYXJlQ2FsZW5kYXJcIjtcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluaywgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5mdW5jdGlvbiBEb3QoeyBjb2xvciB9OiB7IGNvbG9yOiBzdHJpbmcgfSkge1xuICByZXR1cm4gPHNwYW4gc3R5bGU9e3sgY29sb3IgfX0+JiMxMTA0NDs8L3NwYW4+O1xufVxuXG50eXBlIENhbGVuZGFyU3RhdHVzUHJvcHMgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHB1YmxpY0lkOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsO1xuICBvblNoYXJlOiAoaWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgaXNTaGFyaW5nOiBib29sZWFuO1xuICBzaGFyaW5nSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5mdW5jdGlvbiBDYWxlbmRhclN0YXR1cyh7XG4gIGlkLFxuICBwdWJsaWNJZCxcbiAgc2hhcmluZ0lkLFxuICBpc1NoYXJpbmcsXG4gIG9uU2hhcmUsXG59OiBDYWxlbmRhclN0YXR1c1Byb3BzKSB7XG4gIGlmIChwdWJsaWNJZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIDxMaW5rIHRvPXtgL2NhbGVuZGFyLyR7cHVibGljSWR9YH0+R288L0xpbms+O1xuICB9XG4gIGlmIChpc1NoYXJpbmcgJiYgaWQgPT09IHNoYXJpbmdJZCkge1xuICAgIHJldHVybiA8c3Bhbj5TSEFSSU5HLi4uPC9zcGFuPjtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gb25TaGFyZShpZCl9IGRpc2FibGVkPXtpc1NoYXJpbmd9PlxuICAgICAgU2hhcmVcbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhbGVuZGFyc0xpc3RQYWdlKCkge1xuICBjb25zdCB7IGlzTG9hZGluZywgZXJyb3IsIGRhdGE6IGNhbGVuZGFycyB9ID0gdXNlQ2FsZW5kYXJzTGlzdCgpO1xuICBjb25zdCBzaGFyZSA9IHVzZVNoYXJlQ2FsZW5kYXIoKTtcbiAgcmV0dXJuIChcbiAgICA8UGFnZSB0aXRsZT1cIkdvb2dsZSBDYWxlbmRhcnNcIiBsb2FkaW5nPXtpc0xvYWRpbmd9IHNob3dBdXRoPXtlcnJvcj8ubWVzc2FnZSA9PT0gXCI0MDFcIn0+XG4gICAgICB7KCkgPT4gKFxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAge3NoYXJlLmlzU3VjY2VzcyA/IDxSZWRpcmVjdCB0bz17YC9jYWxlbmRhci8ke3NoYXJlLmRhdGF9YH0gcHVzaCAvPiA6IG51bGx9XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAge2NhbGVuZGFycz8ubWFwKCh7IGlkLCBzdW1tYXJ5LCBjb2xvciwgcHVibGljSWQgfSkgPT4gKFxuICAgICAgICAgICAgICA8bGkga2V5PXtpZH0+XG4gICAgICAgICAgICAgICAgPERvdCBjb2xvcj17Y29sb3J9IC8+XG4gICAgICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICAgICAgPENhbGVuZGFyU3RhdHVzXG4gICAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgICBwdWJsaWNJZD17cHVibGljSWR9XG4gICAgICAgICAgICAgICAgICBpc1NoYXJpbmc9e3NoYXJlLmlzTG9hZGluZ31cbiAgICAgICAgICAgICAgICAgIHNoYXJpbmdJZD17c2hhcmUuY29udGV4dH1cbiAgICAgICAgICAgICAgICAgIG9uU2hhcmU9e3NoYXJlLm11dGF0ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICl9XG4gICAgPC9QYWdlPlxuICApO1xufVxuIiwgImltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiQHNoYWNhbC91aS9jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBTaGFjYWxFdmVudCB9IGZyb20gXCJAc2hhY2FsL3VpL2RhdGEtYWNjZXNzXCI7XG5pbXBvcnQgeyB1c2VTaGFjYWwgfSBmcm9tIFwiQHNoYWNhbC91aS9ob29rc1wiO1xuaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rLCB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gXCJ1dGlsc1wiO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tIFwiLi9wZXJtaXNzaW9uc1wiO1xuXG5mdW5jdGlvbiBBZGRFdmVudExpbmsoeyBwdWJsaWNJZCB9OiB7IHB1YmxpY0lkOiBzdHJpbmcgfSkge1xuICByZXR1cm4gPExpbmsgdG89e2AvY2FsZW5kYXIvJHtwdWJsaWNJZH0vbmV3LWV2ZW50YH0+KyBBZGQgZXZlbnQ8L0xpbms+O1xufVxuXG50eXBlIEV2ZW50Q2FyZFByb3BzID0ge1xuICBldmVudDogU2hhY2FsRXZlbnQ7XG59O1xuZnVuY3Rpb24gRXZlbnRDYXJkKHsgZXZlbnQgfTogRXZlbnRDYXJkUHJvcHMpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGV2ZW50LnN0YXJ0KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPExpbmsgdG89e2AvZXZlbnQvJHtldmVudC5wdWJsaWNJZH1gfT57ZXZlbnQuc3VtbWFyeX08L0xpbms+XG4gICAgICA8ZGl2Pntmb3JtYXREYXRlKGQpfTwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FsZW5kYXJQYWdlKCkge1xuICBjb25zdCB7IHB1YmxpY0lkIH0gPSB1c2VQYXJhbXM8eyBwdWJsaWNJZDogc3RyaW5nIH0+KCk7XG4gIGNvbnN0IHNoYWNhbCA9IHVzZVNoYWNhbChwdWJsaWNJZCk7XG4gIHJldHVybiAoXG4gICAgPFBhZ2VcbiAgICAgIGxvYWRpbmc9e3NoYWNhbC5pc0xvYWRpbmd9XG4gICAgICB0aXRsZT1cIkNhbGVuZGFyXCJcbiAgICAgIHNob3dBdXRoPXtzaGFjYWwuZXJyb3I/Lm1lc3NhZ2UgPT09IFwiNDAxXCJ9XG4gICAgICBzaG93NDA0PXtzaGFjYWwuZXJyb3I/Lm1lc3NhZ2UgPT09IFwiNDA0XCJ9XG4gICAgPlxuICAgICAgeygpID0+IChcbiAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgIHtzaGFjYWwuZGF0YT8ub3duZWQgPyAoXG4gICAgICAgICAgICA8UGVybWlzc2lvbnNcbiAgICAgICAgICAgICAgcHVibGljSWQ9e3B1YmxpY0lkfVxuICAgICAgICAgICAgICBpc0ZldGNoaW5nPXtzaGFjYWwuaXNGZXRjaGluZ31cbiAgICAgICAgICAgICAgYWRkUGVybWlzc2lvbkdyYW50ZWRUbz17c2hhY2FsLmRhdGEuYWRkUGVybWlzc2lvbkdyYW50ZWRUbyA/PyBbXX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAge3NoYWNhbC5kYXRhPy5jYW5BZGQgPyA8QWRkRXZlbnRMaW5rIHB1YmxpY0lkPXtwdWJsaWNJZH0gLz4gOiBudWxsfVxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIHtzaGFjYWwuZGF0YT8uZXZlbnRzLm1hcCgoZXZlbnQpID0+IChcbiAgICAgICAgICAgICAgPEV2ZW50Q2FyZCBrZXk9e2V2ZW50LnB1YmxpY0lkfSBldmVudD17ZXZlbnR9IC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgKX1cbiAgICA8L1BhZ2U+XG4gICk7XG59XG4iLCAiaW1wb3J0IHtcbiAgc2F2ZVNoYWNhbFBlcm1pc3Npb25zLFxuICBTYXZlU2hhY2FsUGVybWlzc2lvbnNQYXJhbXMsXG59IGZyb20gXCJAc2hhY2FsL3VpL2RhdGEtYWNjZXNzXCI7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiwgVXNlTXV0YXRpb25SZXN1bHQgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IHVzZUludmFsaWRhdGVTaGFjYWwgfSBmcm9tIFwiLi91c2VTaGFjYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNhdmVTaGFjYWxQZXJtaXNzaW9ucygpOiBVc2VNdXRhdGlvblJlc3VsdDxcbiAgdm9pZCxcbiAgRXJyb3IsXG4gIFNhdmVTaGFjYWxQZXJtaXNzaW9uc1BhcmFtc1xuPiB7XG4gIGNvbnN0IGludmFsaWRhdGVTaGFjYWwgPSB1c2VJbnZhbGlkYXRlU2hhY2FsKCk7XG4gIGNvbnN0IG0gPSB1c2VNdXRhdGlvbjx2b2lkLCBFcnJvciwgU2F2ZVNoYWNhbFBlcm1pc3Npb25zUGFyYW1zPihcbiAgICBzYXZlU2hhY2FsUGVybWlzc2lvbnMsXG4gICAge1xuICAgICAgb25TdWNjZXNzKF8sIHsgcHVibGljSWQgfSkge1xuICAgICAgICBpbnZhbGlkYXRlU2hhY2FsKHB1YmxpY0lkKTtcbiAgICAgIH0sXG4gICAgfVxuICApO1xuICByZXR1cm4gbTtcbn1cbiIsICJpbXBvcnQgeyB1c2VTYXZlU2hhY2FsUGVybWlzc2lvbnMgfSBmcm9tIFwiaG9va3MvdXNlU2F2ZVNoYWNhbFBlcm1pc3Npb25zXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ2hhbmdlRXZlbnQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbnR5cGUgUGVybWlzc2lvbnNQcm9wcyA9IHtcbiAgcHVibGljSWQ6IHN0cmluZztcbiAgYWRkUGVybWlzc2lvbkdyYW50ZWRUbzogc3RyaW5nW107XG4gIGlzRmV0Y2hpbmc6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gUGVybWlzc2lvbnMoe1xuICBhZGRQZXJtaXNzaW9uR3JhbnRlZFRvLFxuICBwdWJsaWNJZCxcbiAgaXNGZXRjaGluZyxcbn06IFBlcm1pc3Npb25zUHJvcHMpIHtcbiAgY29uc3QgW2xpc3QsIHNldExpc3RdID0gdXNlU3RhdGUoWy4uLmFkZFBlcm1pc3Npb25HcmFudGVkVG8sIFwiXCJdKTtcbiAgY29uc3Qgc2F2ZSA9IHVzZVNhdmVTaGFjYWxQZXJtaXNzaW9ucygpO1xuICBjb25zdCBvbkNoYW5nZSA9IChpOiBudW1iZXIpID0+IChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCBuZXdMaXN0ID0gWy4uLmxpc3RdO1xuICAgIG5ld0xpc3RbaV0gPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgaWYgKG5ld0xpc3RbbmV3TGlzdC5sZW5ndGggLSAxXSAhPT0gXCJcIikge1xuICAgICAgbmV3TGlzdC5wdXNoKFwiXCIpO1xuICAgIH1cbiAgICBzZXRMaXN0KG5ld0xpc3QpO1xuICB9O1xuICBjb25zdCBvblNhdmVDbGljayA9ICgpID0+IHtcbiAgICBzYXZlLm11dGF0ZSh7XG4gICAgICBwdWJsaWNJZCxcbiAgICAgIGFkZFBlcm1pc3Npb25HcmFudGVkVG86IGxpc3QubWFwKChwKSA9PiBwLnRyaW0oKSkuZmlsdGVyKChwKSA9PiBwICE9PSBcIlwiKSxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8ZGV0YWlscz5cbiAgICAgIDxzdW1tYXJ5PkdyYW50ZWQgYWRkIHBlcm1pc3Npb248L3N1bW1hcnk+XG4gICAgICB7bGlzdC5tYXAoKHAsIGkpID0+IChcbiAgICAgICAgPGlucHV0XG4gICAgICAgICAga2V5PXtpfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICB2YWx1ZT17cH1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2UoaSl9XG4gICAgICAgICAgZGlzYWJsZWQ9e2lzRmV0Y2hpbmcgfHwgc2F2ZS5pc0xvYWRpbmd9XG4gICAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogXCJibG9ja1wiIH19XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICAgIDxidXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGRpc2FibGVkPXtpc0ZldGNoaW5nIHx8IHNhdmUuaXNMb2FkaW5nfVxuICAgICAgICBvbkNsaWNrPXtvblNhdmVDbGlja31cbiAgICAgID5cbiAgICAgICAgU2F2ZVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kZXRhaWxzPlxuICApO1xufSIsICJpbXBvcnQgeyBQYWdlIH0gZnJvbSBcIkBzaGFjYWwvdWkvY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlRXZlbnQgfSBmcm9tIFwiQHNoYWNhbC91aS9ob29rc1wiO1xuaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSZWRpcmVjdCwgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IEV2ZW50Rm9ybSB9IGZyb20gXCIuL2V2ZW50LWZvcm1cIjtcblxuY29uc3QgZXZlbnQgPSB7XG4gIHN1bW1hcnk6IFwiXCIsXG4gIGRlc2NyaXB0aW9uOiBcIlwiLFxuICBzdGFydDogXCJcIixcbiAgZW5kOiBcIlwiLFxuICBsb2NhdGlvbjogXCJcIixcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBOZXdFdmVudFBhZ2UoKSB7XG4gIGNvbnN0IHsgcHVibGljSWQgfSA9IHVzZVBhcmFtczx7IHB1YmxpY0lkOiBzdHJpbmcgfT4oKTtcbiAgY29uc3QgY3JlYXRlID0gdXNlQ3JlYXRlRXZlbnQoKTtcbiAgcmV0dXJuIChcbiAgICA8UGFnZSBsb2FkaW5nPXtmYWxzZX0gdGl0bGU9XCJOZXcgRXZlbnRcIj5cbiAgICAgIHsoKSA9PiAoXG4gICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICB7Y3JlYXRlLmlzU3VjY2VzcyA/IChcbiAgICAgICAgICAgIDxSZWRpcmVjdCB0bz17YC9ldmVudC8ke2NyZWF0ZS5kYXRhPy5wdWJsaWNJZH1gfSAvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxFdmVudEZvcm1cbiAgICAgICAgICAgIGV2ZW50PXtldmVudH1cbiAgICAgICAgICAgIGlzU2F2aW5nPXtjcmVhdGUuaXNMb2FkaW5nfVxuICAgICAgICAgICAgb25TYXZlPXsoZXZlbnQpID0+XG4gICAgICAgICAgICAgIGNyZWF0ZS5tdXRhdGUoeyBzaGFjYWxQdWJsaWNJZDogcHVibGljSWQsIGV2ZW50IH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICl9XG4gICAgPC9QYWdlPlxuICApO1xufVxuIiwgImltcG9ydCB7IEV2ZW50UGF5bG9hZCB9IGZyb20gXCJAc2hhY2FsL3VpL2RhdGEtYWNjZXNzXCI7XG5pbXBvcnQgUmVhY3QsIHsgRm9ybUV2ZW50LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IERhdGVQaWNrZXIgZnJvbSBcInJlYWN0LWRhdGVwaWNrZXJcIjtcbmltcG9ydCB7IGdldER1cmF0aW9uLCBNU19JTl9NSU5VVEUgfSBmcm9tIFwidXRpbHNcIjtcblxuY29uc3QgREVGQVVMVF9EVVJBVElPTl9NSU4gPSA2MDtcblxudHlwZSBFdmVudFZhbHVlcyA9IHtcbiAgc3VtbWFyeTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBzdGFydDogc3RyaW5nO1xuICBkdXJhdGlvbjogc3RyaW5nO1xuICBsb2NhdGlvbjogc3RyaW5nO1xufTtcblxudHlwZSBFdmVudEZvcm1Qcm9wcyA9IHtcbiAgZXZlbnQ6IEV2ZW50UGF5bG9hZDtcbiAgaXNTYXZpbmc6IGJvb2xlYW47XG4gIG9uU2F2ZTogKGU6IEV2ZW50UGF5bG9hZCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBFdmVudEZvcm0oeyBldmVudCwgaXNTYXZpbmcsIG9uU2F2ZSB9OiBFdmVudEZvcm1Qcm9wcykge1xuICBjb25zdCBbc3RhcnREYXRlLCBzZXRTdGFydERhdGVdID0gdXNlU3RhdGU8RGF0ZSB8IG51bGw+KFxuICAgIGV2ZW50LnN0YXJ0ID09PSBcIlwiID8gbnVsbCA6IG5ldyBEYXRlKGV2ZW50LnN0YXJ0KVxuICApO1xuICBjb25zdCBbZHVyYXRpb25dID0gdXNlU3RhdGU8bnVtYmVyPihcbiAgICAoKSA9PiBnZXREdXJhdGlvbihldmVudCkgPz8gREVGQVVMVF9EVVJBVElPTl9NSU5cbiAgKTtcbiAgY29uc3Qgb25Gb3JtU3VibWl0ID0gKGU6IEZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxGb3JtRWxlbWVudDtcbiAgICBjb25zdCBlbnRyaWVzID0gW1xuICAgICAgXCJzdW1tYXJ5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCIsXG4gICAgICBcInN0YXJ0XCIsXG4gICAgICBcImR1cmF0aW9uXCIsXG4gICAgICBcImxvY2F0aW9uXCIsXG4gICAgXS5tYXAoKGYpID0+IFtcbiAgICAgIGYsXG4gICAgICAodGFyZ2V0LmVsZW1lbnRzLm5hbWVkSXRlbShmKSBhcyB7IHZhbHVlOiBzdHJpbmcgfSkudmFsdWUgPz8gXCJcIixcbiAgICBdKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QuZnJvbUVudHJpZXMoZW50cmllcykgYXMgRXZlbnRWYWx1ZXM7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUodmFsdWVzLnN0YXJ0KTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHBhcnNlSW50KHZhbHVlcy5kdXJhdGlvbik7XG4gICAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZS5nZXRUaW1lKCkgKyBkdXJhdGlvbiAqIE1TX0lOX01JTlVURSk7XG4gICAgb25TYXZlKHtcbiAgICAgIHN1bW1hcnk6IHZhbHVlcy5zdW1tYXJ5LFxuICAgICAgZGVzY3JpcHRpb246IHZhbHVlcy5kZXNjcmlwdGlvbixcbiAgICAgIGxvY2F0aW9uOiB2YWx1ZXMubG9jYXRpb24sXG4gICAgICBzdGFydDogc3RhcnREYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICBlbmQ6IGVuZERhdGUudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8Zm9ybSBvblN1Ym1pdD17b25Gb3JtU3VibWl0fT5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIFN1bW1hcnlcbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIG5hbWU9XCJzdW1tYXJ5XCJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e2V2ZW50LnN1bW1hcnl9XG4gICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XG4gICAgICAgIC8+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGxhYmVsIHN0eWxlPXt7IGRpc3BsYXk6IFwiYmxvY2tcIiB9fT5cbiAgICAgICAgU3RhcnRcbiAgICAgICAgPERhdGVQaWNrZXJcbiAgICAgICAgICBvbkNoYW5nZT17KGQpID0+IHNldFN0YXJ0RGF0ZShkIGFzIERhdGUpfVxuICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgZGF0ZUZvcm1hdD1cIlBwXCJcbiAgICAgICAgICBzaG93VGltZVNlbGVjdFxuICAgICAgICAgIHRpbWVJbnRlcnZhbHM9ezE1fVxuICAgICAgICAgIHNlbGVjdGVkPXtzdGFydERhdGV9XG4gICAgICAgICAgbmFtZT1cInN0YXJ0XCJcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XG4gICAgICAgIC8+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGxhYmVsIHN0eWxlPXt7IGRpc3BsYXk6IFwiYmxvY2tcIiB9fT5cbiAgICAgICAgRHVyYXRpb24gKG1pbnV0ZXMpXG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgIG5hbWU9XCJkdXJhdGlvblwiXG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXtkdXJhdGlvbn1cbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgICAgICAgICBzdGVwPXsxNX1cbiAgICAgICAgICBtaW49ezE1fVxuICAgICAgICAvPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIExvY2F0aW9uXG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBuYW1lPVwibG9jYXRpb25cIlxuICAgICAgICAgIGRlZmF1bHRWYWx1ZT17ZXZlbnQubG9jYXRpb259XG4gICAgICAgICAgZGlzYWJsZWQ9e2lzU2F2aW5nfVxuICAgICAgICAvPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIERlc2NyaXB0aW9uXG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIG5hbWU9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXtldmVudC5kZXNjcmlwdGlvbn1cbiAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgICAgICAgLz5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17aXNTYXZpbmd9PlxuICAgICAgICBTYXZlXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Zvcm0+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJAc2hhY2FsL3VpL2NvbXBvbmVudHNcIjtcbmltcG9ydCB7IEV2ZW50UGF5bG9hZCwgU2hhY2FsRXZlbnRBdHRlbmRlZSB9IGZyb20gXCJAc2hhY2FsL3VpL2RhdGEtYWNjZXNzXCI7XG5pbXBvcnQgeyB1c2VFdmVudCwgdXNlVXBkYXRlRXZlbnQgfSBmcm9tIFwiQHNoYWNhbC91aS9ob29rc1wiO1xuaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSwgZ2V0RHVyYXRpb24gfSBmcm9tIFwidXRpbHNcIjtcbmltcG9ydCB7IEF0dGVuZGVlcyB9IGZyb20gXCIuL2F0dGVuZGVlc1wiO1xuaW1wb3J0IHsgRXZlbnRGb3JtIH0gZnJvbSBcIi4vZXZlbnQtZm9ybVwiO1xuaW1wb3J0IHsgSm9pbkV2ZW50IH0gZnJvbSBcIi4vam9pbi1ldmVudFwiO1xuXG50eXBlIEV2ZW50Vmlld1Byb3BzID0geyBldmVudDogRXZlbnRQYXlsb2FkIH07XG5mdW5jdGlvbiBFdmVudFZpZXcoeyBldmVudCB9OiBFdmVudFZpZXdQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIFN1bW1hcnlcbiAgICAgICAgPHNwYW4+e2V2ZW50LnN1bW1hcnl9PC9zcGFuPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIFN0YXJ0XG4gICAgICAgIDxzcGFuPntmb3JtYXREYXRlKG5ldyBEYXRlKGV2ZW50LnN0YXJ0KSl9PC9zcGFuPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCBzdHlsZT17eyBkaXNwbGF5OiBcImJsb2NrXCIgfX0+XG4gICAgICAgIER1cmF0aW9uIChtaW51dGVzKVxuICAgICAgICA8c3Bhbj57Z2V0RHVyYXRpb24oZXZlbnQpfTwvc3Bhbj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8bGFiZWwgc3R5bGU9e3sgZGlzcGxheTogXCJibG9ja1wiIH19PlxuICAgICAgICBMb2NhdGlvblxuICAgICAgICA8YSBocmVmPXtldmVudC5sb2NhdGlvbn0+e2V2ZW50LmxvY2F0aW9ufTwvYT5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8bGFiZWwgc3R5bGU9e3sgZGlzcGxheTogXCJibG9ja1wiIH19PlxuICAgICAgICBEZXNjcmlwdGlvblxuICAgICAgICA8c3Bhbj57ZXZlbnQuZGVzY3JpcHRpb259PC9zcGFuPlxuICAgICAgPC9sYWJlbD5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRXZlbnRQYWdlKCkge1xuICBjb25zdCB7IHB1YmxpY0lkIH0gPSB1c2VQYXJhbXM8eyBwdWJsaWNJZDogc3RyaW5nIH0+KCk7XG4gIGNvbnN0IGV2ZW50ID0gdXNlRXZlbnQocHVibGljSWQpO1xuICBjb25zdCB1cGRhdGUgPSB1c2VVcGRhdGVFdmVudCgpO1xuICByZXR1cm4gKFxuICAgIDxQYWdlIGxvYWRpbmc9e2V2ZW50LmlzTG9hZGluZ30gdGl0bGU9e2V2ZW50LmRhdGE/LnN1bW1hcnkgPz8gXCJFdmVudFwifT5cbiAgICAgIHsoKSA9PiAoXG4gICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICB7ZXZlbnQuZGF0YT8ub3duZWQgPyAoXG4gICAgICAgICAgICA8RXZlbnRGb3JtXG4gICAgICAgICAgICAgIGV2ZW50PXtldmVudC5kYXRhfVxuICAgICAgICAgICAgICBpc1NhdmluZz17dXBkYXRlLmlzTG9hZGluZ31cbiAgICAgICAgICAgICAgb25TYXZlPXsoZSkgPT4gdXBkYXRlLm11dGF0ZSh7IHB1YmxpY0lkLCBldmVudDogZSB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxFdmVudFZpZXcgZXZlbnQ9e2V2ZW50LmRhdGEhfSAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPEpvaW5FdmVudCBwdWJsaWNJZD17cHVibGljSWR9IC8+XG4gICAgICAgICAgPEF0dGVuZGVlcyBhdHRlbmRlZXM9e2V2ZW50LmRhdGE/LmF0dGVuZGVlc30gLz5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICl9XG4gICAgPC9QYWdlPlxuICApO1xufVxuIiwgImltcG9ydCB7IFNoYWNhbEV2ZW50QXR0ZW5kZWUgfSBmcm9tIFwiQHNoYWNhbC91aS9kYXRhLWFjY2Vzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBzdGF0dXNNYXAgPSB7XG4gIGRlY2xpbmVkOiBcIlx1Mjc0Q1wiLFxuICB0ZW50YXRpdmU6IFwiXHUyNzU0XCIsXG4gIGFjY2VwdGVkOiBcIlx1MjcxNFx1RkUwRlwiLFxufTtcbnR5cGUgQXR0ZW5kZWVzUHJvcHMgPSB7IGF0dGVuZGVlczogU2hhY2FsRXZlbnRBdHRlbmRlZVtdIHwgdW5kZWZpbmVkIH07XG5leHBvcnQgZnVuY3Rpb24gQXR0ZW5kZWVzKHsgYXR0ZW5kZWVzIH06IEF0dGVuZGVlc1Byb3BzKSB7XG4gIGlmIChhdHRlbmRlZXMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGRldGFpbHM+XG4gICAgICA8c3VtbWFyeT5BdHRlbmRlZXM8L3N1bW1hcnk+XG4gICAgICB7YXR0ZW5kZWVzLm1hcCgoeyBlbWFpbCwgc3RhdHVzIH0sIGkpID0+IChcbiAgICAgICAgPHAga2V5PXtpfT5cbiAgICAgICAgICB7c3RhdHVzTWFwW3N0YXR1c119Jm5ic3A7e2VtYWlsfVxuICAgICAgICA8L3A+XG4gICAgICApKX1cbiAgICAgIHthdHRlbmRlZXMubGVuZ3RoID09PSAwID8gPHA+Tm8gQXR0ZW5kZWVzPC9wPiA6IG51bGx9XG4gICAgPC9kZXRhaWxzPlxuICApO1xufVxuIiwgImltcG9ydCB7IHVzZUpvaW5FdmVudCB9IGZyb20gXCJAc2hhY2FsL3VpL2hvb2tzXCI7XG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEVtYWlscyB9IGZyb20gXCJ1dGlsc1wiO1xuXG5jb25zdCBlbWFpbHMgPSBnZXRFbWFpbHMoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIEpvaW5FdmVudCh7IHB1YmxpY0lkIH06IHsgcHVibGljSWQ6IHN0cmluZyB9KSB7XG4gIGNvbnN0IGpvaW4gPSB1c2VKb2luRXZlbnQoKTtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICB7am9pbi5pc0Vycm9yID8gPHA+e2pvaW4uZXJyb3I/Lm1lc3NhZ2V9PC9wPiA6IG51bGx9XG4gICAgICB7am9pbi5pc1N1Y2Nlc3MgPyAoXG4gICAgICAgIDxwPllvdSBoYXZlIHN1Y2Nlc3NmdWxseSBqb2luZWQ8L3A+XG4gICAgICApIDogKFxuICAgICAgICBlbWFpbHMubWFwKChlbWFpbCwgaSkgPT4gKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gam9pbi5tdXRhdGUoeyBwdWJsaWNJZCwgZW1haWwgfSl9XG4gICAgICAgICAgICBkaXNhYmxlZD17am9pbi5pc0xvYWRpbmd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgSm9pbiBhcyB7ZW1haWx9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICkpXG4gICAgICApfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiMGlCQUFBLG1CQU1BLGFBRUEsR0FBSSxJQUF3QixPQUFPLHNCQUMvQixHQUFpQixPQUFPLFVBQVUsZUFDbEMsR0FBbUIsT0FBTyxVQUFVLHFCQUV4QyxZQUFrQixHQUNqQixHQUFJLEdBQVEsS0FDWCxLQUFNLElBQUksV0FBVSx5REFHckIsTUFBTyxRQUFPLEdBR2YsY0FDQyxJQUNDLEdBQUksQ0FBQyxPQUFPLE9BQ1gsTUFBTyxHQU1SLEdBQUksR0FBUSxHQUFJLFFBQU8sT0FFdkIsR0FEQSxFQUFNLEdBQUssS0FDUCxPQUFPLG9CQUFvQixHQUFPLEtBQU8sSUFDNUMsTUFBTyxHQUtSLE9BREksR0FBUSxHQUNILEVBQUksRUFBRyxFQUFJLEdBQUksSUFDdkIsRUFBTSxJQUFNLE9BQU8sYUFBYSxJQUFNLEVBRXZDLEdBQUksR0FBUyxPQUFPLG9CQUFvQixHQUFPLElBQUksU0FBVSxHQUM1RCxNQUFPLEdBQU0sS0FFZCxHQUFJLEVBQU8sS0FBSyxNQUFRLGFBQ3ZCLE1BQU8sR0FJUixHQUFJLEdBQVEsR0FJWixNQUhBLHVCQUF1QixNQUFNLElBQUksUUFBUSxTQUFVLEdBQ2xELEVBQU0sR0FBVSxJQUViLE9BQU8sS0FBSyxPQUFPLE9BQU8sR0FBSSxJQUFRLEtBQUssTUFDN0MsNkJBS00sR0FFUixNQUFPLElBSVQsR0FBTyxRQUFVLEtBQW9CLE9BQU8sT0FBUyxTQUFVLEVBQVEsR0FLdEUsT0FKSSxHQUNBLEVBQUssR0FBUyxHQUNkLEVBRUssRUFBSSxFQUFHLEVBQUksVUFBVSxPQUFRLEtBQ3JDLEVBQU8sT0FBTyxVQUFVLElBRXhCLE9BQVMsS0FBTyxHQUNmLEFBQUksR0FBZSxLQUFLLEVBQU0sSUFDN0IsR0FBRyxHQUFPLEVBQUssSUFJakIsR0FB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SixFQUFNLEVBQUUsU0FBUyxVQUFVLEVBQUUsR0FBRyxPQUFRLEdBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxHQUFHLEVBQUUsYUFBYSxJQUFJLElBQUssR0FBRSxFQUFFLGFBQWEsRUFBRSxBQUFTLEVBQUUsS0FBWCxRQUFnQixHQUFFLEdBQUcsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRSxTQUNyYSxZQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsU0FBUyxHQUFFLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxPQUFPLEVBQUUsUUFBUSxZQUFXLEdBQUcsTUFBTSxBQUFXLE9BQU8sSUFBbEIsVUFBcUIsQUFBTyxJQUFQLE1BQVUsRUFBRSxXQUFXLEdBQUUsWUFBZ0IsR0FBRyxHQUFJLEdBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSSxFQUFFLFFBQVEsUUFBUSxTQUFTLEdBQUcsTUFBTyxHQUFFLEtBQUssR0FBSSxJQUFFLE9BQU8sWUFBVyxFQUFFLEdBQUcsTUFBTSxBQUFXLE9BQU8sSUFBbEIsVUFBcUIsQUFBTyxJQUFQLE1BQVUsQUFBTSxFQUFFLEtBQVIsS0FBWSxHQUFPLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxJQUM1VyxZQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFJLEdBQUUsTUFBTyxHQUFFLEFBQUcsQ0FBYyxJQUFkLGFBQWlCLEFBQVksSUFBWixZQUFjLEdBQUUsTUFBSyxHQUFJLEdBQUUsR0FBRyxHQUFHLEFBQU8sSUFBUCxLQUFTLEVBQUUsT0FBUSxRQUFPLE9BQVEsYUFBYyxTQUFTLEVBQUUsR0FBRyxVQUFXLFNBQVMsT0FBTyxFQUFFLGNBQWUsUUFBTyxJQUFFLEVBQUUsSUFBSSxHQUFH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TyxJQUFQLEtBQVMsS0FBTSxPQUFNLEVBQUUsTUFBTSxNQUFPLEtBQUksRUFBRSxLQUFLLEVBQUUsT0FBUSxHQUFFLEVBQUUsRUFBRSxLQUFLLEdBQUksR0FBRSxFQUFFLE9BQU8sR0FBRyxBQUFPLElBQVAsS0FBUyxNQUFNLEdBQUksR0FBRSxFQUFFLFVBQVUsR0FBRyxBQUFPLElBQVAsTUFBcUIsR0FBWCxFQUFFLEVBQUUsT0FBVSxBQUFPLElBQVAsTUFBVSxFQUFFLEVBQUUsU0FBUyxNQUFNLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRSxNQUFNLElBQUksR0FBRyxJQUFJLEVBQUUsTUFBTyxJQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRSxNQUFPLElBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxRQUFRLEtBQU0sT0FBTSxFQUFFLE1BQU8sR0FBRyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sT0FBUSxHQUFFLEdBQUcsRUFBRSxFQUFFLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsTUFBTSxJQUFJLEdBQUcsSUFDNWYsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUUsS0FBTSxPQUFNLEVBQUUsT0FBUSxHQUFHLEVBQUUsWUFBWSxFQUFFLEtBQU0sT0FBTSxFQUFFLE1BQU8sR0FBRyxBQUFJLEVBQUUsTUFBTixFQUFVLEtBQU0sT0FBTSxFQUFFLE1BQU0sTUFBTyxHQUFFLFVBQVUsVUFBVSxFQUFFLEVBQUUsRUFBRSxZQUFZLEdBQVcsR0FBUixF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QUFHLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEtBQUssUUFBUSxHQUFJLEdBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsQUFBTyxJQUFQLEtBQVMsR0FBRyxHQUFHLEVBQUUsUUFBUSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxLQUFLLEdBQUcsT0FBTyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLE9BQU8sR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLE1BQzlRLFlBQVksRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFJLEdBQUUsR0FBRyxHQUFXLEdBQVIsRUFBRSxHQUFHLEdBQU0sQUFBTyxJQUFQLE1BQVUsR0FBSSxHQUFFLEdBQUcsR0FBRyxHQUFHLEFBQU8sSUFBUCxLQUFTLEVBQUUsVUFBVSxHQUFJLEdBQUUsRUFBRSxJQUFJLEdBQUcsQUFBSyxJQUFMLElBQWdCLEdBQVIsRUFBRSxHQUFHLEdBQU0sQUFBTyxJQUFQLEtBQVMsTUFBTyxHQUFFLEVBQUUsYUFBYSxBQUFJLElBQUosR0FBTyxHQUFHLEVBQUUsVUFBVSxRQUFRLE1BQU8sQUFBSSxHQUFFLE1BQU4sRUFBVSxFQUFFLFVBQVUsY0FBYyxLQUFLLEVBQUUsU0FBVSxLQUFJLEdBQUksR0FBRSxPQUFPLFVBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFVLEtBQUssR0FBSSxJQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FDelQsY0FBYyxHQUFHLEdBQUcsTUFBTyxJQUFHLEdBQUksR0FBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVUsSUFBRyxHQUFHLE1BQU0sR0FBRyxZQUFZLEVBQUUsRUFBRSxPQUFPLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFJLEdBQUUsRUFBRSxFQUFFLElBQUksRUFB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RSxJQUFJLEFBQU8sRUFBRSxNQUFULEtBQWEsRUFBRSxFQUFFLE1BQU0sS0FBSyxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQVEsSUFBRyxNQUFPLEdBQUUsRUFBRSxJQUFJLEFBQU8sRUFBRSxNQUFULEtBQWEsRUFBRSxFQUFFLE1BQU0sS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLE1BQU8sR0FBRSxFQUFFLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU8sTUFBSyxXQUFXLEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBUSxHQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQUFBTyxJQUFQLE1BQVUsRUFBRSxFQUFFLE9BQU8sS0FBSyxFQUFFLE1BQU0sRUFBRyxHQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEdBQUksR0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEFBQU8sSUFBUCxNQUFVLEFBQU8sSUFBUCxNQUFXLEdBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxBQUNqZixFQUFFLFlBRCtlLE1BQ3BlLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxBQUFPLElBQVAsS0FBUyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxPQUFPLE1BQU8sR0FBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEFBQU8sSUFBUCxNQUFVLEtBQUssRUFBRSxFQUFFLE9BQU8sSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxBQUFPLElBQVAsTUFBVyxHQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQUFBTyxJQUFQLEtBQVMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsR0FBRyxNQUFPLEdBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEFBQU8sSUFBUCxNQUFXLElBQUcsQUFBTyxFQUFFLFlBQVQsTUFBb0IsRUFBRSxPQUFPLEFBQU8sRUFBRSxNQUFULEtBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEFBQU8sSUFBUCxLQUFTLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEdBQUcsVUFBRyxFQUFFLFFBQVEsU0FBUyxJQUFHLE1BQU8sR0FBRSxFQUFFLE1BQVksRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFFLEdBQUcsR0FBRyxHQUFHLEFBQWEsTUFBTyxJQUFwQixXQUFzQixLQUFNLE9BQU0sRUFBRSxNQUFrQixHQUFaLEVBQUUsRUFBRSxLQUFLLEdBQU0sQUFDbGYsR0FEa2YsS0FDaGYsS0FBTSxPQUFNLEVBQUUsTUFBTSxPQUFRLEdBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sQUFBTyxJQUFQLE1BQVUsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRyxHQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEdBQUksSUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sR0FBRyxHQUFHLEFBQU8sS0FBUCxNQUFVLEFBQU8sSUFBUCxNQUFXLEdBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxBQUFPLEdBQUUsWUFBVCxNQUFvQixFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRSxFQUFFLEdBQUcsQUFBTyxJQUFQLEtBQVMsRUFBRSxHQUFFLEVBQUUsUUFBUSxHQUFFLEVBQUUsR0FBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssTUFBTyxHQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQUFBTyxJQUFQLE1BQVUsS0FBSyxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxHQUFHLEFBQU8sSUFBUCxNQUFXLEdBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxBQUFPLElBQVAsS0FBUyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxHQUFHLE1BQU8sR0FBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsQUFBTyxJQUFQLE1BQVcsSUFBRyxBQUFPLEVBQUUsWUFBVCxNQUN2ZSxFQUFFLE9BQU8sQUFBTyxFQUFFLE1BQVQsS0FBYSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQUFBTyxJQUFQLEtBQVMsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsR0FBRyxVQUFHLEVBQUUsUUFBUSxTQUFTLElBQUcsTUFBTyxHQUFFLEVBQUUsTUFBWSxFQUFFLE1BQU8sVUFBUyxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUksR0FBRSxBQUFXLE1BQU8sSUFBbEIsVUFBcUIsQUFBTyxJQUFQLE1BQVUsRUFBRSxPQUFPLElBQUksQUFBTyxFQUFFLE1BQVQsS0FBYSxHQUFJLEdBQUUsRUFBRSxNQUFNLFVBQVUsR0FBSSxHQUFFLEFBQVcsTUFBTyxJQUFsQixVQUFxQixBQUFPLElBQVAsS0FBUyxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQWUsSUFBRyxHQUFXLElBQVIsRUFBRSxFQUFFLElBQVEsRUFBRSxFQUFFLEFBQU8sSUFBUCxPQUFXLEdBQUcsRUFBRSxNQUFNLEdBQUcsT0FBTyxFQUFFLFNBQVUsR0FBRSxHQUFHLEVBQUUsT0FBTyxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLFVB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RUFBRSxHQUFHLFFBQVEsQUFBTyxJQUFQLE1BQVUsQUFBTyxFQUFFLGdCQUFULEtBQXVCLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFNLElBQUksRUFBRSxFQUFFLEdBQVMsR0FBTixHQUFHLEdBQU0sQ0FBRSxJQUFHLEdBQUcsS0FBTSxPQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsR0FBRSxHQUFFLEtBQUssRUFBRSxZQUFZLEtBQUssR0FBRyxRQUFRLEdBQUcsRUFBRSxFQUFFLEVBQUUsU0FBUyxJQUFrRSxHQUE5RCxHQUFHLFFBQVEsR0FBRyxFQUFFLEFBQU8sS0FBUCxNQUFVLEFBQU8sR0FBRSxPQUFULEtBQWMsR0FBRyxFQUFFLEdBQUUsR0FBRSxHQUFFLEtBQUssR0FBRyxHQUFNLEVBQUUsS0FBTSxPQUFNLEVBQUUsTUFBTSxNQUFPLEdBQUUsY0FBYyxHQUFJLEdBQUUsQ0FBQyxjQUFjLEtBQUssVUFBVSxLQUFLLFVBQVUsS0FBSyxNQUFNLEtBQUssS0FBSyxNQUFNLE1BQU8sTUFBUCxLQUFTLEdBQUUsY0FBYyxHQUFFLEVBQUUsR0FBRSxHQUFFLEtBQUssRUFBUyxHQUMvZSxjQUFjLEdBQUcsQUFBTyxLQUFQLE1BQVUsR0FBSSxHQUFFLEdBQUUsVUFBVSxFQUFFLEFBQU8sSUFBUCxLQUFTLEVBQUUsY0FBYyxTQUFVLEdBQUUsR0FBRSxLQUFLLEdBQUksR0FBRSxBQUFPLEtBQVAsS0FBUyxHQUFFLGNBQWMsR0FBRSxLQUFLLEdBQUcsQUFBTyxJQUFQLEtBQVMsR0FBRSxFQUFFLEdBQUUsT0FBTyxHQUFHLEFBQU8sSUFBUCxLQUFTLEtBQU0sT0FBTSxFQUFFLE1BQU0sR0FBRSxFQUFFLEVBQUUsQ0FBQyxjQUFjLEdBQUUsY0FBYyxVQUFVLEdBQUUsVUFBVSxVQUFVLEdBQUUsVUFBVSxNQUFNLEdBQUUsTUFBTSxLQUFLLE1BQU0sQUFBTyxLQUFQLEtBQVMsR0FBRSxjQUFjLEdBQUUsRUFBRSxHQUFFLEdBQUUsS0FBSyxFQUFFLE1BQU8sSUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLEFBQWEs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RSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUcsRUFBRSxLQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQVMsRUFBRSxNQUFNLEdBQVksTUFBVixHQUFFLEVBQUUsTUFBUyxBQUFLLEdBQUUsSUFBUCxHQUFZLEdBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxRQUFRLEVBQUUsQUFBTyxJQUFQLEtBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQVksR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQVMsRUFBRSxNQUFNLEdBQ2xiLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxBQUFPLElBQVAsTUFBVSxHQUFHLEVBQUUsY0FBYyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBSyxHQUFFLElBQVAsRUFBVSxBQUFLLEdBQUUsTUFBTSxRQUFiLEdBQXNCLElBQUcsUUFBUyxPQUFPLEdBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsR0FBRyxNQUFPLElBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUNuTCxZQUFZLEVBQUUsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxBQUFPLElBQVAsS0FBUyxFQUFFLGNBQWMsS0FBSyxHQUFHLEFBQVcsRUFBRSxPQUFiLFVBQW1CLEFBQWtDLEVBQUUsT0FBcEMsZ0NBQXlDLEdBQUcsQUFBSyxHQUFFLEtBQUssSUFBWixFQUFlLEVBQUUsY0FBYyxDQUFDLFVBQVUsR0FBRyxHQUFHLEVBQUUsV0FBVyxBQUFLLEdBQUUsYUFBUCxFQUFtQixFQUFFLGNBQWMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFLEFBQU8sSUFBUCxLQUFTLEVBQUUsVUFBVSxPQUFRLE9BQU8sR0FBRSxBQUFPLElBQVAsS0FBUyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsV0FBVyxFQUFFLGNBQWMsQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFLEdBQUcsU0FBVSxBQUFPLEtBQVAsS0FBVSxHQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsY0FBYyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxVQUFHLEVBQUUsRUFBRSxFQUFFLEdBQVUsRUFBRSxNQUMxZSxZQUFZLEVBQUUsR0FBRyxHQUFJLEdBQUUsRUFBRSxJQUFJLEFBQUcsQ0FBTyxJQUFQLE1BQVUsQUFBTyxJQUFQLE1BQVUsQUFBTyxJQUFQLE1BQVUsRUFBRSxNQUFNLElBQUUsR0FBRSxPQUFPLEtBQUksWUFBWSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUUsUUFBNEMsTUFBcEMsR0FBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQU0sQUFBTyxJQUFQLE1BQVUsQ0FBQyxHQUFVLEdBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxPQUFPLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBVSxFQUFFLE9BQ2pTLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUksR0FBRSxHQUFHLEdBQUcsT0FBUSxHQUFFLEdBQVcsR0FBUixHQUFHLEVBQUUsR0FBTSxBQUFPLEVBQUUsWUFBVCxLQUFtQixBQUFPLElBQVAsTUFBVyxHQUFFLFVBQVUsS0FBSyxFQUFFLFVBQVUsS0FBSyxFQUFFLE9BQU8sR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFF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RyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFTLEVBQUUsTUFBTSxJQUFLLEFBQU8sRUFBRSxnQkFBVCxLQUEyQixFQUFTLEdBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLGNBQWMsRUFBRSxjQUFjLEFBQU8sSUFBUCxLQUFTLENBQUMsVUFBVSxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsR0FBRyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsRUFBRSxFQUFFLGNBQWMsR0FBRyxHQUFFLEdBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxTQUFTLEdBQUcsRUFBRSxjQUFjLEtBQVksR0FBSyxFQUFTLEdBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLGNBQWMsRUFBRSxjQUFjLEFBQU8sSUFBUCxLQUFTLENBQUMsVUFBVSxHQUN6ZixDQUFDLFVBQVUsRUFBRSxVQUFVLEdBQUcsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxjQUFjLEdBQUcsR0FBRSxHQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsU0FBUyxHQUFHLEVBQUUsY0FBYyxLQUFZLEdBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sU0FBRSxDQUFDLEtBQUssU0FBUyxTQUFTLEdBQUcsQUFBSyxHQUFFLElBQVAsR0FBVyxBQUFPLElBQVAsS0FBVSxHQUFFLFdBQVcsRUFBRSxFQUFFLGFBQWEsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBUyxFQUNyVixZQUFZLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFF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LEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxFQUFFLFlBQWEsSUFBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEtBQUssRUFBRSxFQUFFLE1BQU0sTUFBTyxPQUFPLEdBQUUsTUFBTyxJQUFHLEdBQUcsQUFBTyxJQUFQLE1BQzVlLEdBQUcsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsYUFBYSxFQUFFLEFBQU8sSUFBUCxLQUFTLEVBQUUsY0FBYyxLQUFLLEVBQUUsRUFBRSxTQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxBQUFPLElBQVAsTUFBVSxHQUFHLEVBQUUsSUFBSyxHQUFFLE9BQU8sSUFBSSxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxVQUFXLEdBQUUsTUFBTyxBQUFPLEtBQVAsTUFBVSxHQUFHLEdBQUcsU0FBVSxJQUFHLE1BQU8sSUFBRyxFQUFFLEVBQUUsT0FBUSxHQUFFLE1BQU8sSUFBRyxFQUFFLEVBQUUsVUFBVSxlQUFlLEVBQUUsRUFBRSxhQUFhLEFBQU8sSUFBUCxLQUFTLEVBQUUsTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsVUFBVyxJQUFHLE1BQU8sR0FBRSxFQUFFLEtBQUssRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFRLEdBQUUsTUFBTyxJQUFHLEVBQUUsRUFBRSxFQUFFLGFBQWEsR0FBRyxFQUFFLFVBQVcsR0FBRSxNQUFPLElBQUcsRUFBRSxFQUFFLEVBQUUsYUFBYSxTQUNoZixHQUFHLEVBQUUsVUFBVyxJQUFHLE1BQU8sSUFBRyxFQUFFLEVBQUUsRUFBRSxhQUFhLFNBQVMsR0FBRyxFQUFFLFVBQVcsSUFBRyxHQUFHLEVBQUUsRUFBRSxLQUFLLFNBQVMsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLE1BQU0sR0FBSSxHQUFFLEVBQUUsS0FBSyxTQUFpRCxHQUF4QyxHQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFLLEFBQU8sSUFBUCxLQUFTLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFHLENBQWEsTUFBTyxHQUFFLHVCQUF0QixXQUE0QyxFQUFFLHNCQUFzQixFQUFFLEdBQUcsWUFBWSxFQUFFLEFBQUksSUFBSixHQUFPLEdBQUcsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsYUFBYyxLQUFJLEVBQUUsRUFBRSxNQUFNLEFBQU8sSUFBUCxNQUFXLEdBQUUsT0FBTyxHQUFHLEFBQU8sSUFBUCxPQUFXLEdBQUksR0FBRSxFQUFFLGFBQWEsR0FBRyxBQUFPLElBQVAsTUFBVSxFQUFFLEVBQUUsTUFBTSxPQUFRLEdBQ3RmLEVBQUUsYUFBYSxBQUFPLElBQVAsT0FBVyxHQUFHLEVBQUUsVUFBVSxHQUFHLEFBQUssR0FBRSxhQUFhLElBQXBCLEdBQXdCLEFBQUksRUFBRSxNQUFOLEdBQVksR0FBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFVBQVUsQUFBTyxJQUFQLE1BQVcsR0FBRSxPQUFPLEdBQUcsR0FBRyxFQUFFLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxVQUFXLEdBQUUsQUFBSyxFQUFFLE1BQVAsSUFBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEtBQWEsRUFBRSxNQUFNLEdBQUcsQUFBTyxJQUFQLEtBQVMsRUFBRSxPQUFPLE1BQU8sS0FBSSxFQUFFLEVBQUUsQUFBTyxJQUFQLE9BQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxLQUFLLE1BQWtCLEdBQVosRUFBRSxFQUFFLFFBQVcsQUFBTyxJQUFQLE1BQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxTQUFTLEdBQUcsRUFBRSxFQUFFLE1BQU0sTUFBTyxPQUFPLEdBQUUsTUFBTyxHQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsU0FBUyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFDcGYsRUFBRSx1QkFBdUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsVUFBVyxJQUFHLE1BQU8sR0FBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFRLElBQUcsTUFBTyxJQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsT0FBUSxJQUFHLE1BQU8sR0FBRSxFQUFFLEtBQUssRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEFBQU8sSUFBUCxNQUFXLEdBQUUsVUFBVSxLQUFLLEVBQUUsVUFBVSxLQUFLLEVBQUUsT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBSSxHQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFRLElBQUcsTUFBTyxJQUFHLEVBQUUsRUFBRSxPQUFRLElBQUcsTUFBTyxJQUFHLEVBQUUsRUFBRSxPQUFRLElBQUcsTUFBTyxJQUFHLEVBQUUsRUFBRSxHQUFHLEtBQU0sT0FBTSxFQUFFLElBQUksRUFBRSxPQUM3ZSxZQUFZLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVB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QUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsU0FBUyxLQUFLLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFlBQVcsR0FBTSxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLGFBQWEsWUFBWSxHQUFHLE1BQU8sSUFBRyxBQUFVLE1BQU8sSUFBakIsVUFBb0IsV0FBWSxHQUFFLEVBQUUsQ0FBQyxRQUFRLEdBQUcsR0FBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsR0FBRyxFQUFHLEdBQUcsSUFBRyxFQUFHLEdBQUcsSUFBRyxFQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxZQUFZLEdBQUcsTUFBTyxJQUFHLEFBQVksTUFBTyxTQUFuQixZQUEyQixBQUFVLE1BQU8sUUFBTyxVQUF4QixTQUFpQyxTQUFTLEdBQUcsTUFBTyxPQUFPLElBQUcsU0FBUyxHQUFHLE1BQU8sSUFBRyxBQUFZLE1BQU8sU0FBbkIsWUFBMkIsRUFBRSxjQUFjLFFBQVEsSUFBSSxPQUFPLFVBQVUsU0FBUyxNQUFPLEtBQUksR0FBRyxZQUFZLEVBQUUsR0FBRyxHQUFHLENBQUUsYUFBYSxJQUFHLEtBQU0sSUFBSSxXQUFVLHFDQUFxQyxZQUFZLEVBQUUsR0FBRyxPQUFRLEdBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxLQUFLLEdBQUksR0FBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsWUFBWSxHQUFHLEVBQUUsYUFBYSxHQUFHLFNBQVUsSUFBSSxHQUFFLFNBQVMsSUFBSSxPQUFPLGVB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LFNBQVMsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLEVBQUUsTUFBTSxhQUFhLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLE1BQU8sSUFBRyxFQUFFLEdBQUcsT0FBTyxPQUFPLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQyxNQUFNLFVBQVUsVUFBVSxLQUFLLEVBQUUsRUFBRSxTQUFTLENBQUMsTUFBTSxXQUFXLFVBQVUsTUFBTSxFQUFFLEVBQUUsU0FBUyxDQUFDLE1BQU0sU0FBUyxVQUFVLGVBQWUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxNQUFNLFNBQVMsTUFBTyxHQUFFLFFBQVEsV0FBVyxHQUFHLEVBQUUsSUFBSSxRQUFRLFdBQVcsR0FBRyxFQUFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsb0NBQW9DLFlBQVksR0FBRyxHQUFJLEdBQUUsRUFBRSxBQUFVLE1BQU8sSUFBakIsVUFBb0IsWUFBYSxRQUFPLEdBQUcsUUFBUSxHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUksTUFBSyxNQUFPLElBQUcsR0FBRyxFQUFFLEtBQUssWUFBWSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUksR0FBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLEdBQUcsTUFBTSxFQUFFLEdBQUcsTUFBTyxPQUFNLFFBQVEsR0FBSSxHQUFFLFFBQVMsU0FBUyxHQUFHLEdBQUksR0FBRSxHQUFHLFFBQVEsRUFBRSxFQUFFLEdBQUksTUFBSyxDQUFDLE9BQU8sSUFBSSxHQUFJLEdBQUUsR0FBRyxJQUFJLElBQUksR0FBRyxRQUFRLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixNQUFNLEdBQUcsSUFBSSxHQUFJLEdBQUUsS0FBTSxHQUFJLEdBQUUsR0FBRyxRQUFRLEVBQUUsRUFBRSxHQUFJLE1BQUssQ0FBQyxPQUFPLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxJQUFJLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsS0FBSyxHQUFHLElBQUssR0FBRSxFQUFFLE1BQU0sSUFBSSxJQUFLLFNBQVMsR0FBRyxHQUFJLEdBQUUsRUFBRSxHQUFHLE1BQU0sQUFBTSxLQUFOLEtBQVMsQUFBTSxJQUFOLElBQVEsRUFBRyxBQUF2dlMsR0FBeXZTLEdBQUcsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUssS0FBSyxJQUFJLEVBQUUsT0FBTyxHQUFJLEdBQUUsR0FBRyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEdBQUksUUFBTyxHQUFHLElBQUssR0FBRSxHQUFJLE1BQUssS0FBSyxHQUFHLElBQUksRUFBRSxFQUFFLE1BQU0sWUFBWSxHQUFHLE1BQU8sSUFBRyxRQUFRLElBQUksR0FBRyxRQUFRLEVBQUUsR0FBSSxNQUFLLGFBQWEsWUFBWSxFQUFFLEVBQUUsR0FBRyxHQUFHLEFBQU8sSUFBUCxLQUFTLE1BQU8sSUFBRyxRQUFRLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixLQUFLLEdBQUksR0FBRSxHQUFHLEdBQUcsTUFBTyxJQUFHLENBQUMsR0FBRyxRQUFRLEtBQUssMkRBQTJELE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBUSxHQUFFLEdBQUcsT0FBTyxHQUFHLFFBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUsscUJBQXFCLEtBQUssWUFBWSxFQUFFLEdBQUcsR0FBSSxHQUFFLEVBQUUsS0FBSyxFQUFFLEFBQVMsSUFBVCxPQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEFBQVMsSUFBVCxPQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEFBQVMsSUFBVCxPQUFXLEVBQUUsRUFBRSxNQUFPLElBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsWUFBWSxFQUFFLEdBQUcsR0FBSSxHQUFFLEdBQUcsR0FBRyxJQUFJLE1BQU0sR0FBRyxNQUFNLE1BQU8sR0FBRyxRQUFRLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxNQUFNLFlBQVksRUFBRSxHQUFHLE1BQU8sSUFBRyxFQUFFLE1BQU0sR0FBRyxZQUFZLEdBQUcsTUFBTyxJQUFHLFFBQVEsR0FBRyxZQUFZLEVBQUUsR0FBRyxHQUFJLEdBQUUsR0FBRyxHQUFHLE1BQU0sTUFBTyxJQUFHLFFBQVEsRUFBRSxDQUFDLE9BQU8sSUFBSSxZQUFZLEdBQUcsTUFBTyxJQUFHLFFBQVEsR0FBRyxZQUFZLEdBQUcsTUFBTyxJQUFHLFFBQVEsR0FBRyxZQUFZLEdBQUcsTUFBTyxJQUFHLFFBQVEsR0FBRyxZQUFZLEVBQUUsR0FBRyxNQUFPLElBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTyxJQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU8sSUFBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFPLElBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTyxJQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFFLEVBQUUsR0FBRyxRQUFRLEdBQUcsRUFBRSxHQUFHLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxVQUFVLEdBQUcsRUFBRSxHQUFHLE1BQU8sR0FBRSxjQUFjLE1BQU8sQ0FBYSxNQUFPLFNBQXBCLFlBQTJCLE9BQU8sUUFBUSxhQUFhLFlBQVksR0FBRyxHQUFHLEFBQVUsTUFBTyxJQUFqQixVQUFvQixHQUFJLEdBQUUsQUFBYSxNQUFPLFNBQXBCLFlBQTJCLE9BQU8sT0FBTyxNQUFPLEdBQUUsZUFBZSxFQUFFLGVBQWUsR0FBRyxLQUFLLE1BQU8sR0FBRSxZQUFZLEVBQUUsR0FBRyxNQUFPLElBQUcsR0FBRyxRQUFRLEtBQUssR0FBRyxPQUFPLEdBQUcsWUFBWSxFQUFFLEdBQUcsTUFBTyxJQUFHLEdBQUcsUUFBUSxLQUFLLEdBQUcsTUFBTSxHQUFHLFlBQVksRUFBRSxHQUFHLE1BQU8sSUFBRyxHQUFHLFFBQVEsS0FBSyxHQUFHLE1BQU0sR0FBRyxZQUFZLEdBQUcsR0FBSSxHQUFFLFVBQVUsT0FBTyxHQUFHLEFBQVMsVUFBVSxLQUFuQixPQUFzQixVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsV0FBVyxNQUFPLElBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEtBQUssR0FBRyxFQUFFLEtBQU0sU0FBUyxHQUFHLE1BQU8sSUFBRyxFQUFFLE1BQU8sR0FBRyxDQUFDLEVBQUUsS0FBTSxTQUFTLEdBQUcsTUFBTyxJQUFHLEVBQUUsTUFBTyxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssR0FBRyxZQUFZLEdBQUcsR0FBSSxHQUFFLFVBQVUsT0FBTyxHQUFHLEFBQVMsVUFBVSxLQUFuQixPQUFzQixVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUUsYUFBYSxNQUFPLElBQUcsRUFBRSxLQUFNLFNBQVMsR0FBRyxNQUFPLElBQUcsRUFBRSxNQUFPLEdBQUcsWUFBWSxHQUFHLEdBQUksR0FBRSxVQUFVLE9BQU8sR0FBRyxBQUFTLFVBQVUsS0FBbkIsT0FBc0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLFdBQVcsTUFBTyxJQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxLQUFLLEdBQUcsRUFBRSxLQUFNLFNBQVMsR0FBRyxNQUFPLElBQUcsRUFBRSxNQUFPLEdBQUcsQ0FBQyxFQUFFLEtBQU0sU0FBUyxHQUFHLE1BQU8sSUFBRyxFQUFFLE1BQU8sR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLEdBQUcsWUFBWSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFHLFFBQVEsR0FBRyxFQUFFLEVBQUcsUUFBUSxHQUFHLEVBQUUsRUFBRyxRQUFRLEdBQUcsRUFBRSxFQUFHLFFBQVEsR0FBRyxFQUFFLEVBQUcsUUFBUSxHQUFHLE1BQU8sS0FBSSxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLFlBQVksR0FBRyxHQUFJLEdBQUUsVUFBVSxPQUFPLEdBQUcsQUFBUyxVQUFVLEtBQW5CLE9BQXNCLFVBQVUsR0FBRyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxXQUFXLE1BQU8sSUFBRyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsS0FBSyxHQUFHLEVBQUUsS0FBTSxTQUFTLEdBQUcsTUFBTyxJQUFHLEVBQUUsTUFBTyxHQUFHLENBQUMsRUFBRSxLQUFNLFNBQVMsR0FBRyxNQUFPLElBQUcsRUFBRSxNQUFPLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxHQUFHLFlBQVksR0FBRyxHQUFJLEdBQUUsVUFBVSxPQUFPLEdBQUcsQUFBUyxVQUFVLEtBQW5CLE9BQXNCLFVBQVUsR0FBRyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBSSxNQUFLLEVBQUUsRUFBRSxHQUFHLE1BQU8sSUFBRyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsS0FBSyxHQUFHLFlBQVksRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFJLEdBQUUsRUFBRyxRQUFRLEdBQUcsRUFBRSxFQUFHLFFBQVEsR0FBRyxFQUFFLEVBQUcsUUFBUSxHQUFHLEVBQUUsRUFBRyxRQUFRLEdBQUcsRUFBRSxFQUFHLFFBQVEsR0FBRyxNQUFPLEtBQUksR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxZQUFZLEdBQUcsR0FBSSxHQUFFLFVBQVUsT0FBTyxHQUFHLEFBQVMsVUFBVSxLQUFuQixPQUFzQixVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxNQUFPLElBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxRQUFRLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU8sR0FBRSxLQUFNLFNBQVMsR0FBRyxNQUFPLEdBQUcsUUFBUSxLQUFLLEVBQUcsUUFBUSxJQUFJLEVBQUcsUUFBUSxLQUFLLEVBQUcsUUFBUSxLQUFNLFlBQVksR0FBRyxHQUFJLEdBQUUsVUFBVSxPQUFPLEdBQUcsQUFBUyxVQUFVLEtBQW5CLE9BQXNCLFVBQVUsR0FBRyxHQUFHLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxXQUFXLE1BQU8sSUFBRyxHQUFHLEVBQUUsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLFlBQVksRUFBRSxHQUFHLEdBQUksR0FBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQU0sSUFBSSxPQUFNLDJDQUEyQyxHQUFJLEdBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxRQUFRLEdBQUcsUUFBUSxFQUFFLEVBQUcsUUFBUSxJQUFJLEVBQUcsUUFBUSxJQUFJLEVBQUUsR0FBRyxRQUFRLEdBQUcsUUFBUSxFQUFFLEVBQUcsUUFBUSxJQUFJLEVBQUcsUUFBUSxJQUFJLEVBQUUsR0FBRyxRQUFRLEdBQUcsUUFBUSxFQUFFLEVBQUcsUUFBUSxJQUFJLEVBQUcsUUFBUSxJQUFJLElBQUksRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksVUFBVSxHQUFHLEVBQUUsR0FBRyxNQUFPLEdBQUUsWUFBWSxHQUFHLEdBQUksR0FBRSxVQUFVLE9BQU8sR0FBRyxBQUFTLFVBQVUsS0FBbkIsT0FBc0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU8sSUFBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU8sU0FBUyxHQUFHLE1BQU8sSUFBRyxRQUFRLEVBQUUsR0FBRyxLQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUksR0FBRSxVQUFVLE9BQU8sR0FBRyxBQUFTLFVBQVUsS0FBbkIsT0FBc0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU8sSUFBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU8sU0FBUyxHQUFHLE1BQU8sSUFBRyxRQUFRLEVBQUUsR0FBRyxLQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUksR0FBRSxVQUFVLE9BQU8sR0FBRyxBQUFTLFVBQVUsS0FBbkIsT0FBc0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU8sSUFBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU8sU0FBUyxHQUFHLE1BQU8sSUFBRyxRQUFRLEVBQUUsR0FBRyxLQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUksR0FBRSxVQUFVLE9BQU8sR0FBRyxBQUFTLFVBQVUsS0FBbkIsT0FBc0IsVUFBVSxHQUFHLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU8sSUFBRyxHQUFHLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLE1BQU8sU0FBUyxHQUFHLE1BQU8sSUFBRyxRQUFRLEVBQUUsR0FBRyxLQUFNLEdBQUcsWUFBWSxHQUFHLEdBQUksR0FBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLGFBQWEsR0FBRyxHQUFHLEdBQUcsR0FBSSxHQUFFLEVBQUUsT0FBUSxTQUFTLEdBQUcsTUFBTyxJQUFHLFFBQVEsRUFBRSxJQUFJLElBQUssTUFBTyxJQUFHLFFBQVEsR0FBRyxNQUFPLEdBQUUsR0FBRyxRQUFRLEdBQUcsRUFBRSxZQUFZLEdBQUcsR0FBSSxHQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsYUFBYSxHQUFHLEdBQUcsR0FBRyxHQUFJLEdBQUUsRUFBRSxPQUFRLFNBQVMsR0FBRyxNQUFPLElBQUcsUUFBUSxFQUFFLElBQUksSUFBSyxNQUFPLElBQUcsUUFBUSxHQUFHLE1BQU8sR0FBRSxHQUFHLFFBQVEsR0FBRyxFQUFFLGNBQWMsT0FBUSxHQUFFLFVBQVUsT0FBTyxHQUFHLEFBQVMsVUFBVSxLQUFuQixPQUFzQixVQUFVLEdBQUcsR0FBRyxFQUFFLFVBQVUsT0FBTyxHQUFHLEFBQVMsVUFBVSxLQUFuQixPQUFzQixVQUFVLEdBQUcscUNBQXFDLEVBQUUsR0FBSSxLQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxHQUFJLEdBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxRQUFRLElBQUksR0FBSSxHQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsRUFBRSxJQUFJLElBQUksR0FBRyxFQUFFLFNBQVMsSUFBSyxHQUFFLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxZQUFZLEFBQVcsR0FBRyxLQUFkLFVBQWtCLEdBQUksR0FBRSxPQUFPLEtBQUssR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEdBQUcsQUFBVSxNQUFPLElBQWpCLFVBQW9CLEVBQUUsY0FBYyxNQUFNLE9BQVEsR0FBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEdBQUksSUFBRSxHQUFHLEVBQUUsR0FBRyxjQUFjLEdBQUUsRUFBRSxJQUFJLEtBQUksR0FBRyxHQUFFLFNBQVMsSUFBSyxJQUFFLEtBQUssR0FBRyxFQUFFLElBQUksR0FBRSxPQUFNLE1BQU8sR0FBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxPQUFRLEdBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssR0FBSSxHQUFFLEdBQUcsUUFBUSxHQUFHLFFBQVEsRUFBRSxFQUFHLFFBQVEsRUFBRSxLQUFLLEVBQUcsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLFFBQVEsRUFBRyxHQUFFLEdBQUcsR0FBRyxHQUFHLFFBQVEsRUFBRSxJQUFJLEdBQUcsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxNQUFPLEdBQUUsWUFBWSxHQUFHLE1BQU8sR0FBRSxHQUFHLElBQUksT0FBTyxHQUFHLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxHQUFJLEdBQUUsVUFBVSxPQUFPLEdBQUcsQUFBUyxVQUFVLEtBQW5CLE9BQXNCLFVBQVUsR0FBRyxHQUFHLEVBQUUsS0FBSyxLQUFLLEVBQUcsUUFBUSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUcsR0FBRSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsVUFBVSxHQUFHLFlBQVksRUFBRSxFQUFFLEVBQUUsR0FBRyxPQUFRLEdBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEdBQUksR0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFFLEVBQUcsUUFBUSxJQUFJLEdBQUcsR0FBRyxHQUFJLEdBQUUsRUFBRyxRQUFRLElBQUksR0FBRyxHQUFHLEVBQUUsS0FBSyxHQUFHLE1BQU8sR0FBRSxHQUFJLElBQUcsU0FBUyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUksR0FBRSxHQUFHLEdBQUcsV0FBVyxHQUFHLEdBQUksR0FBRSxHQUFHLEtBQUssR0FBRyxFQUFHLEVBQUcsRUFBRSxFQUFFLEtBQUssS0FBSyxJQUFJLGdCQUFpQixXQUFXLEdBQUksR0FBRSxFQUFFLE1BQU0sS0FB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LEVBQUcsR0FBRyxXQUFZLFNBQVMsR0FBRyxNQUFPLEdBQUUsTUFBTSxTQUFTLEtBQU0sRUFBRyxFQUFHLEdBQUcscUJBQXNCLFdBQVcsTUFBTyxHQUFFLE1BQU0sYUFBYyxFQUFFLE1BQU8sSUFBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLFNBQVMsTUFBTSxXQUFXLE1BQU8sR0FBRyxRQUFRLGNBQWMsTUFBTSxDQUFDLFVBQVUsb0NBQW9DLEtBQUsscUJBQXFCLEdBQUcsRUFBRyxRQUFRLFdBQVcsR0FBRyxHQUFHLFFBQVEsSUFBSSxHQUFHLFNBQVMsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFJLEdBQUUsR0FBRyxHQUFHLGFBQWEsR0FBSSxHQUFFLEdBQUcsS0FBSyxHQUFHLE9BQVEsR0FBRSxVQUFVLE9BQU8sRUFBRSxHQUFJLE9BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLFVBQVUsR0FBRyxNQUFPLEdBQUcsRUFBRyxFQUFFLEVBQUUsS0FBSyxNQUFNLEVBQUUsQ0FBQyxNQUFNLE9BQU8sS0FBSyxRQUFRLENBQUMsZ0JBQWdCLEtBQUssRUFBRyxFQUFHLEdBQUcsc0JBQXVCLFNBQVMsR0FBRyxNQUFPLEdBQUUsSUFBSyxTQUFTLEVBQUUsR0FBRyxNQUFPLEdBQUcsUUFBUSxjQUFjLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLE9BQVMsRUFBRyxFQUFHLEdBQUcsbUJBQW9CLFNBQVMsR0FBRyxNQUFPLEdBQUcsUUFBUSxjQUFjLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxNQUFNLFVBQVUsaUNBQWlDLFNBQVMsU0FBUyxHQUFHLE1BQU8sR0FBRSxTQUFTLEVBQUUsT0FBTyxTQUFTLEVBQUUsb0JBQW9CLE1BQU8sRUFBRyxFQUFHLEdBQUcsaUJBQWtCLFNBQVMsRUFBRSxHQUFHLE1BQU8sR0FBRyxRQUFRLGNBQWMsTUFBTSxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMsV0FBVyxFQUFFLFVBQVUsVUFBVSxVQUFVLG9DQUFvQyxRQUFRLEVBQUUsZ0JBQWdCLEVB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RSxJQUFJLEVBQUUsRUFBRSxlQUFlLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxHQUFJLEdBQUUsR0FBRyxFQUFFLGNBQWMsTUFBTyxHQUFFLElBQUksS0FBTSxFQUFHLEVBQUcsR0FBRyxZQUFhLFdBQVcsR0FBSSxHQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsUUFBUSxNQUFNLENBQUUsRUFBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFNLEVBQUcsRUFBRyxHQUFHLHFCQUFzQixXQUFXLEdBQUksR0FBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLGNBQWMsR0FBRSxFQUFFLFVBQVUsR0FBRSxFQUFFLFFBQVEsTUFBTSxDQUFFLEVBQUUsSUFBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsZUFBZ0IsSUFBRyxJQUFJLElBQUcsUUFBUSxFQUFFLEtBQUksR0FBRyxFQUFFLEtBQUksR0FBRyxFQUFFLEVBQUUsSUFBSSxJQUFHLElBQUksSUFBRyxRQUFRLEVBQUUsS0FBSSxHQUFHLEVBQUUsTUFBSyxDQUFFLEVBQUMsR0FBRyxDQUFDLElBQUcsSUFBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLEtBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTSxHQUFHLEVBQUUsR0FBRSxNQUFPLEVBQUcsRUFBRyxHQUFHLHdCQUF5QixXQUFXLEdBQUcsQ0FBQyxFQUFFLHFCQUFxQixNQUFNLEdBQUcsR0FBSSxHQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsVUFBVSxNQUFPLElBQUcsRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFNLEVBQUcsRUFBRyxHQUFHLHNCQUF1QixXQUFXLEdBQUcsQ0FBQyxFQUFFLHFCQUFxQixNQUFNLEdBQUcsR0FBSSxHQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVB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QUFLLFFBQVEsQ0FBQyxPQUFPLE9BQU8sRUFBRyxFQUFHLEdBQUcsY0FBZSxTQUFTLEdBQUcsQUFBQyxHQUFFLE1BQU0sU0FBUyxFQUFFLE1BQU0sVUFBVSxHQUFHLEVBQUUsRUFBRSxRQUFTLEdBQUUsTUFBTSxjQUFjLEVBQUUsTUFBTSxjQUFjLEVBQUUsTUFBTSxhQUFhLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsS0FBTSxFQUFHLEVBQUcsR0FBRyxZQUFhLFNBQVMsRUFBRSxFQUFFLEdBQUcsR0FBSSxHQUFFLENBQUMsbUNBQW1DLEVBQUUsTUFBTSxjQUFjLEVBQUUsTUFBTSxjQUFjLEVBQUUsRUFBRSxHQUFHLFFBQVEsTUFBTyxHQUFFLE1BQU0sVUFBVSxJQUFJLEVBQUcsUUFBUSxJQUFJLElBQUksRUFBRyxRQUFRLElBQUksRUFBRSxLQUFLLDhDQUFnRCxJQUFFLE1BQU0sU0FBUyxFQUFFLE1BQU0sVUFBVSxHQUFHLEVBQUUsRUFBRSxRQUFTLEdBQUUsTUFBTSxjQUFjLEVBQUUsTUFBTSxjQUFjLEVBQUUsTUFBTSxhQUFhLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLDhDQUE4QyxFQUFFLE1BQU0sYUFBYyxJQUFHLEVBQUcsUUFBUSxHQUFHLEVBQUcsUUFBUSxJQUFJLEVBQUUsTUFBTSxXQUFXLEdBQUcsRUFBRSxLQUFLLDhDQUE4QyxFQUFFLEtBQUssT0FBUSxFQUFHLEVBQUcsR0FBRyxjQUFlLFdBQVcsT0FBUSxHQUFFLEdBQUcsRUFBRSxFQUFFLE1BQU0sT0FBTyxFQUFFLE1BQU0sT0FBTyxJQUFJLEVBQUUsRUFBRSxNQUFNLFVBQVUsRUFBRSxHQUFHLEdBQUcsRUFBRSxNQUFNLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxFQUFFLE1BQU0sWUFBWSxLQUFNLFNBQVMsR0FBRSxJQUFHLE1BQU8sSUFBRSxLQUFLLEdBQUUsRUFBRSxNQUFNLFVBQVUsRUFBRSxNQUFNLFlBQVksS0FBSyxHQUFFLEVBQUcsUUFBUSxJQUFHLEdBQUUsRUFB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
